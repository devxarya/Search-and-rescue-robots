
E_yantra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000204  00800200  00002a18  00002aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000218  00800404  00800404  00002cb0  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00006a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021ec  00000000  00000000  00006af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003da  00000000  00000000  00008ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ec  00000000  00000000  000090be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa4  00000000  00000000  00009aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a28  00000000  00000000  0000a550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001824  00000000  00000000  0000af78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_5>
      18:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <ADC_Conversion+0x2c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	14 e0       	ldi	r17, 0x04	; 4
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e8 e1       	ldi	r30, 0x18	; 24
     17e:	fa e2       	ldi	r31, 0x2A	; 42
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a4 30       	cpi	r26, 0x04	; 4
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	16 e0       	ldi	r17, 0x06	; 6
     192:	a4 e0       	ldi	r26, 0x04	; 4
     194:	b4 e0       	ldi	r27, 0x04	; 4
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ac 31       	cpi	r26, 0x1C	; 28
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <main>
     1a4:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <demux_data>:

	demux_data();
}

void demux_data (void)
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
	if (data/100==0)
     1b0:	e0 91 03 06 	lds	r30, 0x0603
     1b4:	f0 91 04 06 	lds	r31, 0x0604
     1b8:	e4 36       	cpi	r30, 0x64	; 100
     1ba:	f1 05       	cpc	r31, r1
     1bc:	c8 f4       	brcc	.+50     	; 0x1f0 <demux_data+0x44>
	{
		packet[0]=data%10;              //y           // 0-dest_x-dest_y
     1be:	ca e0       	ldi	r28, 0x0A	; 10
     1c0:	d0 e0       	ldi	r29, 0x00	; 0
     1c2:	cf 01       	movw	r24, r30
     1c4:	be 01       	movw	r22, r28
     1c6:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     1ca:	9c 01       	movw	r18, r24
     1cc:	90 93 0f 04 	sts	0x040F, r25
     1d0:	80 93 0e 04 	sts	0x040E, r24
		packet[1]=(data%100-data%10)/10;//x
     1d4:	cf 01       	movw	r24, r30
     1d6:	64 e6       	ldi	r22, 0x64	; 100
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     1de:	82 1b       	sub	r24, r18
     1e0:	93 0b       	sbc	r25, r19
     1e2:	be 01       	movw	r22, r28
     1e4:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     1e8:	70 93 11 04 	sts	0x0411, r23
     1ec:	60 93 10 04 	sts	0x0410, r22
	}
	if (data/100==1)
     1f0:	cf 01       	movw	r24, r30
     1f2:	84 56       	subi	r24, 0x64	; 100
     1f4:	90 40       	sbci	r25, 0x00	; 0
     1f6:	84 36       	cpi	r24, 0x64	; 100
     1f8:	91 05       	cpc	r25, r1
     1fa:	28 f5       	brcc	.+74     	; 0x246 <demux_data+0x9a>
	{
		
		packet[2]=data%10; //1-trigger-xx
     1fc:	2a e0       	ldi	r18, 0x0A	; 10
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	cf 01       	movw	r24, r30
     202:	b9 01       	movw	r22, r18
     204:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     208:	ec 01       	movw	r28, r24
     20a:	90 93 13 04 	sts	0x0413, r25
     20e:	80 93 12 04 	sts	0x0412, r24
		packet[3]=(data%100-data%10)/10;
     212:	cf 01       	movw	r24, r30
     214:	64 e6       	ldi	r22, 0x64	; 100
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     21c:	8c 1b       	sub	r24, r28
     21e:	9d 0b       	sbc	r25, r29
     220:	b9 01       	movw	r22, r18
     222:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     226:	60 93 14 04 	sts	0x0414, r22
     22a:	70 93 15 04 	sts	0x0415, r23
		search_y=packet[2];
     22e:	d0 93 93 04 	sts	0x0493, r29
     232:	c0 93 92 04 	sts	0x0492, r28
		search_x=packet[3];
     236:	60 93 90 04 	sts	0x0490, r22
     23a:	70 93 91 04 	sts	0x0491, r23
		stop_here=0;
     23e:	10 92 02 06 	sts	0x0602, r1
     242:	10 92 01 06 	sts	0x0601, r1
	}
	
	if (data/100==2)     // 2-color-trigger
     246:	cf 01       	movw	r24, r30
     248:	88 5c       	subi	r24, 0xC8	; 200
     24a:	90 40       	sbci	r25, 0x00	; 0
     24c:	84 36       	cpi	r24, 0x64	; 100
     24e:	91 05       	cpc	r25, r1
     250:	f0 f5       	brcc	.+124    	; 0x2ce <demux_data+0x122>
	{
		packet[4]=data%10;             
     252:	2a e0       	ldi	r18, 0x0A	; 10
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	cf 01       	movw	r24, r30
     258:	b9 01       	movw	r22, r18
     25a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     25e:	ec 01       	movw	r28, r24
     260:	90 93 17 04 	sts	0x0417, r25
     264:	80 93 16 04 	sts	0x0416, r24
		packet[5]=(data%100-data%10)/10;
     268:	cf 01       	movw	r24, r30
     26a:	64 e6       	ldi	r22, 0x64	; 100
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     272:	8c 1b       	sub	r24, r28
     274:	9d 0b       	sbc	r25, r29
     276:	b9 01       	movw	r22, r18
     278:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     27c:	60 93 18 04 	sts	0x0418, r22
     280:	e6 e1       	ldi	r30, 0x16	; 22
     282:	f4 e0       	ldi	r31, 0x04	; 4
     284:	73 83       	std	Z+3, r23	; 0x03
		dest_x[index]=packet[1];
     286:	40 91 0c 04 	lds	r20, 0x040C
     28a:	50 91 0d 04 	lds	r21, 0x040D
     28e:	ca 01       	movw	r24, r20
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	fc 01       	movw	r30, r24
     296:	ec 5b       	subi	r30, 0xBC	; 188
     298:	fb 4f       	sbci	r31, 0xFB	; 251
     29a:	20 91 10 04 	lds	r18, 0x0410
     29e:	30 91 11 04 	lds	r19, 0x0411
     2a2:	31 83       	std	Z+1, r19	; 0x01
     2a4:	20 83       	st	Z, r18
		dest_y[index]=packet[0];
     2a6:	fc 01       	movw	r30, r24
     2a8:	ee 5c       	subi	r30, 0xCE	; 206
     2aa:	fb 4f       	sbci	r31, 0xFB	; 251
     2ac:	20 91 0e 04 	lds	r18, 0x040E
     2b0:	30 91 0f 04 	lds	r19, 0x040F
     2b4:	31 83       	std	Z+1, r19	; 0x01
     2b6:	20 83       	st	Z, r18
		color[index]=packet[5];
     2b8:	fc 01       	movw	r30, r24
     2ba:	e0 5e       	subi	r30, 0xE0	; 224
     2bc:	fb 4f       	sbci	r31, 0xFB	; 251
     2be:	60 83       	st	Z, r22
     2c0:	71 83       	std	Z+1, r23	; 0x01
        index++;	
     2c2:	4f 5f       	subi	r20, 0xFF	; 255
     2c4:	5f 4f       	sbci	r21, 0xFF	; 255
     2c6:	50 93 0d 04 	sts	0x040D, r21
     2ca:	40 93 0c 04 	sts	0x040C, r20
	}
		
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d4:	86 e6       	ldi	r24, 0x66	; 102
     2d6:	9e e0       	ldi	r25, 0x0E	; 14
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_set_4bit+0x4>
     2dc:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2de:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2e0:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     2e2:	80 e3       	ldi	r24, 0x30	; 48
     2e4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2e6:	42 9a       	sbi	0x08, 2	; 8
     2e8:	ef ef       	ldi	r30, 0xFF	; 255
     2ea:	f7 e4       	ldi	r31, 0x47	; 71
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_set_4bit+0x18>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_set_4bit+0x1e>
     2f2:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2f4:	42 98       	cbi	0x08, 2	; 8
     2f6:	e6 e6       	ldi	r30, 0x66	; 102
     2f8:	fe e0       	ldi	r31, 0x0E	; 14
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_set_4bit+0x26>
     2fe:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     300:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     302:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     304:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     306:	42 9a       	sbi	0x08, 2	; 8
     308:	ef ef       	ldi	r30, 0xFF	; 255
     30a:	f7 e4       	ldi	r31, 0x47	; 71
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_set_4bit+0x38>
     310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_set_4bit+0x3e>
     312:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     314:	42 98       	cbi	0x08, 2	; 8
     316:	e6 e6       	ldi	r30, 0x66	; 102
     318:	fe e0       	ldi	r31, 0x0E	; 14
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_set_4bit+0x46>
     31e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     320:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     322:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     324:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     326:	42 9a       	sbi	0x08, 2	; 8
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	97 e4       	ldi	r25, 0x47	; 71
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <lcd_set_4bit+0x58>
     330:	00 c0       	rjmp	.+0      	; 0x332 <lcd_set_4bit+0x5e>
     332:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     334:	42 98       	cbi	0x08, 2	; 8
     336:	e6 e6       	ldi	r30, 0x66	; 102
     338:	fe e0       	ldi	r31, 0x0E	; 14
     33a:	31 97       	sbiw	r30, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <lcd_set_4bit+0x66>
     33e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     340:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     342:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     344:	80 e2       	ldi	r24, 0x20	; 32
     346:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     348:	42 9a       	sbi	0x08, 2	; 8
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	97 e4       	ldi	r25, 0x47	; 71
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <lcd_set_4bit+0x7a>
     352:	00 c0       	rjmp	.+0      	; 0x354 <lcd_set_4bit+0x80>
     354:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     356:	42 98       	cbi	0x08, 2	; 8

	
}
     358:	08 95       	ret

0000035a <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     35a:	98 b1       	in	r25, 0x08	; 8
     35c:	9f 70       	andi	r25, 0x0F	; 15
     35e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     360:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     362:	28 2f       	mov	r18, r24
     364:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     366:	92 2b       	or	r25, r18
     368:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     36a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     36c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     36e:	42 9a       	sbi	0x08, 2	; 8
     370:	ef ef       	ldi	r30, 0xFF	; 255
     372:	f7 e4       	ldi	r31, 0x47	; 71
     374:	31 97       	sbiw	r30, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <lcd_wr_command+0x1a>
     378:	00 c0       	rjmp	.+0      	; 0x37a <lcd_wr_command+0x20>
     37a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     37c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     37e:	98 b1       	in	r25, 0x08	; 8
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     384:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     386:	82 95       	swap	r24
     388:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     38a:	89 2b       	or	r24, r25
     38c:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     38e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     390:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     392:	42 9a       	sbi	0x08, 2	; 8
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	97 e4       	ldi	r25, 0x47	; 71
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_wr_command+0x3e>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_wr_command+0x44>
     39e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3a0:	42 98       	cbi	0x08, 2	; 8
}
     3a2:	08 95       	ret

000003a4 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     3a4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_set_4bit>
     3a8:	86 e6       	ldi	r24, 0x66	; 102
     3aa:	9e e0       	ldi	r25, 0x0E	; 14
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcd_init+0x8>
     3b0:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     3b2:	88 e2       	ldi	r24, 0x28	; 40
     3b4:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
	lcd_wr_command(0x01);
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
	lcd_wr_command(0x06);
     3be:	86 e0       	ldi	r24, 0x06	; 6
     3c0:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
	lcd_wr_command(0x0E);
     3c4:	8e e0       	ldi	r24, 0x0E	; 14
     3c6:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
	lcd_wr_command(0x80);
     3ca:	80 e8       	ldi	r24, 0x80	; 128
     3cc:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
		
}
     3d0:	08 95       	ret

000003d2 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     3d2:	98 b1       	in	r25, 0x08	; 8
     3d4:	9f 70       	andi	r25, 0x0F	; 15
     3d6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     3d8:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     3da:	28 2f       	mov	r18, r24
     3dc:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     3de:	92 2b       	or	r25, r18
     3e0:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     3e2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3e4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3e6:	42 9a       	sbi	0x08, 2	; 8
     3e8:	ef ef       	ldi	r30, 0xFF	; 255
     3ea:	f7 e4       	ldi	r31, 0x47	; 71
     3ec:	31 97       	sbiw	r30, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcd_wr_char+0x1a>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcd_wr_char+0x20>
     3f2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3f4:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     3f6:	98 b1       	in	r25, 0x08	; 8
     3f8:	9f 70       	andi	r25, 0x0F	; 15
     3fa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3fc:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     3fe:	82 95       	swap	r24
     400:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     402:	89 2b       	or	r24, r25
     404:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     406:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     408:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     40a:	42 9a       	sbi	0x08, 2	; 8
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	97 e4       	ldi	r25, 0x47	; 71
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <lcd_wr_char+0x3e>
     414:	00 c0       	rjmp	.+0      	; 0x416 <lcd_wr_char+0x44>
     416:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     418:	42 98       	cbi	0x08, 2	; 8
}
     41a:	08 95       	ret

0000041c <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
}
     422:	08 95       	ret

00000424 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
	while(*str != '\0')
     42a:	88 81       	ld	r24, Y
     42c:	88 23       	and	r24, r24
     42e:	31 f0       	breq	.+12     	; 0x43c <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     430:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     432:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     436:	89 91       	ld	r24, Y+
     438:	88 23       	and	r24, r24
     43a:	d9 f7       	brne	.-10     	; 0x432 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     442:	82 30       	cpi	r24, 0x02	; 2
     444:	79 f0       	breq	.+30     	; 0x464 <lcd_cursor+0x22>
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	18 f4       	brcc	.+6      	; 0x450 <lcd_cursor+0xe>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	c9 f4       	brne	.+50     	; 0x480 <lcd_cursor+0x3e>
     44e:	05 c0       	rjmp	.+10     	; 0x45a <lcd_cursor+0x18>
     450:	83 30       	cpi	r24, 0x03	; 3
     452:	69 f0       	breq	.+26     	; 0x46e <lcd_cursor+0x2c>
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	a1 f4       	brne	.+40     	; 0x480 <lcd_cursor+0x3e>
     458:	0f c0       	rjmp	.+30     	; 0x478 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     45a:	86 2f       	mov	r24, r22
     45c:	81 58       	subi	r24, 0x81	; 129
     45e:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
     462:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     464:	86 2f       	mov	r24, r22
     466:	81 54       	subi	r24, 0x41	; 65
     468:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
     46c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     46e:	86 2f       	mov	r24, r22
     470:	8d 56       	subi	r24, 0x6D	; 109
     472:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
     476:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     478:	86 2f       	mov	r24, r22
     47a:	8d 52       	subi	r24, 0x2D	; 45
     47c:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_wr_command>
     480:	08 95       	ret

00000482 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	8a 01       	movw	r16, r20
     48c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     48e:	88 23       	and	r24, r24
     490:	11 f0       	breq	.+4      	; 0x496 <lcd_print+0x14>
     492:	66 23       	and	r22, r22
     494:	19 f4       	brne	.+6      	; 0x49c <lcd_print+0x1a>
	{
		lcd_home();
     496:	0e 94 0e 02 	call	0x41c	; 0x41c <lcd_home>
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     49c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     4a0:	c5 30       	cpi	r28, 0x05	; 5
     4a2:	d1 05       	cpc	r29, r1
     4a4:	71 f4       	brne	.+28     	; 0x4c2 <lcd_print+0x40>
	{
		million=value/10000+48;
     4a6:	c8 01       	movw	r24, r16
     4a8:	60 e1       	ldi	r22, 0x10	; 16
     4aa:	77 e2       	ldi	r23, 0x27	; 39
     4ac:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     4b0:	cb 01       	movw	r24, r22
     4b2:	c0 96       	adiw	r24, 0x30	; 48
     4b4:	90 93 97 04 	sts	0x0497, r25
     4b8:	80 93 96 04 	sts	0x0496, r24
		lcd_wr_char(million);
     4bc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_wr_char>
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     4c2:	c4 30       	cpi	r28, 0x04	; 4
     4c4:	d1 05       	cpc	r29, r1
     4c6:	b9 f4       	brne	.+46     	; 0x4f6 <lcd_print+0x74>
	{
		temp = value/1000;
     4c8:	c8 01       	movw	r24, r16
     4ca:	68 ee       	ldi	r22, 0xE8	; 232
     4cc:	73 e0       	ldi	r23, 0x03	; 3
     4ce:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     4d2:	cb 01       	movw	r24, r22
     4d4:	70 93 3b 05 	sts	0x053B, r23
     4d8:	60 93 3a 05 	sts	0x053A, r22
		thousand = temp%10 + 48;
     4dc:	6a e0       	ldi	r22, 0x0A	; 10
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     4e4:	c0 96       	adiw	r24, 0x30	; 48
     4e6:	90 93 17 06 	sts	0x0617, r25
     4ea:	80 93 16 06 	sts	0x0616, r24
		lcd_wr_char(thousand);
     4ee:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_wr_char>
		flag=1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4f8:	c3 30       	cpi	r28, 0x03	; 3
     4fa:	d1 05       	cpc	r29, r1
     4fc:	11 f0       	breq	.+4      	; 0x502 <lcd_print+0x80>
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	b1 f4       	brne	.+44     	; 0x52e <lcd_print+0xac>
	{
		temp = value/100;
     502:	c8 01       	movw	r24, r16
     504:	64 e6       	ldi	r22, 0x64	; 100
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     50c:	cb 01       	movw	r24, r22
     50e:	70 93 3b 05 	sts	0x053B, r23
     512:	60 93 3a 05 	sts	0x053A, r22
		hundred = temp%10 + 48;
     516:	6a e0       	ldi	r22, 0x0A	; 10
     518:	70 e0       	ldi	r23, 0x00	; 0
     51a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     51e:	c0 96       	adiw	r24, 0x30	; 48
     520:	90 93 10 06 	sts	0x0610, r25
     524:	80 93 0f 06 	sts	0x060F, r24
		lcd_wr_char(hundred);
     528:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_wr_char>
		flag=1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     52e:	c2 30       	cpi	r28, 0x02	; 2
     530:	d1 05       	cpc	r29, r1
     532:	11 f0       	breq	.+4      	; 0x538 <lcd_print+0xb6>
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	b1 f4       	brne	.+44     	; 0x564 <lcd_print+0xe2>
	{
		temp = value/10;
     538:	2a e0       	ldi	r18, 0x0A	; 10
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	c8 01       	movw	r24, r16
     53e:	b9 01       	movw	r22, r18
     540:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     544:	cb 01       	movw	r24, r22
     546:	70 93 3b 05 	sts	0x053B, r23
     54a:	60 93 3a 05 	sts	0x053A, r22
		tens = temp%10 + 48;
     54e:	b9 01       	movw	r22, r18
     550:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     554:	c0 96       	adiw	r24, 0x30	; 48
     556:	90 93 f6 05 	sts	0x05F6, r25
     55a:	80 93 f5 05 	sts	0x05F5, r24
		lcd_wr_char(tens);
     55e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_wr_char>
		flag=1;
     562:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     564:	c1 30       	cpi	r28, 0x01	; 1
     566:	d1 05       	cpc	r29, r1
     568:	11 f0       	breq	.+4      	; 0x56e <lcd_print+0xec>
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	61 f4       	brne	.+24     	; 0x586 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     56e:	c8 01       	movw	r24, r16
     570:	6a e0       	ldi	r22, 0x0A	; 10
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__udivmodhi4>
     578:	c0 96       	adiw	r24, 0x30	; 48
     57a:	90 93 15 06 	sts	0x0615, r25
     57e:	80 93 14 06 	sts	0x0614, r24
		lcd_wr_char(unit);
     582:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_wr_char>
	}
	if(digits>5)
     586:	c6 30       	cpi	r28, 0x06	; 6
     588:	d1 05       	cpc	r29, r1
     58a:	1c f0       	brlt	.+6      	; 0x592 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     58c:	85 e4       	ldi	r24, 0x45	; 69
     58e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_wr_char>
	}
	
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <motion_set>:
void motion_set (unsigned char Direct)
{
	unsigned char PortARestore = 0;

	Direct &= 0x0F; 			// removing upper nibble as it is not needed
	PortARestore = PORTA; 		// reading the PORTA's original status
     59c:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibble to 0
     59e:	90 7f       	andi	r25, 0xF0	; 240

void motion_set (unsigned char Direct)
{
	unsigned char PortARestore = 0;

	Direct &= 0x0F; 			// removing upper nibble as it is not needed
     5a0:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibble to 0
	PortARestore |= Direct; 	// adding lower nibble for direction command and restoring the PORTA status
     5a2:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
     5a4:	92 b9       	out	0x02, r25	; 2
}
     5a6:	08 95       	ret

000005a8 <motor_init>:


void motor_init (void)
{
	DDRA = DDRA | 0x0F;
     5a8:	81 b1       	in	r24, 0x01	; 1
     5aa:	8f 60       	ori	r24, 0x0F	; 15
     5ac:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; 
     5ae:	82 b1       	in	r24, 0x02	; 2
     5b0:	80 7f       	andi	r24, 0xF0	; 240
     5b2:	82 b9       	out	0x02, r24	; 2
	
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     5b4:	ea e0       	ldi	r30, 0x0A	; 10
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	80 81       	ld	r24, Z
     5ba:	88 61       	ori	r24, 0x18	; 24
     5bc:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     5be:	eb e0       	ldi	r30, 0x0B	; 11
     5c0:	f1 e0       	ldi	r31, 0x01	; 1
     5c2:	80 81       	ld	r24, Z
     5c4:	88 61       	ori	r24, 0x18	; 24
     5c6:	80 83       	st	Z, r24

}
     5c8:	08 95       	ret

000005ca <timer5_init>:

void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     5ca:	e1 e2       	ldi	r30, 0x21	; 33
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
     5ce:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     5dc:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     5e0:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     5e4:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     5e8:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     5ec:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     5f0:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     5f4:	89 ea       	ldi	r24, 0xA9	; 169
     5f6:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     5fa:	8b e0       	ldi	r24, 0x0B	; 11
     5fc:	80 83       	st	Z, r24
}
     5fe:	08 95       	ret

00000600 <velocity>:

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor-50;
     600:	82 53       	subi	r24, 0x32	; 50
     602:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor-50;
     606:	62 53       	subi	r22, 0x32	; 50
     608:	60 93 2a 01 	sts	0x012A, r22
}
     60c:	08 95       	ret

0000060e <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
     60e:	86 e0       	ldi	r24, 0x06	; 6
     610:	0e 94 ce 02 	call	0x59c	; 0x59c <motion_set>
}
     614:	08 95       	ret

00000616 <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
     616:	89 e0       	ldi	r24, 0x09	; 9
     618:	0e 94 ce 02 	call	0x59c	; 0x59c <motion_set>
}
     61c:	08 95       	ret

0000061e <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     61e:	85 e0       	ldi	r24, 0x05	; 5
     620:	0e 94 ce 02 	call	0x59c	; 0x59c <motion_set>
}
     624:	08 95       	ret

00000626 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     626:	8a e0       	ldi	r24, 0x0A	; 10
     628:	0e 94 ce 02 	call	0x59c	; 0x59c <motion_set>
}
     62c:	08 95       	ret

0000062e <stop>:


void stop (void) //hard stop
{
	motion_set(0x00);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 ce 02 	call	0x59c	; 0x59c <motion_set>
}
     634:	08 95       	ret

00000636 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     636:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     638:	74 9a       	sbi	0x0e, 4	; 14
}
     63a:	08 95       	ret

0000063c <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     63c:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     63e:	75 9a       	sbi	0x0e, 5	; 14
}
     640:	08 95       	ret

00000642 <left_position_encoder_interrupt_init>:



void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     642:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     644:	ea e6       	ldi	r30, 0x6A	; 106
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	82 60       	ori	r24, 0x02	; 2
     64c:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     64e:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     650:	78 94       	sei
}
     652:	08 95       	ret

00000654 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     654:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     656:	ea e6       	ldi	r30, 0x6A	; 106
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	88 60       	ori	r24, 0x08	; 8
     65e:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     660:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     662:	78 94       	sei
}
     664:	08 95       	ret

00000666 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     666:	1f 92       	push	r1
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	0f 92       	push	r0
     66e:	11 24       	eor	r1, r1
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     678:	80 91 72 04 	lds	r24, 0x0472
     67c:	90 91 73 04 	lds	r25, 0x0473
     680:	a0 91 74 04 	lds	r26, 0x0474
     684:	b0 91 75 04 	lds	r27, 0x0475
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	a1 1d       	adc	r26, r1
     68c:	b1 1d       	adc	r27, r1
     68e:	80 93 72 04 	sts	0x0472, r24
     692:	90 93 73 04 	sts	0x0473, r25
     696:	a0 93 74 04 	sts	0x0474, r26
     69a:	b0 93 75 04 	sts	0x0475, r27
}
     69e:	bf 91       	pop	r27
     6a0:	af 91       	pop	r26
     6a2:	9f 91       	pop	r25
     6a4:	8f 91       	pop	r24
     6a6:	0f 90       	pop	r0
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	0f 90       	pop	r0
     6ac:	1f 90       	pop	r1
     6ae:	18 95       	reti

000006b0 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	8f 93       	push	r24
     6bc:	9f 93       	push	r25
     6be:	af 93       	push	r26
     6c0:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     6c2:	80 91 76 04 	lds	r24, 0x0476
     6c6:	90 91 77 04 	lds	r25, 0x0477
     6ca:	a0 91 78 04 	lds	r26, 0x0478
     6ce:	b0 91 79 04 	lds	r27, 0x0479
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	a1 1d       	adc	r26, r1
     6d6:	b1 1d       	adc	r27, r1
     6d8:	80 93 76 04 	sts	0x0476, r24
     6dc:	90 93 77 04 	sts	0x0477, r25
     6e0:	a0 93 78 04 	sts	0x0478, r26
     6e4:	b0 93 79 04 	sts	0x0479, r27
}
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <__vector_1>:

ISR(INT0_vect)
{
     6fa:	1f 92       	push	r1
     6fc:	0f 92       	push	r0
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	8f 93       	push	r24
     706:	9f 93       	push	r25
     708:	af 93       	push	r26
     70a:	bf 93       	push	r27
	pulse++; //increment on receiving pulse from the color sensor
     70c:	80 91 56 04 	lds	r24, 0x0456
     710:	90 91 57 04 	lds	r25, 0x0457
     714:	a0 91 58 04 	lds	r26, 0x0458
     718:	b0 91 59 04 	lds	r27, 0x0459
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	a1 1d       	adc	r26, r1
     720:	b1 1d       	adc	r27, r1
     722:	80 93 56 04 	sts	0x0456, r24
     726:	90 93 57 04 	sts	0x0457, r25
     72a:	a0 93 58 04 	sts	0x0458, r26
     72e:	b0 93 59 04 	sts	0x0459, r27
}
     732:	bf 91       	pop	r27
     734:	af 91       	pop	r26
     736:	9f 91       	pop	r25
     738:	8f 91       	pop	r24
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/4.090; // division by resolution to get shaft count 4.62
     74a:	bc 01       	movw	r22, r24
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatunsisf>
     754:	28 e4       	ldi	r18, 0x48	; 72
     756:	31 ee       	ldi	r19, 0xE1	; 225
     758:	42 e8       	ldi	r20, 0x82	; 130
     75a:	50 e4       	ldi	r21, 0x40	; 64
     75c:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     760:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__fixunssfsi>
     764:	dc 01       	movw	r26, r24
     766:	cb 01       	movw	r24, r22
     768:	a0 e0       	ldi	r26, 0x00	; 0
     76a:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     76c:	10 92 72 04 	sts	0x0472, r1
     770:	10 92 73 04 	sts	0x0473, r1
     774:	10 92 74 04 	sts	0x0474, r1
     778:	10 92 75 04 	sts	0x0475, r1
	ShaftCountLeft = 0;
     77c:	10 92 76 04 	sts	0x0476, r1
     780:	10 92 77 04 	sts	0x0477, r1
     784:	10 92 78 04 	sts	0x0478, r1
     788:	10 92 79 04 	sts	0x0479, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	c0 e0       	ldi	r28, 0x00	; 0
     790:	40 91 72 04 	lds	r20, 0x0472
     794:	50 91 73 04 	lds	r21, 0x0473
     798:	60 91 74 04 	lds	r22, 0x0474
     79c:	70 91 75 04 	lds	r23, 0x0475
     7a0:	00 91 76 04 	lds	r16, 0x0476
     7a4:	10 91 77 04 	lds	r17, 0x0477
     7a8:	20 91 78 04 	lds	r18, 0x0478
     7ac:	30 91 79 04 	lds	r19, 0x0479
     7b0:	ef 2f       	mov	r30, r31
     7b2:	48 17       	cp	r20, r24
     7b4:	59 07       	cpc	r21, r25
     7b6:	6a 07       	cpc	r22, r26
     7b8:	7b 07       	cpc	r23, r27
     7ba:	08 f4       	brcc	.+2      	; 0x7be <angle_rotate+0x7a>
     7bc:	ec 2f       	mov	r30, r28
     7be:	ee 23       	and	r30, r30
     7c0:	49 f4       	brne	.+18     	; 0x7d4 <angle_rotate+0x90>
     7c2:	4f 2f       	mov	r20, r31
     7c4:	08 17       	cp	r16, r24
     7c6:	19 07       	cpc	r17, r25
     7c8:	2a 07       	cpc	r18, r26
     7ca:	3b 07       	cpc	r19, r27
     7cc:	08 f4       	brcc	.+2      	; 0x7d0 <angle_rotate+0x8c>
     7ce:	4c 2f       	mov	r20, r28
     7d0:	44 23       	and	r20, r20
     7d2:	f1 f2       	breq	.-68     	; 0x790 <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     7d4:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
}
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
	{
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;

		ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     7e0:	bc 01       	movw	r22, r24
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatunsisf>
     7ea:	25 ee       	ldi	r18, 0xE5	; 229
     7ec:	30 ed       	ldi	r19, 0xD0	; 208
     7ee:	4a ea       	ldi	r20, 0xAA	; 170
     7f0:	50 e4       	ldi	r21, 0x40	; 64
     7f2:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
		ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     7f6:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__fixunssfsi>
     7fa:	46 2f       	mov	r20, r22
     7fc:	57 2f       	mov	r21, r23
     7fe:	68 2f       	mov	r22, r24
     800:	79 2f       	mov	r23, r25
		ShaftCountRight = 0;
     802:	10 92 72 04 	sts	0x0472, r1
     806:	10 92 73 04 	sts	0x0473, r1
     80a:	10 92 74 04 	sts	0x0474, r1
     80e:	10 92 75 04 	sts	0x0475, r1
		ShaftCountLeft = 0;
     812:	10 92 76 04 	sts	0x0476, r1
     816:	10 92 77 04 	sts	0x0477, r1
     81a:	10 92 78 04 	sts	0x0478, r1
     81e:	10 92 79 04 	sts	0x0479, r1
		while(1)
		{
			if(ShaftCountLeft > ReqdShaftCountInt)
     822:	80 91 76 04 	lds	r24, 0x0476
     826:	90 91 77 04 	lds	r25, 0x0477
     82a:	a0 91 78 04 	lds	r26, 0x0478
     82e:	b0 91 79 04 	lds	r27, 0x0479
     832:	48 17       	cp	r20, r24
     834:	59 07       	cpc	r21, r25
     836:	6a 07       	cpc	r22, r26
     838:	7b 07       	cpc	r23, r27
     83a:	98 f7       	brcc	.-26     	; 0x822 <linear_distance_mm+0x42>
			{  break;
			}
		}
		stop(); //Stop robot
     83c:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
	}
     840:	08 95       	ret

00000842 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
	{
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	ec 01       	movw	r28, r24
		forward();
     848:	0e 94 07 03 	call	0x60e	; 0x60e <forward>
		linear_distance_mm(DistanceInMM);
     84c:	ce 01       	movw	r24, r28
     84e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <linear_distance_mm>
	}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <back_mm>:

void back_mm(unsigned int DistanceInMM)
	{
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
		back();
     85e:	0e 94 0b 03 	call	0x616	; 0x616 <back>
		linear_distance_mm(DistanceInMM);
     862:	ce 01       	movw	r24, r28
     864:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <linear_distance_mm>
	}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <left_degrees>:

void left_degrees(unsigned int Degrees)
	{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	ec 01       	movw	r28, r24
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		left(); //Turn left
     874:	0e 94 0f 03 	call	0x61e	; 0x61e <left>
		angle_rotate(Degrees);
     878:	ce 01       	movw	r24, r28
     87a:	0e 94 a2 03 	call	0x744	; 0x744 <angle_rotate>
	}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <right_degrees>:



void right_degrees(unsigned int Degrees)
	{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
		// 88 pulses for 360 degrees rotation 4.090 degrees per count
		right(); //Turn right
     88a:	0e 94 13 03 	call	0x626	; 0x626 <right>
		angle_rotate(Degrees);
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 a2 03 	call	0x744	; 0x744 <angle_rotate>
	}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <lcd_port_config>:



void lcd_port_config (void)
	{
	 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     89a:	87 b1       	in	r24, 0x07	; 7
     89c:	87 6f       	ori	r24, 0xF7	; 247
     89e:	87 b9       	out	0x07, r24	; 7
	 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     8a0:	88 b1       	in	r24, 0x08	; 8
     8a2:	80 78       	andi	r24, 0x80	; 128
     8a4:	88 b9       	out	0x08, r24	; 8
	}
     8a6:	08 95       	ret

000008a8 <servo1_pin_config>:

// Servo pin Configuration
void servo1_pin_config (void)
{
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     8a8:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     8aa:	2d 9a       	sbi	0x05, 5	; 5
}
     8ac:	08 95       	ret

000008ae <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     8ae:	26 9a       	sbi	0x04, 6	; 4
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     8b0:	2e 9a       	sbi	0x05, 6	; 5
}
     8b2:	08 95       	ret

000008b4 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
	DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     8b4:	27 9a       	sbi	0x04, 7	; 4
	PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     8b6:	2f 9a       	sbi	0x05, 7	; 5
}
     8b8:	08 95       	ret

000008ba <timer1_init>:

void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     8ba:	e1 e8       	ldi	r30, 0x81	; 129
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     8c0:	8c ef       	ldi	r24, 0xFC	; 252
     8c2:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     8d8:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     8dc:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     8e0:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     8e4:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     8e8:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     8ec:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     8f0:	8b ea       	ldi	r24, 0xAB	; 171
     8f2:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     8f6:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     8fa:	8c e0       	ldi	r24, 0x0C	; 12
     8fc:	80 83       	st	Z, r24
}
     8fe:	08 95       	ret

00000900 <buzzer_pin_config>:

void buzzer_pin_config (void)
	{
	 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     900:	3b 9a       	sbi	0x07, 3	; 7
	 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     902:	43 98       	cbi	0x08, 3	; 8
	}
     904:	08 95       	ret

00000906 <buzzer_on>:

void buzzer_on (void)
	{
		unsigned char port_restore = 0;
		port_restore = PINC;
     906:	86 b1       	in	r24, 0x06	; 6
		port_restore = port_restore | 0x08;
     908:	88 60       	ori	r24, 0x08	; 8
		PORTC = port_restore;
     90a:	88 b9       	out	0x08, r24	; 8
	}	 
     90c:	08 95       	ret

0000090e <buzzer_off>:

void buzzer_off (void)
	{
		unsigned char port_restore = 0;
		port_restore = PINC;
     90e:	86 b1       	in	r24, 0x06	; 6
		port_restore = port_restore & 0xF7;
     910:	87 7f       	andi	r24, 0xF7	; 247
		PORTC = port_restore;
     912:	88 b9       	out	0x08, r24	; 8
	}
     914:	08 95       	ret

00000916 <ADC_init>:

void ADC_init (void)
	{
		 DDRF = 0x00;
     916:	10 ba       	out	0x10, r1	; 16
		 PORTF =  0x00;
     918:	11 ba       	out	0x11, r1	; 17
		 ADCSRA = 0x00;
     91a:	ea e7       	ldi	r30, 0x7A	; 122
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	10 82       	st	Z, r1
	     ADCSRB = 0x00;		//MUX5 = 0
     920:	10 92 7b 00 	sts	0x007B, r1
		 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	80 93 7c 00 	sts	0x007C, r24
	     ACSR = 0x80;
     92a:	80 e8       	ldi	r24, 0x80	; 128
     92c:	80 bf       	out	0x30, r24	; 48
		 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     92e:	86 e8       	ldi	r24, 0x86	; 134
     930:	80 83       	st	Z, r24
	}	
     932:	08 95       	ret

00000934 <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char Ch)
	{
		unsigned char a;
		if(Ch>7)
     934:	88 30       	cpi	r24, 0x08	; 8
     936:	18 f0       	brcs	.+6      	; 0x93e <ADC_Conversion+0xa>
		{
			ADCSRB = 0x08;
     938:	98 e0       	ldi	r25, 0x08	; 8
     93a:	90 93 7b 00 	sts	0x007B, r25
		}
		Ch = Ch & 0x07;
     93e:	87 70       	andi	r24, 0x07	; 7
		ADMUX= 0x20| Ch;
     940:	80 62       	ori	r24, 0x20	; 32
     942:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     946:	ea e7       	ldi	r30, 0x7A	; 122
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	80 64       	ori	r24, 0x40	; 64
     94e:	80 83       	st	Z, r24
		while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
     950:	80 81       	ld	r24, Z
     952:	84 ff       	sbrs	r24, 4
     954:	fd cf       	rjmp	.-6      	; 0x950 <ADC_Conversion+0x1c>
		a=ADCH;
     956:	80 91 79 00 	lds	r24, 0x0079
		ADCSRA = ADCSRA|0x10;       //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     95a:	ea e7       	ldi	r30, 0x7A	; 122
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	90 81       	ld	r25, Z
     960:	90 61       	ori	r25, 0x10	; 16
     962:	90 83       	st	Z, r25
		ADCSRB = 0x00;
     964:	10 92 7b 00 	sts	0x007B, r1
		return a;
	}
     968:	08 95       	ret

0000096a <line_scan>:
	
// Scan for black lines
// Put values in global variables S[3] 
//  if 1 sensor on white
void line_scan(void)
{   unsigned int s[3];
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29

 	s[1]=ADC_Conversion(3);  // Value of sensor 1 left
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
     974:	d8 2f       	mov	r29, r24
	s[2]=ADC_Conversion(2);
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
     97c:	c8 2f       	mov	r28, r24
	s[3]=ADC_Conversion(1); //right
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
	
	
					if (s[1]<20)
     984:	d4 31       	cpi	r29, 0x14	; 20
     986:	38 f4       	brcc	.+14     	; 0x996 <line_scan+0x2c>
							{ S[1]=1; } //variable is set to 1 ,if white
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	30 93 3f 05 	sts	0x053F, r19
     990:	20 93 3e 05 	sts	0x053E, r18
     994:	04 c0       	rjmp	.+8      	; 0x99e <line_scan+0x34>
					else
							{ S[1]=0;  }  //if black
     996:	10 92 3f 05 	sts	0x053F, r1
     99a:	10 92 3e 05 	sts	0x053E, r1
					
				 if (s[2]<20)
     99e:	c4 31       	cpi	r28, 0x14	; 20
     9a0:	38 f4       	brcc	.+14     	; 0x9b0 <line_scan+0x46>
				         { S[2]=1; } //variable is set to 1 ,if white
     9a2:	21 e0       	ldi	r18, 0x01	; 1
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	30 93 41 05 	sts	0x0541, r19
     9aa:	20 93 40 05 	sts	0x0540, r18
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <line_scan+0x4e>
				 else
				         { S[2]=0;  }  //if black
     9b0:	10 92 41 05 	sts	0x0541, r1
     9b4:	10 92 40 05 	sts	0x0540, r1
							   
							   
			    if (s[3]<20)
     9b8:	84 31       	cpi	r24, 0x14	; 20
     9ba:	38 f4       	brcc	.+14     	; 0x9ca <line_scan+0x60>
				         { S[3]=1; } //variable is set to 1 ,if white
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 43 05 	sts	0x0543, r25
     9c4:	80 93 42 05 	sts	0x0542, r24
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <line_scan+0x68>
			    else
			          	{ S[3]=0;  }  //if black
     9ca:	10 92 43 05 	sts	0x0543, r1
     9ce:	10 92 42 05 	sts	0x0542, r1
	
}	
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <Sharp>:



void Sharp (void)
	{
	DDRK = 0x00; //set PORTK direction as input
     9d8:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; //set PORTK pins floating
     9dc:	10 92 08 01 	sts	0x0108, r1
	}
     9e0:	08 95       	ret

000009e2 <buzzer_init>:

void buzzer_init (void)
	{
		DDRC = DDRC | 0x08;		    //Setting PORTC 3 as output
     9e2:	3b 9a       	sbi	0x07, 3	; 7
		PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer	
     9e4:	43 98       	cbi	0x08, 3	; 8
	}
     9e6:	08 95       	ret

000009e8 <print_sensor>:

void print_sensor(char row, char coloumn,unsigned char channel)
	{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	d8 2f       	mov	r29, r24
     9ee:	c6 2f       	mov	r28, r22
     9f0:	84 2f       	mov	r24, r20
		
		ADC_Value = ADC_Conversion(channel);
     9f2:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
     9f6:	48 2f       	mov	r20, r24
     9f8:	80 93 f0 05 	sts	0x05F0, r24
		lcd_print(row, coloumn, ADC_Value, 3);
     9fc:	8d 2f       	mov	r24, r29
     9fe:	6c 2f       	mov	r22, r28
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	23 e0       	ldi	r18, 0x03	; 3
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
	}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <Sharp_GP2D12_estimation>:


unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     a14:	68 2f       	mov	r22, r24
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatunsisf>
     a20:	2f ee       	ldi	r18, 0xEF	; 239
     a22:	39 ec       	ldi	r19, 0xC9	; 201
     a24:	43 e9       	ldi	r20, 0x93	; 147
     a26:	5f e3       	ldi	r21, 0x3F	; 63
     a28:	0e 94 91 13 	call	0x2722	; 0x2722 <pow>
     a2c:	b6 2f       	mov	r27, r22
     a2e:	a7 2f       	mov	r26, r23
     a30:	38 2f       	mov	r19, r24
     a32:	29 2f       	mov	r18, r25
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e8       	ldi	r24, 0x80	; 128
     a3a:	9f e3       	ldi	r25, 0x3F	; 63
     a3c:	42 2f       	mov	r20, r18
     a3e:	0b 2f       	mov	r16, r27
     a40:	1a 2f       	mov	r17, r26
     a42:	23 2f       	mov	r18, r19
     a44:	34 2f       	mov	r19, r20
     a46:	a9 01       	movw	r20, r18
     a48:	98 01       	movw	r18, r16
     a4a:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     a4e:	2a e9       	ldi	r18, 0x9A	; 154
     a50:	39 ef       	ldi	r19, 0xF9	; 249
     a52:	4e e2       	ldi	r20, 0x2E	; 46
     a54:	55 e4       	ldi	r21, 0x45	; 69
     a56:	0e 94 2e 13 	call	0x265c	; 0x265c <__mulsf3>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e2       	ldi	r20, 0x20	; 32
     a60:	51 e4       	ldi	r21, 0x41	; 65
     a62:	0e 94 2e 13 	call	0x265c	; 0x265c <__mulsf3>
     a66:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixsfsi>
     a6a:	88 27       	eor	r24, r24
     a6c:	77 fd       	sbrc	r23, 7
     a6e:	80 95       	com	r24
     a70:	98 2f       	mov	r25, r24
     a72:	0e 94 a2 12 	call	0x2544	; 0x2544 <__floatsisf>
	distanceInt = (int)distance;
     a76:	0e 94 6f 12 	call	0x24de	; 0x24de <__fixsfsi>

	if(distanceInt>800)
			{
				distanceInt=800;
			}
	return distanceInt;
     a7a:	86 2f       	mov	r24, r22
     a7c:	97 2f       	mov	r25, r23
     a7e:	23 e0       	ldi	r18, 0x03	; 3
     a80:	81 32       	cpi	r24, 0x21	; 33
     a82:	92 07       	cpc	r25, r18
     a84:	10 f0       	brcs	.+4      	; 0xa8a <Sharp_GP2D12_estimation+0x7a>
     a86:	80 e2       	ldi	r24, 0x20	; 32
     a88:	93 e0       	ldi	r25, 0x03	; 3
}
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <color_sensor_pin_config>:

//Color sensor and rgb LED
void color_sensor_pin_config(void)
{
	DDRD  = DDRD | 0xFE; //set PD0 as input for color sensor output
     a90:	8a b1       	in	r24, 0x0a	; 10
     a92:	8e 6f       	ori	r24, 0xFE	; 254
     a94:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0x01;//Enable internal pull-up for PORTD 0 pin
     a96:	58 9a       	sbi	0x0b, 0	; 11
}
     a98:	08 95       	ret

00000a9a <rgb_off>:

void rgb_off(void)
{
	PORTH= PORTH &~ 0x60;
     a9a:	e2 e0       	ldi	r30, 0x02	; 2
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	80 81       	ld	r24, Z
     aa0:	8f 79       	andi	r24, 0x9F	; 159
     aa2:	80 83       	st	Z, r24
	PORTG= PORTG &~ 0x02;
     aa4:	a1 98       	cbi	0x14, 1	; 20
	PORTL= PORTL &~ 0x80;
     aa6:	eb e0       	ldi	r30, 0x0B	; 11
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	80 81       	ld	r24, Z
     aac:	8f 77       	andi	r24, 0x7F	; 127
     aae:	80 83       	st	Z, r24
}
     ab0:	08 95       	ret

00000ab2 <rgb_config>:

void rgb_config (void)
{
	DDRH = DDRH | 0x60; //Setting PortH 5,6 as output
     ab2:	e1 e0       	ldi	r30, 0x01	; 1
     ab4:	f1 e0       	ldi	r31, 0x01	; 1
     ab6:	80 81       	ld	r24, Z
     ab8:	80 66       	ori	r24, 0x60	; 96
     aba:	80 83       	st	Z, r24
	DDRG = DDRG | 0x02;  // Setting PortG 1 as output
     abc:	99 9a       	sbi	0x13, 1	; 19
	DDRL = DDRL | 0x80;
     abe:	ea e0       	ldi	r30, 0x0A	; 10
     ac0:	f1 e0       	ldi	r31, 0x01	; 1
     ac2:	80 81       	ld	r24, Z
     ac4:	80 68       	ori	r24, 0x80	; 128
     ac6:	80 83       	st	Z, r24
	rgb_off();
     ac8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <rgb_off>
}
     acc:	08 95       	ret

00000ace <red_on>:

void red_on (void)  //rph6 gph5 bpg1
{
	rgb_off();
     ace:	0e 94 4d 05 	call	0xa9a	; 0xa9a <rgb_off>
	PORTH = PORTH | 0x20;
     ad2:	e2 e0       	ldi	r30, 0x02	; 2
     ad4:	f1 e0       	ldi	r31, 0x01	; 1
     ad6:	80 81       	ld	r24, Z
     ad8:	80 62       	ori	r24, 0x20	; 32
     ada:	80 83       	st	Z, r24
}
     adc:	08 95       	ret

00000ade <green_on>:

void green_on (void)
{
	rgb_off();
     ade:	0e 94 4d 05 	call	0xa9a	; 0xa9a <rgb_off>
	PORTH = PORTH | 0x40;
     ae2:	e2 e0       	ldi	r30, 0x02	; 2
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	80 81       	ld	r24, Z
     ae8:	80 64       	ori	r24, 0x40	; 64
     aea:	80 83       	st	Z, r24
}
     aec:	08 95       	ret

00000aee <blue_on>:

void blue_on (void)
{
	rgb_off();
     aee:	0e 94 4d 05 	call	0xa9a	; 0xa9a <rgb_off>
	PORTL = PORTL | 0x80;
     af2:	eb e0       	ldi	r30, 0x0B	; 11
     af4:	f1 e0       	ldi	r31, 0x01	; 1
     af6:	80 81       	ld	r24, Z
     af8:	80 68       	ori	r24, 0x80	; 128
     afa:	80 83       	st	Z, r24
}
     afc:	08 95       	ret

00000afe <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     afe:	e1 ec       	ldi	r30, 0xC1	; 193
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     b04:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
     b0e:	8f e5       	ldi	r24, 0x5F	; 95
     b10:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     b14:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     b18:	88 e9       	ldi	r24, 0x98	; 152
     b1a:	80 83       	st	Z, r24
}
     b1c:	08 95       	ret

00000b1e <rgb_test>:
{
	while(1)
	{
		
	
	red_on();
     b1e:	0e 94 67 05 	call	0xace	; 0xace <red_on>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	9f ef       	ldi	r25, 0xFF	; 255
     b26:	ac e2       	ldi	r26, 0x2C	; 44
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	90 40       	sbci	r25, 0x00	; 0
     b2c:	a0 40       	sbci	r26, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <rgb_test+0xa>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <rgb_test+0x14>
     b32:	00 00       	nop
	_delay_ms(1000);
	green_on();
     b34:	0e 94 6f 05 	call	0xade	; 0xade <green_on>
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	9f ef       	ldi	r25, 0xFF	; 255
     b3c:	ac e2       	ldi	r26, 0x2C	; 44
     b3e:	81 50       	subi	r24, 0x01	; 1
     b40:	90 40       	sbci	r25, 0x00	; 0
     b42:	a0 40       	sbci	r26, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <rgb_test+0x20>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <rgb_test+0x2a>
     b48:	00 00       	nop
	_delay_ms(1000);
	blue_on();
     b4a:	0e 94 77 05 	call	0xaee	; 0xaee <blue_on>
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	ac e2       	ldi	r26, 0x2C	; 44
     b54:	81 50       	subi	r24, 0x01	; 1
     b56:	90 40       	sbci	r25, 0x00	; 0
     b58:	a0 40       	sbci	r26, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <rgb_test+0x36>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <rgb_test+0x40>
     b5e:	00 00       	nop
     b60:	de cf       	rjmp	.-68     	; 0xb1e <rgb_test>

00000b62 <port_init>:
/************************************************************************/
/* Ports are initialized here, after it function are for specific purpose*/                                                         
/************************************************************************/
void port_init()
		{  
			motor_init(); //robot motion pins config
     b62:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <motor_init>
			buzzer_init();	
     b66:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <buzzer_init>
			left_encoder_pin_config(); //left encoder pin config
     b6a:	0e 94 1b 03 	call	0x636	; 0x636 <left_encoder_pin_config>
			right_encoder_pin_config(); //right encoder pin config
     b6e:	0e 94 1e 03 	call	0x63c	; 0x63c <right_encoder_pin_config>
			left_position_encoder_interrupt_init();
     b72:	0e 94 21 03 	call	0x642	; 0x642 <left_position_encoder_interrupt_init>
			right_position_encoder_interrupt_init();
     b76:	0e 94 2a 03 	call	0x654	; 0x654 <right_position_encoder_interrupt_init>
			
			ADC_init();
     b7a:	0e 94 8b 04 	call	0x916	; 0x916 <ADC_init>
			lcd_port_config();
     b7e:	0e 94 4d 04 	call	0x89a	; 0x89a <lcd_port_config>
			timer5_init();
     b82:	0e 94 e5 02 	call	0x5ca	; 0x5ca <timer5_init>
			
			rgb_config();
     b86:	0e 94 59 05 	call	0xab2	; 0xab2 <rgb_config>
			uart0_init(); //Initailize UART0 for serial communiaction
     b8a:	0e 94 7f 05 	call	0xafe	; 0xafe <uart0_init>
			
			servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     b8e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <servo1_pin_config>
			servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     b92:	0e 94 57 04 	call	0x8ae	; 0x8ae <servo2_pin_config>
			servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
     b96:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <servo3_pin_config>
			timer1_init(); //For servo PWM
     b9a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <timer1_init>
		}
     b9e:	08 95       	ret

00000ba0 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     ba0:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     ba4:	68 2f       	mov	r22, r24
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatunsisf>
     bb0:	2b e7       	ldi	r18, 0x7B	; 123
     bb2:	34 e1       	ldi	r19, 0x14	; 20
     bb4:	4e ee       	ldi	r20, 0xEE	; 238
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4c e0       	ldi	r20, 0x0C	; 12
     bc2:	52 e4       	ldi	r21, 0x42	; 66
     bc4:	0e 94 a3 11 	call	0x2346	; 0x2346 <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     bc8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__fixunssfsi>
     bcc:	60 93 88 00 	sts	0x0088, r22
}
     bd0:	08 95       	ret

00000bd2 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     bd2:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     bd6:	68 2f       	mov	r22, r24
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatunsisf>
     be2:	2b e7       	ldi	r18, 0x7B	; 123
     be4:	34 e1       	ldi	r19, 0x14	; 20
     be6:	4e ee       	ldi	r20, 0xEE	; 238
     be8:	5f e3       	ldi	r21, 0x3F	; 63
     bea:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	4c e0       	ldi	r20, 0x0C	; 12
     bf4:	52 e4       	ldi	r21, 0x42	; 66
     bf6:	0e 94 a3 11 	call	0x2346	; 0x2346 <__addsf3>
	OCR1BH = 0x00;
	OCR1BL = (unsigned char) PositionTiltServo;
     bfa:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__fixunssfsi>
     bfe:	60 93 8a 00 	sts	0x008A, r22
}
     c02:	08 95       	ret

00000c04 <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
     c04:	10 92 8d 00 	sts	0x008D, r1

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
     c08:	68 2f       	mov	r22, r24
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 a0 12 	call	0x2540	; 0x2540 <__floatunsisf>
     c14:	2b e7       	ldi	r18, 0x7B	; 123
     c16:	34 e1       	ldi	r19, 0x14	; 20
     c18:	4e ee       	ldi	r20, 0xEE	; 238
     c1a:	5f e3       	ldi	r21, 0x3F	; 63
     c1c:	0e 94 07 12 	call	0x240e	; 0x240e <__divsf3>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	4c e0       	ldi	r20, 0x0C	; 12
     c26:	52 e4       	ldi	r21, 0x42	; 66
     c28:	0e 94 a3 11 	call	0x2346	; 0x2346 <__addsf3>
	OCR1CH = 0x00;
	OCR1CL = (unsigned char) PositionServo;
     c2c:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__fixunssfsi>
     c30:	60 93 8c 00 	sts	0x008C, r22
}
     c34:	08 95       	ret

00000c36 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
	OCR1AH = 0x03;
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	80 93 88 00 	sts	0x0088, r24
}
     c42:	08 95       	ret

00000c44 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
	OCR1BH = 0x03;
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	80 93 8b 00 	sts	0x008B, r24
	OCR1BL = 0xFF; //Servo 2 off
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
     c4c:	80 93 8a 00 	sts	0x008A, r24
}
     c50:	08 95       	ret

00000c52 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
	OCR1CH = 0x03;
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	80 93 8d 00 	sts	0x008D, r24
	OCR1CL = 0xFF; //Servo 3 off
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	80 93 8c 00 	sts	0x008C, r24
}
     c5e:	08 95       	ret

00000c60 <block_buzzer>:

// 2sec buzzer for block detection
void block_buzzer (void)
{
	buzzer_on();                // Making buzzer sound for two seconds
     c60:	0e 94 83 04 	call	0x906	; 0x906 <buzzer_on>
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	9f ef       	ldi	r25, 0xFF	; 255
     c68:	ac e2       	ldi	r26, 0x2C	; 44
     c6a:	81 50       	subi	r24, 0x01	; 1
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	a0 40       	sbci	r26, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <block_buzzer+0xa>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <block_buzzer+0x14>
     c74:	00 00       	nop
	_delay_ms(1000);
	buzzer_off();
     c76:	0e 94 87 04 	call	0x90e	; 0x90e <buzzer_off>
}
     c7a:	08 95       	ret

00000c7c <end_buzzer>:

// 10 sec buzzer for ending 
void end_buzzer (void)
{
	buzzer_on();                // Making buzzer sound for two seconds
     c7c:	0e 94 83 04 	call	0x906	; 0x906 <buzzer_on>
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	9f ef       	ldi	r25, 0xFF	; 255
     c84:	a6 e7       	ldi	r26, 0x76	; 118
     c86:	b1 e0       	ldi	r27, 0x01	; 1
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	a0 40       	sbci	r26, 0x00	; 0
     c8e:	b0 40       	sbci	r27, 0x00	; 0
     c90:	d9 f7       	brne	.-10     	; 0xc88 <end_buzzer+0xc>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <end_buzzer+0x18>
     c94:	00 00       	nop
	_delay_ms(10000);
	buzzer_off() ;
     c96:	0e 94 87 04 	call	0x90e	; 0x90e <buzzer_off>
}
     c9a:	08 95       	ret

00000c9c <align_right_1>:


// Align with black line present in right <alternate>
void align_right_1(void)
		{   
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
			velocity (200, 200);
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	68 ec       	ldi	r22, 0xC8	; 200
     ca8:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
			 right();
     cac:	0e 94 13 03 	call	0x626	; 0x626 <right>
			 line_scan();
     cb0:	c5 eb       	ldi	r28, 0xB5	; 181
     cb2:	d4 e0       	ldi	r29, 0x04	; 4
     cb4:	fe 01       	movw	r30, r28
     cb6:	19 95       	eicall
			
				while (S[2]==1)
     cb8:	80 91 40 05 	lds	r24, 0x0540
     cbc:	90 91 41 05 	lds	r25, 0x0541
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	51 f4       	brne	.+20     	; 0xcda <align_right_1+0x3e>
     cc6:	00 e4       	ldi	r16, 0x40	; 64
     cc8:	15 e0       	ldi	r17, 0x05	; 5
         				{    
							 line_scan();
     cca:	fe 01       	movw	r30, r28
     ccc:	19 95       	eicall
		{   
			velocity (200, 200);
			 right();
			 line_scan();
			
				while (S[2]==1)
     cce:	f8 01       	movw	r30, r16
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	91 05       	cpc	r25, r1
     cd8:	c1 f3       	breq	.-16     	; 0xcca <align_right_1+0x2e>
         				{    
							 line_scan();
						}
	
			velocity (255, 255);
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	6f ef       	ldi	r22, 0xFF	; 255
     cde:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
			stop();
     ce2:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
		}
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	08 95       	ret

00000cf0 <align_left_1>:

//Align with black line present in left <alternate>
void align_left_1(void)
{		
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
		     velocity (200,200);
     cf8:	88 ec       	ldi	r24, 0xC8	; 200
     cfa:	68 ec       	ldi	r22, 0xC8	; 200
     cfc:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
		   left();
     d00:	0e 94 0f 03 	call	0x61e	; 0x61e <left>
		   line_scan();
     d04:	c5 eb       	ldi	r28, 0xB5	; 181
     d06:	d4 e0       	ldi	r29, 0x04	; 4
     d08:	fe 01       	movw	r30, r28
     d0a:	19 95       	eicall
		   
		  while (S[2]==1)
     d0c:	80 91 40 05 	lds	r24, 0x0540
     d10:	90 91 41 05 	lds	r25, 0x0541
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	51 f4       	brne	.+20     	; 0xd2e <align_left_1+0x3e>
     d1a:	00 e4       	ldi	r16, 0x40	; 64
     d1c:	15 e0       	ldi	r17, 0x05	; 5
					{
					  line_scan();
     d1e:	fe 01       	movw	r30, r28
     d20:	19 95       	eicall
{		
		     velocity (200,200);
		   left();
		   line_scan();
		   
		  while (S[2]==1)
     d22:	f8 01       	movw	r30, r16
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	91 05       	cpc	r25, r1
     d2c:	c1 f3       	breq	.-16     	; 0xd1e <align_left_1+0x2e>
					{
					  line_scan();
                     }
	
  velocity (255, 255);
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	6f ef       	ldi	r22, 0xFF	; 255
     d32:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
  stop();
     d36:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
 
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	08 95       	ret

00000d44 <right_90_1>:


// 90 degree right turn at intersection  <alternate>
void right_90_1(void)
{
	right_degrees(40);
     d44:	88 e2       	ldi	r24, 0x28	; 40
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 42 04 	call	0x884	; 0x884 <right_degrees>
	
	align_right_1();
     d4c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <align_right_1>
	
}
     d50:	08 95       	ret

00000d52 <left_90_1>:

//90 degree lest turn at intersection <alternate>
void  left_90_1 (void)
{   left_degrees(40);
     d52:	88 e2       	ldi	r24, 0x28	; 40
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 37 04 	call	0x86e	; 0x86e <left_degrees>
	align_left_1();	
     d5a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <align_left_1>
}
     d5e:	08 95       	ret

00000d60 <scan_block>:
  
  

// if block is in range it return 1 otherwise zero
int scan_block (void)
{  unsigned int yes=0;
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	c6 e0       	ldi	r28, 0x06	; 6
     d66:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<=5;i++)
	{	sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     d68:	8b e0       	ldi	r24, 0x0B	; 11
     d6a:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
     d6e:	80 93 11 06 	sts	0x0611, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calculated in a variable "value".
     d72:	0e 94 08 05 	call	0xa10	; 0xa10 <Sharp_GP2D12_estimation>
     d76:	ac 01       	movw	r20, r24
     d78:	90 93 1b 06 	sts	0x061B, r25
     d7c:	80 93 1a 06 	sts	0x061A, r24
	lcd_print(2,1,value,3);
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	23 e0       	ldi	r18, 0x03	; 3
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
     d8c:	21 97       	sbiw	r28, 0x01	; 1
  

// if block is in range it return 1 otherwise zero
int scan_block (void)
{  unsigned int yes=0;
	for(int i=0;i<=5;i++)
     d8e:	61 f7       	brne	.-40     	; 0xd68 <scan_block+0x8>
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calculated in a variable "value".
	lcd_print(2,1,value,3);
	
	}
		
	if(value<180 && value>50)   //Check for block in a plot by distance
     d90:	20 91 1a 06 	lds	r18, 0x061A
     d94:	30 91 1b 06 	lds	r19, 0x061B
     d98:	23 53       	subi	r18, 0x33	; 51
     d9a:	30 40       	sbci	r19, 0x00	; 0
	{
		yes=1;                     // if yes=1 , block exist
 	}
	
	return yes;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	21 38       	cpi	r18, 0x81	; 129
     da2:	31 05       	cpc	r19, r1
     da4:	10 f0       	brcs	.+4      	; 0xdaa <scan_block+0x4a>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <right_block_scan>:

void right_block_scan (void)
{
	right_degrees(90);
     db0:	8a e5       	ldi	r24, 0x5A	; 90
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 42 04 	call	0x884	; 0x884 <right_degrees>
	r=scan_block();
     db8:	0e 94 b0 06 	call	0xd60	; 0xd60 <scan_block>
     dbc:	90 93 6f 04 	sts	0x046F, r25
     dc0:	80 93 6e 04 	sts	0x046E, r24
	}
	else
	{
//		no_block();
	}
	left_90_1();
     dc4:	0e 94 a9 06 	call	0xd52	; 0xd52 <left_90_1>
	num_plots++;
     dc8:	80 91 5a 04 	lds	r24, 0x045A
     dcc:	90 91 5b 04 	lds	r25, 0x045B
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	90 93 5b 04 	sts	0x045B, r25
     dd6:	80 93 5a 04 	sts	0x045A, r24
	r=0;
     dda:	10 92 6f 04 	sts	0x046F, r1
     dde:	10 92 6e 04 	sts	0x046E, r1
}
     de2:	08 95       	ret

00000de4 <left_block_scan>:

// A scan for block present in left
void left_block_scan(void)
{
	left_degrees(90);
     de4:	8a e5       	ldi	r24, 0x5A	; 90
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 37 04 	call	0x86e	; 0x86e <left_degrees>
	l=scan_block();
     dec:	0e 94 b0 06 	call	0xd60	; 0xd60 <scan_block>
     df0:	90 93 71 04 	sts	0x0471, r25
     df4:	80 93 70 04 	sts	0x0470, r24
	}
	else
	{
//	no_block();
	}
	right_90_1();
     df8:	0e 94 a2 06 	call	0xd44	; 0xd44 <right_90_1>
	num_plots++;
     dfc:	80 91 5a 04 	lds	r24, 0x045A
     e00:	90 91 5b 04 	lds	r25, 0x045B
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	90 93 5b 04 	sts	0x045B, r25
     e0a:	80 93 5a 04 	sts	0x045A, r24
	l=0;
     e0e:	10 92 71 04 	sts	0x0471, r1
     e12:	10 92 70 04 	sts	0x0470, r1
}
     e16:	08 95       	ret

00000e18 <scan_black_block>:
//This function make sure that a plot is scanned only once


int scan_black_block (void)
{  int k;
	k=scan_block(); 
     e18:	0e 94 b0 06 	call	0xd60	; 0xd60 <scan_block>
    return k;
}
     e1c:	08 95       	ret

00000e1e <align_right>:
	
}	

// Align with black line present in right
void align_right(void)
{ 	velocity (150, 150);
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	86 e9       	ldi	r24, 0x96	; 150
     e24:	66 e9       	ldi	r22, 0x96	; 150
     e26:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
	right();
     e2a:	0e 94 13 03 	call	0x626	; 0x626 <right>
    line_scan();
     e2e:	0e 94 b5 04 	call	0x96a	; 0x96a <line_scan>
	
	while (S[2]==1)
     e32:	80 91 40 05 	lds	r24, 0x0540
     e36:	90 91 41 05 	lds	r25, 0x0541
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	91 05       	cpc	r25, r1
     e3e:	49 f4       	brne	.+18     	; 0xe52 <align_right+0x34>
     e40:	c0 e4       	ldi	r28, 0x40	; 64
     e42:	d5 e0       	ldi	r29, 0x05	; 5
	{
		line_scan();
     e44:	0e 94 b5 04 	call	0x96a	; 0x96a <line_scan>
void align_right(void)
{ 	velocity (150, 150);
	right();
    line_scan();
	
	while (S[2]==1)
     e48:	88 81       	ld	r24, Y
     e4a:	99 81       	ldd	r25, Y+1	; 0x01
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	91 05       	cpc	r25, r1
     e50:	c9 f3       	breq	.-14     	; 0xe44 <align_right+0x26>
	{
		line_scan();
	}
	
	velocity (255, 255);
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	6f ef       	ldi	r22, 0xFF	; 255
     e56:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
	stop();
     e5a:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <align_left>:

//Align with black line present in left
void align_left(void)
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
	velocity (150,150);
     e68:	86 e9       	ldi	r24, 0x96	; 150
     e6a:	66 e9       	ldi	r22, 0x96	; 150
     e6c:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
	left();
     e70:	0e 94 0f 03 	call	0x61e	; 0x61e <left>
	line_scan();
     e74:	0e 94 b5 04 	call	0x96a	; 0x96a <line_scan>
	
	while (S[2]==1)
     e78:	80 91 40 05 	lds	r24, 0x0540
     e7c:	90 91 41 05 	lds	r25, 0x0541
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	49 f4       	brne	.+18     	; 0xe98 <align_left+0x34>
     e86:	c0 e4       	ldi	r28, 0x40	; 64
     e88:	d5 e0       	ldi	r29, 0x05	; 5
	{
		line_scan();
     e8a:	0e 94 b5 04 	call	0x96a	; 0x96a <line_scan>
{
	velocity (150,150);
	left();
	line_scan();
	
	while (S[2]==1)
     e8e:	88 81       	ld	r24, Y
     e90:	99 81       	ldd	r25, Y+1	; 0x01
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	c9 f3       	breq	.-14     	; 0xe8a <align_left+0x26>
	{
		line_scan();
	}
	
	velocity (255, 255);
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	6f ef       	ldi	r22, 0xFF	; 255
     e9c:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
	stop();
     ea0:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
	
}
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <right_90>:
 

// 90 degree right at grid lines
 void right_90(void)
	 { 
		 right_degrees(40);
     eaa:	88 e2       	ldi	r24, 0x28	; 40
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 42 04 	call	0x884	; 0x884 <right_degrees>
		 align_right();
     eb2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <align_right>
		
	  
	     
	      right_turns++;
     eb6:	80 91 64 04 	lds	r24, 0x0464
     eba:	90 91 65 04 	lds	r25, 0x0465
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	90 93 65 04 	sts	0x0465, r25
     ec4:	80 93 64 04 	sts	0x0464, r24
	  
	  }
     ec8:	08 95       	ret

00000eca <left_90>:
 

//90 degree turn left on grid lines
void  left_90 (void)
{   left_degrees(40);
     eca:	88 e2       	ldi	r24, 0x28	; 40
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 37 04 	call	0x86e	; 0x86e <left_degrees>
//	_delay_ms(500);
	align_left();
     ed2:	0e 94 32 07 	call	0xe64	; 0xe64 <align_left>

  
   left_turns++;
     ed6:	80 91 f9 03 	lds	r24, 0x03F9
     eda:	90 91 fa 03 	lds	r25, 0x03FA
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	90 93 fa 03 	sts	0x03FA, r25
     ee4:	80 93 f9 03 	sts	0x03F9, r24
}
     ee8:	08 95       	ret

00000eea <increase_counter>:
// An alternate is provided for each condition


//  Increase x,y cordinates as per position of bot
void increase_counter (void)   
 { direction = right_turns-left_turns;
     eea:	80 91 64 04 	lds	r24, 0x0464
     eee:	90 91 65 04 	lds	r25, 0x0465
     ef2:	20 91 f9 03 	lds	r18, 0x03F9
     ef6:	30 91 fa 03 	lds	r19, 0x03FA
     efa:	82 1b       	sub	r24, r18
     efc:	93 0b       	sbc	r25, r19
     efe:	90 93 63 04 	sts	0x0463, r25
     f02:	80 93 62 04 	sts	0x0462, r24
	if ( (direction==0 ) || (direction==4) || (direction == -4))
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	39 f0       	breq	.+14     	; 0xf18 <increase_counter+0x2e>
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	91 05       	cpc	r25, r1
     f0e:	21 f0       	breq	.+8      	; 0xf18 <increase_counter+0x2e>
     f10:	2f ef       	ldi	r18, 0xFF	; 255
     f12:	8c 3f       	cpi	r24, 0xFC	; 252
     f14:	92 07       	cpc	r25, r18
     f16:	b1 f4       	brne	.+44     	; 0xf44 <increase_counter+0x5a>
		{
			y_counter++;
     f18:	20 91 fb 03 	lds	r18, 0x03FB
     f1c:	30 91 fc 03 	lds	r19, 0x03FC
     f20:	2f 5f       	subi	r18, 0xFF	; 255
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	30 93 fc 03 	sts	0x03FC, r19
     f28:	20 93 fb 03 	sts	0x03FB, r18
			right_turns=0;
     f2c:	10 92 65 04 	sts	0x0465, r1
     f30:	10 92 64 04 	sts	0x0464, r1
			left_turns=0;
     f34:	10 92 fa 03 	sts	0x03FA, r1
     f38:	10 92 f9 03 	sts	0x03F9, r1
			orientation=0;  // +y axis
     f3c:	10 92 02 04 	sts	0x0402, r1
     f40:	10 92 01 04 	sts	0x0401, r1
		}
	
	 if ( (direction==1) || (direction== -3) )
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	91 05       	cpc	r25, r1
     f48:	21 f0       	breq	.+8      	; 0xf52 <increase_counter+0x68>
     f4a:	2f ef       	ldi	r18, 0xFF	; 255
     f4c:	8d 3f       	cpi	r24, 0xFD	; 253
     f4e:	92 07       	cpc	r25, r18
     f50:	81 f4       	brne	.+32     	; 0xf72 <increase_counter+0x88>
		{
			x_counter++;
     f52:	20 91 fd 03 	lds	r18, 0x03FD
     f56:	30 91 fe 03 	lds	r19, 0x03FE
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	30 93 fe 03 	sts	0x03FE, r19
     f62:	20 93 fd 03 	sts	0x03FD, r18
			orientation=1;  // +x axis
     f66:	21 e0       	ldi	r18, 0x01	; 1
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	30 93 02 04 	sts	0x0402, r19
     f6e:	20 93 01 04 	sts	0x0401, r18
		}
   
    if (direction== -1 || direction == 3)
     f72:	2f ef       	ldi	r18, 0xFF	; 255
     f74:	8f 3f       	cpi	r24, 0xFF	; 255
     f76:	92 07       	cpc	r25, r18
     f78:	19 f0       	breq	.+6      	; 0xf80 <increase_counter+0x96>
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	81 f4       	brne	.+32     	; 0xfa0 <increase_counter+0xb6>
       {
		   x_counter--;
     f80:	20 91 fd 03 	lds	r18, 0x03FD
     f84:	30 91 fe 03 	lds	r19, 0x03FE
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	30 40       	sbci	r19, 0x00	; 0
     f8c:	30 93 fe 03 	sts	0x03FE, r19
     f90:	20 93 fd 03 	sts	0x03FD, r18
		   orientation=3; // -x axis
     f94:	23 e0       	ldi	r18, 0x03	; 3
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	30 93 02 04 	sts	0x0402, r19
     f9c:	20 93 01 04 	sts	0x0401, r18
	   }
 
    if ( (direction==-2) || (direction ==2) )
     fa0:	2f ef       	ldi	r18, 0xFF	; 255
     fa2:	8e 3f       	cpi	r24, 0xFE	; 254
     fa4:	92 07       	cpc	r25, r18
     fa6:	19 f0       	breq	.+6      	; 0xfae <increase_counter+0xc4>
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	91 05       	cpc	r25, r1
     fac:	79 f4       	brne	.+30     	; 0xfcc <increase_counter+0xe2>
       {
		 y_counter--;
     fae:	80 91 fb 03 	lds	r24, 0x03FB
     fb2:	90 91 fc 03 	lds	r25, 0x03FC
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	90 93 fc 03 	sts	0x03FC, r25
     fbc:	80 93 fb 03 	sts	0x03FB, r24
		 orientation=2;   //-y axis
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 02 04 	sts	0x0402, r25
     fc8:	80 93 01 04 	sts	0x0401, r24
     fcc:	08 95       	ret

00000fce <update_orientation>:
//    
 }

void update_orientation (void)
	{
		direction = right_turns-left_turns;
     fce:	80 91 64 04 	lds	r24, 0x0464
     fd2:	90 91 65 04 	lds	r25, 0x0465
     fd6:	20 91 f9 03 	lds	r18, 0x03F9
     fda:	30 91 fa 03 	lds	r19, 0x03FA
     fde:	82 1b       	sub	r24, r18
     fe0:	93 0b       	sbc	r25, r19
     fe2:	90 93 63 04 	sts	0x0463, r25
     fe6:	80 93 62 04 	sts	0x0462, r24
		if ( (direction==0 ) || (direction==4) || (direction == -4))
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	39 f0       	breq	.+14     	; 0xffc <update_orientation+0x2e>
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	91 05       	cpc	r25, r1
     ff2:	21 f0       	breq	.+8      	; 0xffc <update_orientation+0x2e>
     ff4:	2f ef       	ldi	r18, 0xFF	; 255
     ff6:	8c 3f       	cpi	r24, 0xFC	; 252
     ff8:	92 07       	cpc	r25, r18
     ffa:	61 f4       	brne	.+24     	; 0x1014 <update_orientation+0x46>
		{
			right_turns=0;
     ffc:	10 92 65 04 	sts	0x0465, r1
    1000:	10 92 64 04 	sts	0x0464, r1
			left_turns=0;
    1004:	10 92 fa 03 	sts	0x03FA, r1
    1008:	10 92 f9 03 	sts	0x03F9, r1
			orientation=0;  // +y axis
    100c:	10 92 02 04 	sts	0x0402, r1
    1010:	10 92 01 04 	sts	0x0401, r1
		}
		
		if ( (direction==1) || (direction== -3) )
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	91 05       	cpc	r25, r1
    1018:	21 f0       	breq	.+8      	; 0x1022 <update_orientation+0x54>
    101a:	2f ef       	ldi	r18, 0xFF	; 255
    101c:	8d 3f       	cpi	r24, 0xFD	; 253
    101e:	92 07       	cpc	r25, r18
    1020:	31 f4       	brne	.+12     	; 0x102e <update_orientation+0x60>
		{
			orientation=1;  // +x axis
    1022:	21 e0       	ldi	r18, 0x01	; 1
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	30 93 02 04 	sts	0x0402, r19
    102a:	20 93 01 04 	sts	0x0401, r18
		}
		
		if (direction== -1 || direction == 3)
    102e:	2f ef       	ldi	r18, 0xFF	; 255
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	92 07       	cpc	r25, r18
    1034:	19 f0       	breq	.+6      	; 0x103c <update_orientation+0x6e>
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	91 05       	cpc	r25, r1
    103a:	31 f4       	brne	.+12     	; 0x1048 <update_orientation+0x7a>
		{
			orientation=3; // -x axis
    103c:	23 e0       	ldi	r18, 0x03	; 3
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	30 93 02 04 	sts	0x0402, r19
    1044:	20 93 01 04 	sts	0x0401, r18
		}
		
		if ( (direction==-2) || (direction ==2) )
    1048:	2f ef       	ldi	r18, 0xFF	; 255
    104a:	8e 3f       	cpi	r24, 0xFE	; 254
    104c:	92 07       	cpc	r25, r18
    104e:	19 f0       	breq	.+6      	; 0x1056 <update_orientation+0x88>
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	91 05       	cpc	r25, r1
    1054:	31 f4       	brne	.+12     	; 0x1062 <update_orientation+0x94>
		{
			orientation=2;   //-y axis
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	90 93 02 04 	sts	0x0402, r25
    105e:	80 93 01 04 	sts	0x0401, r24
    1062:	08 95       	ret

00001064 <follow_line>:
		
	/// lcd_print(1,7, orientation,2);
	}
// Line following till node/Midpoint detected
void follow_line(void)   
	{       
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	c0 e0       	ldi	r28, 0x00	; 0
    106a:	d0 e0       	ldi	r29, 0x00	; 0
	    while(stayOnLine==1)
	
		{ 
		//	lcd_print(1,3,data,3);
		//	lcd_print(2,1,wait,1);
           should_i_wait();
    106c:	0e 94 be 09 	call	0x137c	; 0x137c <should_i_wait>
			Left_white_line   = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1070:	83 e0       	ldi	r24, 0x03	; 3
    1072:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
    1076:	80 93 6b 04 	sts	0x046B, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
    1080:	80 93 6a 04 	sts	0x046A, r24
			Right_white_line  = ADC_Conversion(1); //Getting data of Right WL Sensor
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0e 94 9a 04 	call	0x934	; 0x934 <ADC_Conversion>
    108a:	80 93 69 04 	sts	0x0469, r24

			flag=0;
    108e:	10 92 68 04 	sts	0x0468, r1
// 		print_sensor(1,1,3);	//Prints value of White Line Sensor1
// 		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
//       	print_sensor(1,9,1);	//Prints Value of White Line Sensor3
		
		
			if(Center_white_line>50) //0x10 -black
    1092:	80 91 6a 04 	lds	r24, 0x046A
    1096:	83 33       	cpi	r24, 0x33	; 51
    1098:	48 f0       	brcs	.+18     	; 0x10ac <follow_line+0x48>
			{
				flag=1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 93 68 04 	sts	0x0468, r24
				forward();
    10a0:	0e 94 07 03 	call	0x60e	; 0x60e <forward>
				velocity(250,250);
    10a4:	8a ef       	ldi	r24, 0xFA	; 250
    10a6:	6a ef       	ldi	r22, 0xFA	; 250
    10a8:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
			}

			if((Left_white_line<40) && (flag==0))
    10ac:	80 91 6b 04 	lds	r24, 0x046B
    10b0:	88 32       	cpi	r24, 0x28	; 40
    10b2:	68 f4       	brcc	.+26     	; 0x10ce <follow_line+0x6a>
    10b4:	80 91 68 04 	lds	r24, 0x0468
    10b8:	88 23       	and	r24, r24
    10ba:	49 f4       	brne	.+18     	; 0x10ce <follow_line+0x6a>
			{
				flag=1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 68 04 	sts	0x0468, r24
				forward();                            // value<0x14 means sensor on white
    10c2:	0e 94 07 03 	call	0x60e	; 0x60e <forward>
				velocity(260,175);
    10c6:	84 e0       	ldi	r24, 0x04	; 4
    10c8:	6f ea       	ldi	r22, 0xAF	; 175
    10ca:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
			}

			if((Right_white_line<40) && (flag==0))  
    10ce:	80 91 69 04 	lds	r24, 0x0469
    10d2:	88 32       	cpi	r24, 0x28	; 40
    10d4:	68 f4       	brcc	.+26     	; 0x10f0 <follow_line+0x8c>
    10d6:	80 91 68 04 	lds	r24, 0x0468
    10da:	88 23       	and	r24, r24
    10dc:	49 f4       	brne	.+18     	; 0x10f0 <follow_line+0x8c>
			{
				flag=1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 68 04 	sts	0x0468, r24
				forward();
    10e4:	0e 94 07 03 	call	0x60e	; 0x60e <forward>
				velocity(175,260);
    10e8:	8f ea       	ldi	r24, 0xAF	; 175
    10ea:	64 e0       	ldi	r22, 0x04	; 4
    10ec:	0e 94 00 03 	call	0x600	; 0x600 <velocity>
			}

			if((Center_white_line>40 && Left_white_line>40 )||(Center_white_line>40 && Right_white_line>40))
    10f0:	80 91 6a 04 	lds	r24, 0x046A
    10f4:	89 32       	cpi	r24, 0x29	; 41
    10f6:	48 f0       	brcs	.+18     	; 0x110a <follow_line+0xa6>
    10f8:	80 91 6b 04 	lds	r24, 0x046B
    10fc:	89 32       	cpi	r24, 0x29	; 41
    10fe:	20 f4       	brcc	.+8      	; 0x1108 <follow_line+0xa4>
    1100:	80 91 69 04 	lds	r24, 0x0469
    1104:	89 32       	cpi	r24, 0x29	; 41
    1106:	08 f0       	brcs	.+2      	; 0x110a <follow_line+0xa6>
			 {  
				 flag1++;
    1108:	21 96       	adiw	r28, 0x01	; 1
				// lcd_print(1,13,flag1,2);
				
			 } 
	
	
			if (flag1==1)
    110a:	c1 30       	cpi	r28, 0x01	; 1
    110c:	d1 05       	cpc	r29, r1
    110e:	09 f0       	breq	.+2      	; 0x1112 <follow_line+0xae>
    1110:	ad cf       	rjmp	.-166    	; 0x106c <follow_line+0x8>
						{
							stayOnLine=0;
							
							linear_distance_mm(65);
    1112:	81 e4       	ldi	r24, 0x41	; 65
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <linear_distance_mm>
							//stop();
							flag1=0;
						}
	
		}			
		increase_counter();
    111a:	0e 94 75 07 	call	0xeea	; 0xeea <increase_counter>
}
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	08 95       	ret

00001124 <clear_path>:

 void clear_path(void)   //for making all elements of matrix zero
  { int i,j;
 	for(i=1;i<=9;i++)
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
	
		}			
		increase_counter();
}

 void clear_path(void)   //for making all elements of matrix zero
    1128:	49 e0       	ldi	r20, 0x09	; 9
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	09 c0       	rjmp	.+18     	; 0x1140 <clear_path+0x1c>
  { int i,j;
 	for(i=1;i<=9;i++)
 	 {
 		 for (j=1;j<=9;j++)
 		 {
 			 temp_path_log[i][j]=0;
    112e:	11 92       	st	Z+, r1
    1130:	11 92       	st	Z+, r1
    1132:	01 97       	sbiw	r24, 0x01	; 1

 void clear_path(void)   //for making all elements of matrix zero
  { int i,j;
 	for(i=1;i<=9;i++)
 	 {
 		 for (j=1;j<=9;j++)
    1134:	e1 f7       	brne	.-8      	; 0x112e <clear_path+0xa>
		increase_counter();
}

 void clear_path(void)   //for making all elements of matrix zero
  { int i,j;
 	for(i=1;i<=9;i++)
    1136:	2f 5f       	subi	r18, 0xFF	; 255
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	2a 30       	cpi	r18, 0x0A	; 10
    113c:	31 05       	cpc	r19, r1
    113e:	a1 f0       	breq	.+40     	; 0x1168 <clear_path+0x44>
	
		}			
		increase_counter();
}

 void clear_path(void)   //for making all elements of matrix zero
    1140:	c9 01       	movw	r24, r18
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	82 0f       	add	r24, r18
    1148:	93 1f       	adc	r25, r19
    114a:	fc 01       	movw	r30, r24
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e8 1b       	sub	r30, r24
    115a:	f9 0b       	sbc	r31, r25
    115c:	e2 0f       	add	r30, r18
    115e:	f3 1f       	adc	r31, r19
    1160:	e9 5e       	subi	r30, 0xE9	; 233
    1162:	fd 4f       	sbci	r31, 0xFD	; 253
    1164:	ca 01       	movw	r24, r20
    1166:	e3 cf       	rjmp	.-58     	; 0x112e <clear_path+0xa>
    1168:	08 95       	ret

0000116a <next_node>:


 void next_node (int my_orientation)
 {
	 
	 if(my_orientation==0)
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	99 f4       	brne	.+38     	; 0x1194 <next_node+0x2a>
	 {
		 next_x=x_counter;
    116e:	20 91 fd 03 	lds	r18, 0x03FD
    1172:	30 91 fe 03 	lds	r19, 0x03FE
    1176:	30 93 5f 04 	sts	0x045F, r19
    117a:	20 93 5e 04 	sts	0x045E, r18
		 next_y=y_counter+2;
    117e:	20 91 fb 03 	lds	r18, 0x03FB
    1182:	30 91 fc 03 	lds	r19, 0x03FC
    1186:	2e 5f       	subi	r18, 0xFE	; 254
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	30 93 61 04 	sts	0x0461, r19
    118e:	20 93 60 04 	sts	0x0460, r18
    1192:	2a c0       	rjmp	.+84     	; 0x11e8 <next_node+0x7e>
	 }
	 
	 if(my_orientation==1)
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	91 f4       	brne	.+36     	; 0x11be <next_node+0x54>
	 {
		 next_x=x_counter+2;
    119a:	80 91 fd 03 	lds	r24, 0x03FD
    119e:	90 91 fe 03 	lds	r25, 0x03FE
    11a2:	02 96       	adiw	r24, 0x02	; 2
    11a4:	90 93 5f 04 	sts	0x045F, r25
    11a8:	80 93 5e 04 	sts	0x045E, r24
		 next_y=y_counter;
    11ac:	80 91 fb 03 	lds	r24, 0x03FB
    11b0:	90 91 fc 03 	lds	r25, 0x03FC
    11b4:	90 93 61 04 	sts	0x0461, r25
    11b8:	80 93 60 04 	sts	0x0460, r24
    11bc:	08 95       	ret
	 }
	 
	 if(my_orientation==2)
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	91 05       	cpc	r25, r1
    11c2:	91 f4       	brne	.+36     	; 0x11e8 <next_node+0x7e>
	 {
		 next_x=x_counter;
    11c4:	80 91 fd 03 	lds	r24, 0x03FD
    11c8:	90 91 fe 03 	lds	r25, 0x03FE
    11cc:	90 93 5f 04 	sts	0x045F, r25
    11d0:	80 93 5e 04 	sts	0x045E, r24
		 next_y=y_counter-2;
    11d4:	80 91 fb 03 	lds	r24, 0x03FB
    11d8:	90 91 fc 03 	lds	r25, 0x03FC
    11dc:	02 97       	sbiw	r24, 0x02	; 2
    11de:	90 93 61 04 	sts	0x0461, r25
    11e2:	80 93 60 04 	sts	0x0460, r24
    11e6:	08 95       	ret
	 }
	 
	 if(my_orientation==3)
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	91 05       	cpc	r25, r1
    11ec:	89 f4       	brne	.+34     	; 0x1210 <next_node+0xa6>
	 {
		 next_x=x_counter-2;
    11ee:	80 91 fd 03 	lds	r24, 0x03FD
    11f2:	90 91 fe 03 	lds	r25, 0x03FE
    11f6:	02 97       	sbiw	r24, 0x02	; 2
    11f8:	90 93 5f 04 	sts	0x045F, r25
    11fc:	80 93 5e 04 	sts	0x045E, r24
		 next_y=y_counter;
    1200:	80 91 fb 03 	lds	r24, 0x03FB
    1204:	90 91 fc 03 	lds	r25, 0x03FC
    1208:	90 93 61 04 	sts	0x0461, r25
    120c:	80 93 60 04 	sts	0x0460, r24
    1210:	08 95       	ret

00001212 <search_next_cordinate>:
 }

void search_next_cordinate (int x,int y,int my_orientation)
{
	
	if(my_orientation==0)
    1212:	41 15       	cp	r20, r1
    1214:	51 05       	cpc	r21, r1
    1216:	61 f4       	brne	.+24     	; 0x1230 <search_next_cordinate+0x1e>
	{
		s_next_x=x;
    1218:	90 93 0e 06 	sts	0x060E, r25
    121c:	80 93 0d 06 	sts	0x060D, r24
		s_next_y=y+1;
    1220:	9b 01       	movw	r18, r22
    1222:	2f 5f       	subi	r18, 0xFF	; 255
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	30 93 f2 05 	sts	0x05F2, r19
    122a:	20 93 f1 05 	sts	0x05F1, r18
    122e:	1b c0       	rjmp	.+54     	; 0x1266 <search_next_cordinate+0x54>
	}
	
	if(my_orientation==1)
    1230:	41 30       	cpi	r20, 0x01	; 1
    1232:	51 05       	cpc	r21, r1
    1234:	51 f4       	brne	.+20     	; 0x124a <search_next_cordinate+0x38>
	{
		s_next_x=x+1;
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	90 93 0e 06 	sts	0x060E, r25
    123c:	80 93 0d 06 	sts	0x060D, r24
		s_next_y=y;
    1240:	70 93 f2 05 	sts	0x05F2, r23
    1244:	60 93 f1 05 	sts	0x05F1, r22
    1248:	08 95       	ret
	}
	
	if(my_orientation==2)
    124a:	42 30       	cpi	r20, 0x02	; 2
    124c:	51 05       	cpc	r21, r1
    124e:	59 f4       	brne	.+22     	; 0x1266 <search_next_cordinate+0x54>
	{
		s_next_x=x;
    1250:	90 93 0e 06 	sts	0x060E, r25
    1254:	80 93 0d 06 	sts	0x060D, r24
		s_next_y=y-1;
    1258:	61 50       	subi	r22, 0x01	; 1
    125a:	70 40       	sbci	r23, 0x00	; 0
    125c:	70 93 f2 05 	sts	0x05F2, r23
    1260:	60 93 f1 05 	sts	0x05F1, r22
    1264:	08 95       	ret
	}
	
	if(my_orientation==3)
    1266:	43 30       	cpi	r20, 0x03	; 3
    1268:	51 05       	cpc	r21, r1
    126a:	49 f4       	brne	.+18     	; 0x127e <search_next_cordinate+0x6c>
	{
		s_next_x=x-1;
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	90 93 0e 06 	sts	0x060E, r25
    1272:	80 93 0d 06 	sts	0x060D, r24
		s_next_y=y;
    1276:	70 93 f2 05 	sts	0x05F2, r23
    127a:	60 93 f1 05 	sts	0x05F1, r22
    127e:	08 95       	ret

00001280 <nodeORmid>:
}


void nodeORmid (void)
{
	if( (x_counter%2) || (y_counter%2) )
    1280:	80 91 fd 03 	lds	r24, 0x03FD
    1284:	80 fd       	sbrc	r24, 0
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <nodeORmid+0x12>
    1288:	80 91 fb 03 	lds	r24, 0x03FB
    128c:	80 fd       	sbrc	r24, 0
    128e:	12 c0       	rjmp	.+36     	; 0x12b4 <nodeORmid+0x34>
    1290:	08 95       	ret
      {
		  Iam_at= 2;      // midpoint and orientation x axis
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	90 93 1b 04 	sts	0x041B, r25
    129a:	80 93 1a 04 	sts	0x041A, r24
	  }
    		
	 if ((x_counter%2) && (y_counter%2))
    129e:	80 91 fb 03 	lds	r24, 0x03FB
    12a2:	80 ff       	sbrs	r24, 0
    12a4:	0d c0       	rjmp	.+26     	; 0x12c0 <nodeORmid+0x40>
	 {
		 Iam_at= 1;        // at node
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	90 93 1b 04 	sts	0x041B, r25
    12ae:	80 93 1a 04 	sts	0x041A, r24
    12b2:	08 95       	ret

void nodeORmid (void)
{
	if( (x_counter%2) || (y_counter%2) )
      {
		  Iam_at= 2;      // midpoint and orientation x axis
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	90 93 1b 04 	sts	0x041B, r25
    12bc:	80 93 1a 04 	sts	0x041A, r24
    12c0:	08 95       	ret

000012c2 <orientation_overflow>:
	 
}

int orientation_overflow (int o)
{
	if (o==-1)
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	8f 3f       	cpi	r24, 0xFF	; 255
    12c6:	92 07       	cpc	r25, r18
    12c8:	11 f4       	brne	.+4      	; 0x12ce <orientation_overflow+0xc>
	{
		o=3;
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	90 e0       	ldi	r25, 0x00	; 0
	if (o==4)
	{
		o==0;
	}
	return o;
}
    12ce:	08 95       	ret

000012d0 <next_cordinate>:
 }
 

 void next_cordinate (int my_orientation)
{ 
	my_orientation=orientation_overflow(my_orientation);
    12d0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <orientation_overflow>
	if(my_orientation==0)
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	99 f4       	brne	.+38     	; 0x12fe <next_cordinate+0x2e>
	{
		next_x=x_counter;
    12d8:	20 91 fd 03 	lds	r18, 0x03FD
    12dc:	30 91 fe 03 	lds	r19, 0x03FE
    12e0:	30 93 5f 04 	sts	0x045F, r19
    12e4:	20 93 5e 04 	sts	0x045E, r18
		next_y=y_counter+1;
    12e8:	20 91 fb 03 	lds	r18, 0x03FB
    12ec:	30 91 fc 03 	lds	r19, 0x03FC
    12f0:	2f 5f       	subi	r18, 0xFF	; 255
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	30 93 61 04 	sts	0x0461, r19
    12f8:	20 93 60 04 	sts	0x0460, r18
    12fc:	2a c0       	rjmp	.+84     	; 0x1352 <next_cordinate+0x82>
	}
	
	if(my_orientation==1)
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	91 f4       	brne	.+36     	; 0x1328 <next_cordinate+0x58>
	{
	    next_x=x_counter+1;
    1304:	80 91 fd 03 	lds	r24, 0x03FD
    1308:	90 91 fe 03 	lds	r25, 0x03FE
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	90 93 5f 04 	sts	0x045F, r25
    1312:	80 93 5e 04 	sts	0x045E, r24
		next_y=y_counter;		
    1316:	80 91 fb 03 	lds	r24, 0x03FB
    131a:	90 91 fc 03 	lds	r25, 0x03FC
    131e:	90 93 61 04 	sts	0x0461, r25
    1322:	80 93 60 04 	sts	0x0460, r24
    1326:	08 95       	ret
	}
	
	if(my_orientation==2)
    1328:	82 30       	cpi	r24, 0x02	; 2
    132a:	91 05       	cpc	r25, r1
    132c:	91 f4       	brne	.+36     	; 0x1352 <next_cordinate+0x82>
	{
		next_x=x_counter;
    132e:	80 91 fd 03 	lds	r24, 0x03FD
    1332:	90 91 fe 03 	lds	r25, 0x03FE
    1336:	90 93 5f 04 	sts	0x045F, r25
    133a:	80 93 5e 04 	sts	0x045E, r24
		next_y=y_counter-1;
    133e:	80 91 fb 03 	lds	r24, 0x03FB
    1342:	90 91 fc 03 	lds	r25, 0x03FC
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	90 93 61 04 	sts	0x0461, r25
    134c:	80 93 60 04 	sts	0x0460, r24
    1350:	08 95       	ret
	}
	
	if(my_orientation==3)
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	89 f4       	brne	.+34     	; 0x137a <next_cordinate+0xaa>
	{
		next_x=x_counter-1;
    1358:	80 91 fd 03 	lds	r24, 0x03FD
    135c:	90 91 fe 03 	lds	r25, 0x03FE
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	90 93 5f 04 	sts	0x045F, r25
    1366:	80 93 5e 04 	sts	0x045E, r24
		next_y=y_counter;
    136a:	80 91 fb 03 	lds	r24, 0x03FB
    136e:	90 91 fc 03 	lds	r25, 0x03FC
    1372:	90 93 61 04 	sts	0x0461, r25
    1376:	80 93 60 04 	sts	0x0460, r24
    137a:	08 95       	ret

0000137c <should_i_wait>:
	UDR0=100+orientation;
	UDR0=10*y_counter+x_counter;
}

void should_i_wait (void)
{ stop_here=1;
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	90 93 02 06 	sts	0x0602, r25
    1388:	80 93 01 06 	sts	0x0601, r24
	int i;
		   next_cordinate(orientation);
    138c:	80 91 01 04 	lds	r24, 0x0401
    1390:	90 91 02 04 	lds	r25, 0x0402
    1394:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
		  if ((search_x==next_x) && (search_y==next_y))
    1398:	20 91 90 04 	lds	r18, 0x0490
    139c:	30 91 91 04 	lds	r19, 0x0491
    13a0:	80 91 5e 04 	lds	r24, 0x045E
    13a4:	90 91 5f 04 	lds	r25, 0x045F
    13a8:	28 17       	cp	r18, r24
    13aa:	39 07       	cpc	r19, r25
    13ac:	c9 f4       	brne	.+50     	; 0x13e0 <should_i_wait+0x64>
    13ae:	20 91 92 04 	lds	r18, 0x0492
    13b2:	30 91 93 04 	lds	r19, 0x0493
    13b6:	80 91 60 04 	lds	r24, 0x0460
    13ba:	90 91 61 04 	lds	r25, 0x0461
    13be:	28 17       	cp	r18, r24
    13c0:	39 07       	cpc	r19, r25
    13c2:	71 f4       	brne	.+28     	; 0x13e0 <should_i_wait+0x64>
		 { while (stop_here)
    13c4:	80 91 01 06 	lds	r24, 0x0601
    13c8:	90 91 02 06 	lds	r25, 0x0602
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	41 f0       	breq	.+16     	; 0x13e0 <should_i_wait+0x64>
			 stop();	 
    13d0:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
void should_i_wait (void)
{ stop_here=1;
	int i;
		   next_cordinate(orientation);
		  if ((search_x==next_x) && (search_y==next_y))
		 { while (stop_here)
    13d4:	80 91 01 06 	lds	r24, 0x0601
    13d8:	90 91 02 06 	lds	r25, 0x0602
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	c1 f7       	brne	.-16     	; 0x13d0 <should_i_wait+0x54>
			 stop();	 
          }
		  
		  next_cordinate(orientation+1);
    13e0:	80 91 01 04 	lds	r24, 0x0401
    13e4:	90 91 02 04 	lds	r25, 0x0402
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
		 if ((search_x==next_x) && (search_y==next_y))
    13ee:	20 91 90 04 	lds	r18, 0x0490
    13f2:	30 91 91 04 	lds	r19, 0x0491
    13f6:	80 91 5e 04 	lds	r24, 0x045E
    13fa:	90 91 5f 04 	lds	r25, 0x045F
    13fe:	28 17       	cp	r18, r24
    1400:	39 07       	cpc	r19, r25
    1402:	c9 f4       	brne	.+50     	; 0x1436 <should_i_wait+0xba>
    1404:	20 91 92 04 	lds	r18, 0x0492
    1408:	30 91 93 04 	lds	r19, 0x0493
    140c:	80 91 60 04 	lds	r24, 0x0460
    1410:	90 91 61 04 	lds	r25, 0x0461
    1414:	28 17       	cp	r18, r24
    1416:	39 07       	cpc	r19, r25
    1418:	71 f4       	brne	.+28     	; 0x1436 <should_i_wait+0xba>
		  { while (stop_here)
    141a:	80 91 01 06 	lds	r24, 0x0601
    141e:	90 91 02 06 	lds	r25, 0x0602
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	41 f0       	breq	.+16     	; 0x1436 <should_i_wait+0xba>
			  stop();
    1426:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
			 stop();	 
          }
		  
		  next_cordinate(orientation+1);
		 if ((search_x==next_x) && (search_y==next_y))
		  { while (stop_here)
    142a:	80 91 01 06 	lds	r24, 0x0601
    142e:	90 91 02 06 	lds	r25, 0x0602
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	c1 f7       	brne	.-16     	; 0x1426 <should_i_wait+0xaa>
			  stop();
		  }
		  
		  next_cordinate(orientation-1);
    1436:	80 91 01 04 	lds	r24, 0x0401
    143a:	90 91 02 04 	lds	r25, 0x0402
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
		  if ((search_x==next_x) && (search_y==next_y))
    1444:	20 91 90 04 	lds	r18, 0x0490
    1448:	30 91 91 04 	lds	r19, 0x0491
    144c:	80 91 5e 04 	lds	r24, 0x045E
    1450:	90 91 5f 04 	lds	r25, 0x045F
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	c9 f4       	brne	.+50     	; 0x148c <should_i_wait+0x110>
    145a:	20 91 92 04 	lds	r18, 0x0492
    145e:	30 91 93 04 	lds	r19, 0x0493
    1462:	80 91 60 04 	lds	r24, 0x0460
    1466:	90 91 61 04 	lds	r25, 0x0461
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	71 f4       	brne	.+28     	; 0x148c <should_i_wait+0x110>
		  { while (stop_here)
    1470:	80 91 01 06 	lds	r24, 0x0601
    1474:	90 91 02 06 	lds	r25, 0x0602
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	41 f0       	breq	.+16     	; 0x148c <should_i_wait+0x110>
			  stop();
    147c:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
			  stop();
		  }
		  
		  next_cordinate(orientation-1);
		  if ((search_x==next_x) && (search_y==next_y))
		  { while (stop_here)
    1480:	80 91 01 06 	lds	r24, 0x0601
    1484:	90 91 02 06 	lds	r25, 0x0602
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	c1 f7       	brne	.-16     	; 0x147c <should_i_wait+0x100>
			  stop();
		  }
		  
		  next_cordinate(orientation);
    148c:	80 91 01 04 	lds	r24, 0x0401
    1490:	90 91 02 04 	lds	r25, 0x0402
    1494:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
		  for (i=0;i<4;i++)
    1498:	c0 e0       	ldi	r28, 0x00	; 0
    149a:	d0 e0       	ldi	r29, 0x00	; 0
		  {
			 search_next_cordinate(next_x,next_y,i);
    149c:	60 91 60 04 	lds	r22, 0x0460
    14a0:	70 91 61 04 	lds	r23, 0x0461
    14a4:	80 91 5e 04 	lds	r24, 0x045E
    14a8:	90 91 5f 04 	lds	r25, 0x045F
    14ac:	ae 01       	movw	r20, r28
    14ae:	0e 94 09 09 	call	0x1212	; 0x1212 <search_next_cordinate>
			 if ((search_x==s_next_x) && (search_y==s_next_y))
    14b2:	20 91 90 04 	lds	r18, 0x0490
    14b6:	30 91 91 04 	lds	r19, 0x0491
    14ba:	80 91 0d 06 	lds	r24, 0x060D
    14be:	90 91 0e 06 	lds	r25, 0x060E
    14c2:	28 17       	cp	r18, r24
    14c4:	39 07       	cpc	r19, r25
    14c6:	c9 f4       	brne	.+50     	; 0x14fa <should_i_wait+0x17e>
    14c8:	20 91 92 04 	lds	r18, 0x0492
    14cc:	30 91 93 04 	lds	r19, 0x0493
    14d0:	80 91 f1 05 	lds	r24, 0x05F1
    14d4:	90 91 f2 05 	lds	r25, 0x05F2
    14d8:	28 17       	cp	r18, r24
    14da:	39 07       	cpc	r19, r25
    14dc:	71 f4       	brne	.+28     	; 0x14fa <should_i_wait+0x17e>
			 { while (stop_here)
    14de:	80 91 01 06 	lds	r24, 0x0601
    14e2:	90 91 02 06 	lds	r25, 0x0602
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	41 f0       	breq	.+16     	; 0x14fa <should_i_wait+0x17e>
				 stop();
    14ea:	0e 94 17 03 	call	0x62e	; 0x62e <stop>
		  next_cordinate(orientation);
		  for (i=0;i<4;i++)
		  {
			 search_next_cordinate(next_x,next_y,i);
			 if ((search_x==s_next_x) && (search_y==s_next_y))
			 { while (stop_here)
    14ee:	80 91 01 06 	lds	r24, 0x0601
    14f2:	90 91 02 06 	lds	r25, 0x0602
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	c1 f7       	brne	.-16     	; 0x14ea <should_i_wait+0x16e>
		  { while (stop_here)
			  stop();
		  }
		  
		  next_cordinate(orientation);
		  for (i=0;i<4;i++)
    14fa:	21 96       	adiw	r28, 0x01	; 1
    14fc:	c4 30       	cpi	r28, 0x04	; 4
    14fe:	d1 05       	cpc	r29, r1
    1500:	69 f6       	brne	.-102    	; 0x149c <should_i_wait+0x120>
			 if ((search_x==s_next_x) && (search_y==s_next_y))
			 { while (stop_here)
				 stop();
			 }
		  }		 
}
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <avoid_collision>:
  //rescue_y=data1%1000-rescue_x*10-demux;
  //orientation=data1-rescue_y*100+rescue_x*10-demux;
  
  
  
}
    1508:	08 95       	ret

0000150a <send_data>:

void send_data(void)
{
	UDR0=100+orientation;
    150a:	80 91 01 04 	lds	r24, 0x0401
    150e:	8c 59       	subi	r24, 0x9C	; 156
    1510:	e6 ec       	ldi	r30, 0xC6	; 198
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 83       	st	Z, r24
	UDR0=10*y_counter+x_counter;
    1516:	80 91 fb 03 	lds	r24, 0x03FB
    151a:	88 0f       	add	r24, r24
    151c:	98 2f       	mov	r25, r24
    151e:	99 0f       	add	r25, r25
    1520:	99 0f       	add	r25, r25
    1522:	89 0f       	add	r24, r25
    1524:	90 91 fd 03 	lds	r25, 0x03FD
    1528:	89 0f       	add	r24, r25
    152a:	80 83       	st	Z, r24
}
    152c:	08 95       	ret

0000152e <should_i_start>:
void should_i_start(void)
{
	unsigned int status;
	//status=data1-data1%10;
	
}
    152e:	08 95       	ret

00001530 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{   
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	0b b6       	in	r0, 0x3b	; 59
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
	data=UDR0;	
    1556:	80 91 c6 00 	lds	r24, 0x00C6
    155a:	80 93 03 06 	sts	0x0603, r24
    155e:	10 92 04 06 	sts	0x0604, r1

	demux_data();
    1562:	0e 94 d6 00 	call	0x1ac	; 0x1ac <demux_data>
}
    1566:	ff 91       	pop	r31
    1568:	ef 91       	pop	r30
    156a:	bf 91       	pop	r27
    156c:	af 91       	pop	r26
    156e:	9f 91       	pop	r25
    1570:	8f 91       	pop	r24
    1572:	7f 91       	pop	r23
    1574:	6f 91       	pop	r22
    1576:	5f 91       	pop	r21
    1578:	4f 91       	pop	r20
    157a:	3f 91       	pop	r19
    157c:	2f 91       	pop	r18
    157e:	0f 90       	pop	r0
    1580:	0b be       	out	0x3b, r0	; 59
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 90       	pop	r0
    1588:	1f 90       	pop	r1
    158a:	18 95       	reti

0000158c <block_log_entry>:



void block_log_entry (void)
{ 
	   next_cordinate(orientation);
    158c:	80 91 01 04 	lds	r24, 0x0401
    1590:	90 91 02 04 	lds	r25, 0x0402
    1594:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
	   block_log[next_x][next_y]=8;
    1598:	80 91 5e 04 	lds	r24, 0x045E
    159c:	90 91 5f 04 	lds	r25, 0x045F
    15a0:	fc 01       	movw	r30, r24
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	9c 01       	movw	r18, r24
    15a8:	22 0f       	add	r18, r18
    15aa:	33 1f       	adc	r19, r19
    15ac:	22 0f       	add	r18, r18
    15ae:	33 1f       	adc	r19, r19
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	e2 0f       	add	r30, r18
    15b6:	f3 1f       	adc	r31, r19
    15b8:	8e 0f       	add	r24, r30
    15ba:	9f 1f       	adc	r25, r31
    15bc:	20 91 60 04 	lds	r18, 0x0460
    15c0:	30 91 61 04 	lds	r19, 0x0461
    15c4:	82 0f       	add	r24, r18
    15c6:	93 1f       	adc	r25, r19
    15c8:	fc 01       	movw	r30, r24
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	e9 5f       	subi	r30, 0xF9	; 249
    15d0:	fc 4f       	sbci	r31, 0xFC	; 252
    15d2:	88 e0       	ldi	r24, 0x08	; 8
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
}
    15da:	08 95       	ret

000015dc <adjacent_point>:

void adjacent_point (void)
{
	adj_x[0]= dest_x[patient];
    15dc:	80 91 0a 04 	lds	r24, 0x040A
    15e0:	90 91 0b 04 	lds	r25, 0x040B
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	fc 01       	movw	r30, r24
    15ea:	ec 5b       	subi	r30, 0xBC	; 188
    15ec:	fb 4f       	sbci	r31, 0xFB	; 251
    15ee:	20 81       	ld	r18, Z
    15f0:	31 81       	ldd	r19, Z+1	; 0x01
    15f2:	30 93 fa 05 	sts	0x05FA, r19
    15f6:	20 93 f9 05 	sts	0x05F9, r18
	adj_y[0]= dest_y[patient]+1;
    15fa:	8e 5c       	subi	r24, 0xCE	; 206
    15fc:	9b 4f       	sbci	r25, 0xFB	; 251
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	91 81       	ldd	r25, Z+1	; 0x01
    1604:	ac 01       	movw	r20, r24
    1606:	4f 5f       	subi	r20, 0xFF	; 255
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	50 93 83 04 	sts	0x0483, r21
    160e:	40 93 82 04 	sts	0x0482, r20
	
	adj_x[1]= dest_x[patient]+1;
    1612:	a9 01       	movw	r20, r18
    1614:	4f 5f       	subi	r20, 0xFF	; 255
    1616:	5f 4f       	sbci	r21, 0xFF	; 255
    1618:	50 93 fc 05 	sts	0x05FC, r21
    161c:	40 93 fb 05 	sts	0x05FB, r20
	adj_y[1]=dest_y[patient];
    1620:	90 93 85 04 	sts	0x0485, r25
    1624:	80 93 84 04 	sts	0x0484, r24
	
	adj_x[2]= dest_x[patient];
    1628:	30 93 fe 05 	sts	0x05FE, r19
    162c:	20 93 fd 05 	sts	0x05FD, r18
	adj_y[2]= dest_y[patient]-1;
    1630:	ac 01       	movw	r20, r24
    1632:	41 50       	subi	r20, 0x01	; 1
    1634:	50 40       	sbci	r21, 0x00	; 0
    1636:	50 93 87 04 	sts	0x0487, r21
    163a:	40 93 86 04 	sts	0x0486, r20
	
	adj_x[3]= dest_x[patient]-1;
    163e:	21 50       	subi	r18, 0x01	; 1
    1640:	30 40       	sbci	r19, 0x00	; 0
    1642:	30 93 00 06 	sts	0x0600, r19
    1646:	20 93 ff 05 	sts	0x05FF, r18
	adj_y[3]= dest_y[patient];
    164a:	90 93 89 04 	sts	0x0489, r25
    164e:	80 93 88 04 	sts	0x0488, r24
	
}
    1652:	08 95       	ret

00001654 <turn_to_plot>:



 void turn_to_plot (void)
{ int plot_direction=0; // -1 for right & +1 for left
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
  
unsigned int stop_here;
  next_cordinate(orientation_overflow(orientation+1));
    1658:	80 91 01 04 	lds	r24, 0x0401
    165c:	90 91 02 04 	lds	r25, 0x0402
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 61 09 	call	0x12c2	; 0x12c2 <orientation_overflow>
    1666:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
  if ((next_x==dest_x[patient])&&(next_y==dest_y[patient]))
    166a:	80 91 0a 04 	lds	r24, 0x040A
    166e:	90 91 0b 04 	lds	r25, 0x040B
    1672:	fc 01       	movw	r30, r24
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	ec 5b       	subi	r30, 0xBC	; 188
    167a:	fb 4f       	sbci	r31, 0xFB	; 251
    167c:	40 81       	ld	r20, Z
    167e:	51 81       	ldd	r21, Z+1	; 0x01
    1680:	20 91 5e 04 	lds	r18, 0x045E
    1684:	30 91 5f 04 	lds	r19, 0x045F
    1688:	42 17       	cp	r20, r18
    168a:	53 07       	cpc	r21, r19
    168c:	89 f4       	brne	.+34     	; 0x16b0 <turn_to_plot+0x5c>
    168e:	fc 01       	movw	r30, r24
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 5c       	subi	r30, 0xCE	; 206
    1696:	fb 4f       	sbci	r31, 0xFB	; 251
    1698:	20 81       	ld	r18, Z
    169a:	31 81       	ldd	r19, Z+1	; 0x01
    169c:	80 91 60 04 	lds	r24, 0x0460
    16a0:	90 91 61 04 	lds	r25, 0x0461
    16a4:	28 17       	cp	r18, r24
    16a6:	39 07       	cpc	r19, r25
    16a8:	31 f0       	breq	.+12     	; 0x16b6 <turn_to_plot+0x62>
}



 void turn_to_plot (void)
{ int plot_direction=0; // -1 for right & +1 for left
    16aa:	c0 e0       	ldi	r28, 0x00	; 0
    16ac:	d0 e0       	ldi	r29, 0x00	; 0
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <turn_to_plot+0x66>
    16b0:	c0 e0       	ldi	r28, 0x00	; 0
    16b2:	d0 e0       	ldi	r29, 0x00	; 0
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <turn_to_plot+0x66>
  
unsigned int stop_here;
  next_cordinate(orientation_overflow(orientation+1));
  if ((next_x==dest_x[patient])&&(next_y==dest_y[patient]))
  {
	  plot_direction=-1;
    16b6:	cf ef       	ldi	r28, 0xFF	; 255
    16b8:	df ef       	ldi	r29, 0xFF	; 255
  }
  next_cordinate(orientation_overflow(orientation-1));
    16ba:	80 91 01 04 	lds	r24, 0x0401
    16be:	90 91 02 04 	lds	r25, 0x0402
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <orientation_overflow>
    16c8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
  if ((next_x==dest_x[patient])&&(next_y==dest_y[patient]))
    16cc:	40 91 0a 04 	lds	r20, 0x040A
    16d0:	50 91 0b 04 	lds	r21, 0x040B
    16d4:	fa 01       	movw	r30, r20
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	ec 5b       	subi	r30, 0xBC	; 188
    16dc:	fb 4f       	sbci	r31, 0xFB	; 251
    16de:	20 81       	ld	r18, Z
    16e0:	31 81       	ldd	r19, Z+1	; 0x01
    16e2:	80 91 5e 04 	lds	r24, 0x045E
    16e6:	90 91 5f 04 	lds	r25, 0x045F
    16ea:	28 17       	cp	r18, r24
    16ec:	39 07       	cpc	r19, r25
    16ee:	71 f4       	brne	.+28     	; 0x170c <turn_to_plot+0xb8>
    16f0:	fa 01       	movw	r30, r20
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ee 5c       	subi	r30, 0xCE	; 206
    16f8:	fb 4f       	sbci	r31, 0xFB	; 251
    16fa:	20 81       	ld	r18, Z
    16fc:	31 81       	ldd	r19, Z+1	; 0x01
    16fe:	80 91 60 04 	lds	r24, 0x0460
    1702:	90 91 61 04 	lds	r25, 0x0461
    1706:	28 17       	cp	r18, r24
    1708:	39 07       	cpc	r19, r25
    170a:	69 f0       	breq	.+26     	; 0x1726 <turn_to_plot+0xd2>
  {
	  plot_direction=1;
  }
  
 	 if (plot_direction==-1)
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	cf 3f       	cpi	r28, 0xFF	; 255
    1710:	d8 07       	cpc	r29, r24
    1712:	89 f4       	brne	.+34     	; 0x1736 <turn_to_plot+0xe2>
	 {
		 right_degrees(90);
    1714:	8a e5       	ldi	r24, 0x5A	; 90
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 42 04 	call	0x884	; 0x884 <right_degrees>
		 		block_buzzer();
    171c:	0e 94 30 06 	call	0xc60	; 0xc60 <block_buzzer>
		 left_90_1();
    1720:	0e 94 a9 06 	call	0xd52	; 0xd52 <left_90_1>
    1724:	08 c0       	rjmp	.+16     	; 0x1736 <turn_to_plot+0xe2>
	 }
	 if (plot_direction==1)
	 {
		 left_degrees(90);
    1726:	8a e5       	ldi	r24, 0x5A	; 90
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 37 04 	call	0x86e	; 0x86e <left_degrees>
		 		block_buzzer();
    172e:	0e 94 30 06 	call	0xc60	; 0xc60 <block_buzzer>
		 right_90_1();
    1732:	0e 94 a2 06 	call	0xd44	; 0xd44 <right_90_1>
	 }
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <transport_survivor>:

void transport_survivor (void)
{
	forward_mm(150);
    173c:	86 e9       	ldi	r24, 0x96	; 150
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 21 04 	call	0x842	; 0x842 <forward_mm>
	rgb_off();
    1744:	0e 94 4d 05 	call	0xa9a	; 0xa9a <rgb_off>
	block_buzzer();
    1748:	0e 94 30 06 	call	0xc60	; 0xc60 <block_buzzer>
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	a0 ee       	ldi	r26, 0xE0	; 224
    1752:	81 50       	subi	r24, 0x01	; 1
    1754:	90 40       	sbci	r25, 0x00	; 0
    1756:	a0 40       	sbci	r26, 0x00	; 0
    1758:	e1 f7       	brne	.-8      	; 0x1752 <transport_survivor+0x16>
    175a:	00 c0       	rjmp	.+0      	; 0x175c <transport_survivor+0x20>
    175c:	00 00       	nop
	_delay_ms(5000);	
	back_mm(120);
    175e:	88 e7       	ldi	r24, 0x78	; 120
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 2c 04 	call	0x858	; 0x858 <back_mm>
    
}
    1766:	08 95       	ret

00001768 <turn_to_camp>:
void turn_to_camp (void)
{
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
	int plot_direction=0; // -1 for right & +1 for left
	
	next_cordinate(orientation_overflow(orientation+1));
    176c:	80 91 01 04 	lds	r24, 0x0401
    1770:	90 91 02 04 	lds	r25, 0x0402
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	0e 94 61 09 	call	0x12c2	; 0x12c2 <orientation_overflow>
    177a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
	if ((next_x==10)&&(next_y==5))
    177e:	80 91 5e 04 	lds	r24, 0x045E
    1782:	90 91 5f 04 	lds	r25, 0x045F
    1786:	8a 30       	cpi	r24, 0x0A	; 10
    1788:	91 05       	cpc	r25, r1
    178a:	51 f4       	brne	.+20     	; 0x17a0 <turn_to_camp+0x38>
    178c:	80 91 60 04 	lds	r24, 0x0460
    1790:	90 91 61 04 	lds	r25, 0x0461
    1794:	85 30       	cpi	r24, 0x05	; 5
    1796:	91 05       	cpc	r25, r1
    1798:	31 f0       	breq	.+12     	; 0x17a6 <turn_to_camp+0x3e>
	back_mm(120);
    
}
void turn_to_camp (void)
{
	int plot_direction=0; // -1 for right & +1 for left
    179a:	c0 e0       	ldi	r28, 0x00	; 0
    179c:	d0 e0       	ldi	r29, 0x00	; 0
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <turn_to_camp+0x42>
    17a0:	c0 e0       	ldi	r28, 0x00	; 0
    17a2:	d0 e0       	ldi	r29, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <turn_to_camp+0x42>
	
	next_cordinate(orientation_overflow(orientation+1));
	if ((next_x==10)&&(next_y==5))
	{
		plot_direction=-1;
    17a6:	cf ef       	ldi	r28, 0xFF	; 255
    17a8:	df ef       	ldi	r29, 0xFF	; 255
	}
	next_cordinate(orientation_overflow(orientation-1));
    17aa:	80 91 01 04 	lds	r24, 0x0401
    17ae:	90 91 02 04 	lds	r25, 0x0402
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <orientation_overflow>
    17b8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
	if ((next_x==10)&&(next_y==5))
    17bc:	80 91 5e 04 	lds	r24, 0x045E
    17c0:	90 91 5f 04 	lds	r25, 0x045F
    17c4:	8a 30       	cpi	r24, 0x0A	; 10
    17c6:	91 05       	cpc	r25, r1
    17c8:	39 f4       	brne	.+14     	; 0x17d8 <turn_to_camp+0x70>
    17ca:	80 91 60 04 	lds	r24, 0x0460
    17ce:	90 91 61 04 	lds	r25, 0x0461
    17d2:	85 30       	cpi	r24, 0x05	; 5
    17d4:	91 05       	cpc	r25, r1
    17d6:	91 f0       	breq	.+36     	; 0x17fc <turn_to_camp+0x94>
	{
		plot_direction=1;
	}
	
	if (plot_direction==0)
    17d8:	20 97       	sbiw	r28, 0x00	; 0
    17da:	19 f4       	brne	.+6      	; 0x17e2 <turn_to_camp+0x7a>
	{
		transport_survivor();
    17dc:	0e 94 9e 0b 	call	0x173c	; 0x173c <transport_survivor>
    17e0:	1a c0       	rjmp	.+52     	; 0x1816 <turn_to_camp+0xae>
	}
	
	if (plot_direction==-1)
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	cf 3f       	cpi	r28, 0xFF	; 255
    17e6:	d8 07       	cpc	r29, r24
    17e8:	59 f4       	brne	.+22     	; 0x1800 <turn_to_camp+0x98>
	{
		right_degrees(90);
    17ea:	8a e5       	ldi	r24, 0x5A	; 90
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 42 04 	call	0x884	; 0x884 <right_degrees>
		transport_survivor();
    17f2:	0e 94 9e 0b 	call	0x173c	; 0x173c <transport_survivor>
		left_90_1();
    17f6:	0e 94 a9 06 	call	0xd52	; 0xd52 <left_90_1>
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <turn_to_camp+0xae>
		plot_direction=-1;
	}
	next_cordinate(orientation_overflow(orientation-1));
	if ((next_x==10)&&(next_y==5))
	{
		plot_direction=1;
    17fc:	c1 e0       	ldi	r28, 0x01	; 1
    17fe:	d0 e0       	ldi	r29, 0x00	; 0
	{
		right_degrees(90);
		transport_survivor();
		left_90_1();
	}
	if (plot_direction==1)
    1800:	c1 30       	cpi	r28, 0x01	; 1
    1802:	d1 05       	cpc	r29, r1
    1804:	41 f4       	brne	.+16     	; 0x1816 <turn_to_camp+0xae>
	{
		left_degrees(90);
    1806:	8a e5       	ldi	r24, 0x5A	; 90
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 37 04 	call	0x86e	; 0x86e <left_degrees>
		transport_survivor();
    180e:	0e 94 9e 0b 	call	0x173c	; 0x173c <transport_survivor>
		right_90_1();
    1812:	0e 94 a2 06 	call	0xd44	; 0xd44 <right_90_1>
	}
}
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	08 95       	ret

0000181c <get_me_this_orientatoin>:



void get_me_this_orientatoin (unsigned int wanted_orientation)
{ unsigned int clear=1, o1,o2, o1_log, o2_log;
    181c:	8f 92       	push	r8
    181e:	9f 92       	push	r9
    1820:	af 92       	push	r10
    1822:	bf 92       	push	r11
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	8c 01       	movw	r16, r24
	{		
		o1=orientation+1;
		o2=orientation-1;
		if (o1==4)
		{
			o1=0;
    1836:	aa 24       	eor	r10, r10
    1838:	bb 24       	eor	r11, r11
			
		}
		
		if ( o2==-1)
		{
			o2=3;
    183a:	0f 2e       	mov	r0, r31
    183c:	f3 e0       	ldi	r31, 0x03	; 3
    183e:	8f 2e       	mov	r8, r31
    1840:	99 24       	eor	r9, r9
    1842:	f0 2d       	mov	r31, r0
		}
		
		else
		{
			next_cordinate(o1);
			o1_log=block_log[next_x][next_y];
    1844:	0f 2e       	mov	r0, r31
    1846:	f7 e0       	ldi	r31, 0x07	; 7
    1848:	cf 2e       	mov	r12, r31
    184a:	f3 e0       	ldi	r31, 0x03	; 3
    184c:	df 2e       	mov	r13, r31
    184e:	f0 2d       	mov	r31, r0

void get_me_this_orientatoin (unsigned int wanted_orientation)
{ unsigned int clear=1, o1,o2, o1_log, o2_log;
	while(clear)
	{		
		o1=orientation+1;
    1850:	80 91 01 04 	lds	r24, 0x0401
    1854:	90 91 02 04 	lds	r25, 0x0402
    1858:	9c 01       	movw	r18, r24
    185a:	2f 5f       	subi	r18, 0xFF	; 255
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
		o2=orientation-1;
    185e:	ec 01       	movw	r28, r24
    1860:	21 97       	sbiw	r28, 0x01	; 1
		if (o1==4)
    1862:	24 30       	cpi	r18, 0x04	; 4
    1864:	31 05       	cpc	r19, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <get_me_this_orientatoin+0x4e>
		{
			o1=0;
    1868:	95 01       	movw	r18, r10
			
		}
		
		if ( o2==-1)
    186a:	4f ef       	ldi	r20, 0xFF	; 255
    186c:	cf 3f       	cpi	r28, 0xFF	; 255
    186e:	d4 07       	cpc	r29, r20
    1870:	09 f4       	brne	.+2      	; 0x1874 <get_me_this_orientatoin+0x58>
		{
			o2=3;
    1872:	e4 01       	movw	r28, r8
			
		}
		
		if (orientation==wanted_orientation)
    1874:	80 17       	cp	r24, r16
    1876:	91 07       	cpc	r25, r17
    1878:	09 f4       	brne	.+2      	; 0x187c <get_me_this_orientatoin+0x60>
    187a:	5b c0       	rjmp	.+182    	; 0x1932 <get_me_this_orientatoin+0x116>
		{
			clear=0;
		}
		
		else if (o1==wanted_orientation)
    187c:	20 17       	cp	r18, r16
    187e:	31 07       	cpc	r19, r17
    1880:	19 f4       	brne	.+6      	; 0x1888 <get_me_this_orientatoin+0x6c>
		{
			right_90();
    1882:	0e 94 55 07 	call	0xeaa	; 0xeaa <right_90>
    1886:	52 c0       	rjmp	.+164    	; 0x192c <get_me_this_orientatoin+0x110>
		}
		
		else if (o2==wanted_orientation)
    1888:	c0 17       	cp	r28, r16
    188a:	d1 07       	cpc	r29, r17
    188c:	19 f4       	brne	.+6      	; 0x1894 <get_me_this_orientatoin+0x78>
		{
			left_90();
    188e:	0e 94 65 07 	call	0xeca	; 0xeca <left_90>
    1892:	4c c0       	rjmp	.+152    	; 0x192c <get_me_this_orientatoin+0x110>
		}
		
		else
		{
			next_cordinate(o1);
    1894:	c9 01       	movw	r24, r18
    1896:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
			o1_log=block_log[next_x][next_y];
    189a:	40 91 5e 04 	lds	r20, 0x045E
    189e:	50 91 5f 04 	lds	r21, 0x045F
    18a2:	ca 01       	movw	r24, r20
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	9a 01       	movw	r18, r20
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	22 0f       	add	r18, r18
    18b0:	33 1f       	adc	r19, r19
    18b2:	22 0f       	add	r18, r18
    18b4:	33 1f       	adc	r19, r19
    18b6:	82 0f       	add	r24, r18
    18b8:	93 1f       	adc	r25, r19
    18ba:	84 0f       	add	r24, r20
    18bc:	95 1f       	adc	r25, r21
    18be:	20 91 60 04 	lds	r18, 0x0460
    18c2:	30 91 61 04 	lds	r19, 0x0461
    18c6:	82 0f       	add	r24, r18
    18c8:	93 1f       	adc	r25, r19
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	8c 0d       	add	r24, r12
    18d0:	9d 1d       	adc	r25, r13
    18d2:	fc 01       	movw	r30, r24
    18d4:	e0 80       	ld	r14, Z
    18d6:	f1 80       	ldd	r15, Z+1	; 0x01
			next_cordinate(o2);
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
			o2_log=block_log[next_x][next_y];
    18de:	40 91 5e 04 	lds	r20, 0x045E
    18e2:	50 91 5f 04 	lds	r21, 0x045F
    18e6:	ca 01       	movw	r24, r20
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	9a 01       	movw	r18, r20
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	84 0f       	add	r24, r20
    1900:	95 1f       	adc	r25, r21
    1902:	20 91 60 04 	lds	r18, 0x0460
    1906:	30 91 61 04 	lds	r19, 0x0461
    190a:	82 0f       	add	r24, r18
    190c:	93 1f       	adc	r25, r19
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	8c 0d       	add	r24, r12
    1914:	9d 1d       	adc	r25, r13
			if(o1_log>o2_log)
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	8e 15       	cp	r24, r14
    191e:	9f 05       	cpc	r25, r15
    1920:	18 f4       	brcc	.+6      	; 0x1928 <get_me_this_orientatoin+0x10c>
			{ left_90(); }
    1922:	0e 94 65 07 	call	0xeca	; 0xeca <left_90>
    1926:	02 c0       	rjmp	.+4      	; 0x192c <get_me_this_orientatoin+0x110>
			else
			{
			right_90();
    1928:	0e 94 55 07 	call	0xeaa	; 0xeaa <right_90>
			}
				 	
		}
		
		update_orientation();
    192c:	0e 94 e7 07 	call	0xfce	; 0xfce <update_orientation>
    1930:	8f cf       	rjmp	.-226    	; 0x1850 <get_me_this_orientatoin+0x34>
    1932:	0e 94 e7 07 	call	0xfce	; 0xfce <update_orientation>
	}
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	df 90       	pop	r13
    1944:	cf 90       	pop	r12
    1946:	bf 90       	pop	r11
    1948:	af 90       	pop	r10
    194a:	9f 90       	pop	r9
    194c:	8f 90       	pop	r8
    194e:	08 95       	ret

00001950 <distance_of_medical_camp>:

int distance_of_medical_camp (int x,int y)
{ int b;
	b=abs(9-x)+abs(5-y);
    1950:	29 e0       	ldi	r18, 0x09	; 9
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	28 1b       	sub	r18, r24
    1956:	39 0b       	sbc	r19, r25
    1958:	1a f4       	brpl	.+6      	; 0x1960 <distance_of_medical_camp+0x10>
    195a:	30 95       	com	r19
    195c:	21 95       	neg	r18
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	85 e0       	ldi	r24, 0x05	; 5
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	86 1b       	sub	r24, r22
    1966:	97 0b       	sbc	r25, r23
    1968:	1a f4       	brpl	.+6      	; 0x1970 <distance_of_medical_camp+0x20>
    196a:	90 95       	com	r25
    196c:	81 95       	neg	r24
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	82 0f       	add	r24, r18
    1972:	93 1f       	adc	r25, r19
	return b;
}
    1974:	08 95       	ret

00001976 <distance_of_plot>:

int distance_of_plot (int x, int y)
{ unsigned int b;
	b=abs(dest_x[patient]-x)+abs(dest_y[patient]-y);
    1976:	20 91 0a 04 	lds	r18, 0x040A
    197a:	30 91 0b 04 	lds	r19, 0x040B
    197e:	f9 01       	movw	r30, r18
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	ec 5b       	subi	r30, 0xBC	; 188
    1986:	fb 4f       	sbci	r31, 0xFB	; 251
    1988:	40 81       	ld	r20, Z
    198a:	51 81       	ldd	r21, Z+1	; 0x01
    198c:	fa 01       	movw	r30, r20
    198e:	e8 1b       	sub	r30, r24
    1990:	f9 0b       	sbc	r31, r25
    1992:	cf 01       	movw	r24, r30
    1994:	1a f4       	brpl	.+6      	; 0x199c <distance_of_plot+0x26>
    1996:	90 95       	com	r25
    1998:	81 95       	neg	r24
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	f9 01       	movw	r30, r18
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	ee 5c       	subi	r30, 0xCE	; 206
    19a4:	fb 4f       	sbci	r31, 0xFB	; 251
    19a6:	20 81       	ld	r18, Z
    19a8:	31 81       	ldd	r19, Z+1	; 0x01
    19aa:	26 1b       	sub	r18, r22
    19ac:	37 0b       	sbc	r19, r23
    19ae:	1a f4       	brpl	.+6      	; 0x19b6 <distance_of_plot+0x40>
    19b0:	30 95       	com	r19
    19b2:	21 95       	neg	r18
    19b4:	3f 4f       	sbci	r19, 0xFF	; 255
    19b6:	82 0f       	add	r24, r18
    19b8:	93 1f       	adc	r25, r19
	return b;
}
    19ba:	08 95       	ret

000019bc <find_a_way_to_plot>:

void find_a_way_to_plot (void)
{
    19bc:	2f 92       	push	r2
    19be:	3f 92       	push	r3
    19c0:	4f 92       	push	r4
    19c2:	5f 92       	push	r5
    19c4:	6f 92       	push	r6
    19c6:	7f 92       	push	r7
    19c8:	8f 92       	push	r8
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	28 97       	sbiw	r28, 0x08	; 8
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
	  }

	  for (i=0;i<4;i++)
	  {
		  
		  if (distance[i]<prev)
    19f0:	4e 01       	movw	r8, r28
    19f2:	08 94       	sec
    19f4:	81 1c       	adc	r8, r1
    19f6:	91 1c       	adc	r9, r1
	b=abs(dest_x[patient]-x)+abs(dest_y[patient]-y);
	return b;
}

void find_a_way_to_plot (void)
{
    19f8:	54 01       	movw	r10, r8
     unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
	  for (i=0;i<4;i++)
    19fa:	ee 24       	eor	r14, r14
    19fc:	ff 24       	eor	r15, r15
	  {
		  next_cordinate(i);

		  blockings=block_log[next_x][next_y]+temp_path_log[next_x][next_y];
    19fe:	0f 2e       	mov	r0, r31
    1a00:	f5 e1       	ldi	r31, 0x15	; 21
    1a02:	6f 2e       	mov	r6, r31
    1a04:	f2 e0       	ldi	r31, 0x02	; 2
    1a06:	7f 2e       	mov	r7, r31
    1a08:	f0 2d       	mov	r31, r0
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	f7 e0       	ldi	r31, 0x07	; 7
    1a0e:	4f 2e       	mov	r4, r31
    1a10:	f3 e0       	ldi	r31, 0x03	; 3
    1a12:	5f 2e       	mov	r5, r31
    1a14:	f0 2d       	mov	r31, r0
void find_a_way_to_plot (void)
{
     unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
	  for (i=0;i<4;i++)
	  {
		  next_cordinate(i);
    1a16:	8e 2d       	mov	r24, r14
    1a18:	9f 2d       	mov	r25, r15
    1a1a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>

		  blockings=block_log[next_x][next_y]+temp_path_log[next_x][next_y];
    1a1e:	40 91 5e 04 	lds	r20, 0x045E
    1a22:	50 91 5f 04 	lds	r21, 0x045F
    1a26:	60 91 60 04 	lds	r22, 0x0460
    1a2a:	70 91 61 04 	lds	r23, 0x0461
    1a2e:	ca 01       	movw	r24, r20
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	9a 01       	movw	r18, r20
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	22 0f       	add	r18, r18
    1a3c:	33 1f       	adc	r19, r19
    1a3e:	22 0f       	add	r18, r18
    1a40:	33 1f       	adc	r19, r19
    1a42:	82 0f       	add	r24, r18
    1a44:	93 1f       	adc	r25, r19
    1a46:	84 0f       	add	r24, r20
    1a48:	95 1f       	adc	r25, r21
    1a4a:	86 0f       	add	r24, r22
    1a4c:	97 1f       	adc	r25, r23
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	f3 01       	movw	r30, r6
    1a54:	e8 0f       	add	r30, r24
    1a56:	f9 1f       	adc	r31, r25
    1a58:	84 0d       	add	r24, r4
    1a5a:	95 1d       	adc	r25, r5
    1a5c:	00 81       	ld	r16, Z
    1a5e:	11 81       	ldd	r17, Z+1	; 0x01
    1a60:	fc 01       	movw	r30, r24
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	08 0f       	add	r16, r24
    1a68:	19 1f       	adc	r17, r25
		  //lcd_print(2,11+i,blocnkings,1);
		  if (blockings==0)
    1a6a:	01 15       	cp	r16, r1
    1a6c:	11 05       	cpc	r17, r1
    1a6e:	91 f4       	brne	.+36     	; 0x1a94 <find_a_way_to_plot+0xd8>
		  {
			  next_node(i);
    1a70:	8e 2d       	mov	r24, r14
    1a72:	9f 2d       	mov	r25, r15
    1a74:	0e 94 b5 08 	call	0x116a	; 0x116a <next_node>
			  distance[i]= distance_of_plot(next_x,next_y);
    1a78:	60 91 60 04 	lds	r22, 0x0460
    1a7c:	70 91 61 04 	lds	r23, 0x0461
    1a80:	80 91 5e 04 	lds	r24, 0x045E
    1a84:	90 91 5f 04 	lds	r25, 0x045F
    1a88:	0e 94 bb 0c 	call	0x1976	; 0x1976 <distance_of_plot>
    1a8c:	f5 01       	movw	r30, r10
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	18 c0       	rjmp	.+48     	; 0x1ac4 <find_a_way_to_plot+0x108>
		  }
		  else
		  {
			  next_node(i);
    1a94:	8e 2d       	mov	r24, r14
    1a96:	9f 2d       	mov	r25, r15
    1a98:	0e 94 b5 08 	call	0x116a	; 0x116a <next_node>
			  distance_of_plot(next_x,next_y);
			  distance[i]= distance_of_plot(next_x,next_y)+blockings*3;
    1a9c:	60 91 60 04 	lds	r22, 0x0460
    1aa0:	70 91 61 04 	lds	r23, 0x0461
    1aa4:	80 91 5e 04 	lds	r24, 0x045E
    1aa8:	90 91 5f 04 	lds	r25, 0x045F
    1aac:	0e 94 bb 0c 	call	0x1976	; 0x1976 <distance_of_plot>
    1ab0:	98 01       	movw	r18, r16
    1ab2:	22 0f       	add	r18, r18
    1ab4:	33 1f       	adc	r19, r19
    1ab6:	20 0f       	add	r18, r16
    1ab8:	31 1f       	adc	r19, r17
    1aba:	82 0f       	add	r24, r18
    1abc:	93 1f       	adc	r25, r19
    1abe:	f5 01       	movw	r30, r10
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
}

void find_a_way_to_plot (void)
{
     unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
	  for (i=0;i<4;i++)
    1ac4:	08 94       	sec
    1ac6:	e1 1c       	adc	r14, r1
    1ac8:	f1 1c       	adc	r15, r1
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a8 0e       	add	r10, r24
    1ad0:	b9 1e       	adc	r11, r25
    1ad2:	94 e0       	ldi	r25, 0x04	; 4
    1ad4:	e9 16       	cp	r14, r25
    1ad6:	f1 04       	cpc	r15, r1
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <find_a_way_to_plot+0x120>
    1ada:	9d cf       	rjmp	.-198    	; 0x1a16 <find_a_way_to_plot+0x5a>
    1adc:	44 e6       	ldi	r20, 0x64	; 100
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
	  }

	  for (i=0;i<4;i++)
	  {
		  
		  if (distance[i]<prev)
    1ae4:	f4 01       	movw	r30, r8
    1ae6:	21 91       	ld	r18, Z+
    1ae8:	31 91       	ld	r19, Z+
    1aea:	4f 01       	movw	r8, r30
    1aec:	24 17       	cp	r18, r20
    1aee:	35 07       	cpc	r19, r21
    1af0:	18 f4       	brcc	.+6      	; 0x1af8 <find_a_way_to_plot+0x13c>
		  {
			  prev=distance[i];
    1af2:	a9 01       	movw	r20, r18
	  }

	  for (i=0;i<4;i++)
	  {
		  
		  if (distance[i]<prev)
    1af4:	38 2e       	mov	r3, r24
    1af6:	29 2e       	mov	r2, r25
			  distance_of_plot(next_x,next_y);
			  distance[i]= distance_of_plot(next_x,next_y)+blockings*3;
		  }
	  }

	  for (i=0;i<4;i++)
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	91 05       	cpc	r25, r1
    1afe:	91 f7       	brne	.-28     	; 0x1ae4 <find_a_way_to_plot+0x128>
			  result=i;
		  }
	  }
	  
	  wanted_orientation=result;
	  get_me_this_orientatoin(wanted_orientation);
    1b00:	83 2d       	mov	r24, r3
    1b02:	92 2d       	mov	r25, r2
    1b04:	0e 94 0e 0c 	call	0x181c	; 0x181c <get_me_this_orientatoin>
	  
	  // 	 next_cordinate(result);
	  // 	 distance_of_plot(next_x,next_y);

}
    1b08:	28 96       	adiw	r28, 0x08	; 8
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	5f 90       	pop	r5
    1b32:	4f 90       	pop	r4
    1b34:	3f 90       	pop	r3
    1b36:	2f 90       	pop	r2
    1b38:	08 95       	ret

00001b3a <find_a_way_to_camp>:

void find_a_way_to_camp (void)
{ unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
    1b3a:	2f 92       	push	r2
    1b3c:	3f 92       	push	r3
    1b3e:	4f 92       	push	r4
    1b40:	5f 92       	push	r5
    1b42:	6f 92       	push	r6
    1b44:	7f 92       	push	r7
    1b46:	8f 92       	push	r8
    1b48:	9f 92       	push	r9
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	28 97       	sbiw	r28, 0x08	; 8
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
	}
      lcd_string("x");
  for (i=0;i<4;i++)
	{
		
		if (distance[i]<prev)
    1b6e:	4e 01       	movw	r8, r28
    1b70:	08 94       	sec
    1b72:	81 1c       	adc	r8, r1
    1b74:	91 1c       	adc	r9, r1
	  // 	 distance_of_plot(next_x,next_y);

}

void find_a_way_to_camp (void)
{ unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
    1b76:	54 01       	movw	r10, r8
	for (i=0;i<4;i++)
    1b78:	ee 24       	eor	r14, r14
    1b7a:	ff 24       	eor	r15, r15
	{
		next_cordinate(i);

		blockings=block_log[next_x][next_y]+temp_path_log[next_x][next_y];
    1b7c:	0f 2e       	mov	r0, r31
    1b7e:	f5 e1       	ldi	r31, 0x15	; 21
    1b80:	6f 2e       	mov	r6, r31
    1b82:	f2 e0       	ldi	r31, 0x02	; 2
    1b84:	7f 2e       	mov	r7, r31
    1b86:	f0 2d       	mov	r31, r0
    1b88:	0f 2e       	mov	r0, r31
    1b8a:	f7 e0       	ldi	r31, 0x07	; 7
    1b8c:	4f 2e       	mov	r4, r31
    1b8e:	f3 e0       	ldi	r31, 0x03	; 3
    1b90:	5f 2e       	mov	r5, r31
    1b92:	f0 2d       	mov	r31, r0

void find_a_way_to_camp (void)
{ unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
	for (i=0;i<4;i++)
	{
		next_cordinate(i);
    1b94:	8e 2d       	mov	r24, r14
    1b96:	9f 2d       	mov	r25, r15
    1b98:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>

		blockings=block_log[next_x][next_y]+temp_path_log[next_x][next_y];
    1b9c:	40 91 5e 04 	lds	r20, 0x045E
    1ba0:	50 91 5f 04 	lds	r21, 0x045F
    1ba4:	60 91 60 04 	lds	r22, 0x0460
    1ba8:	70 91 61 04 	lds	r23, 0x0461
    1bac:	ca 01       	movw	r24, r20
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	9a 01       	movw	r18, r20
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	22 0f       	add	r18, r18
    1bbe:	33 1f       	adc	r19, r19
    1bc0:	82 0f       	add	r24, r18
    1bc2:	93 1f       	adc	r25, r19
    1bc4:	84 0f       	add	r24, r20
    1bc6:	95 1f       	adc	r25, r21
    1bc8:	86 0f       	add	r24, r22
    1bca:	97 1f       	adc	r25, r23
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	f3 01       	movw	r30, r6
    1bd2:	e8 0f       	add	r30, r24
    1bd4:	f9 1f       	adc	r31, r25
    1bd6:	84 0d       	add	r24, r4
    1bd8:	95 1d       	adc	r25, r5
    1bda:	00 81       	ld	r16, Z
    1bdc:	11 81       	ldd	r17, Z+1	; 0x01
    1bde:	fc 01       	movw	r30, r24
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	08 0f       	add	r16, r24
    1be6:	19 1f       	adc	r17, r25
		//lcd_print(2,11+i,blocnkings,1);
		if (blockings==0)
    1be8:	01 15       	cp	r16, r1
    1bea:	11 05       	cpc	r17, r1
    1bec:	91 f4       	brne	.+36     	; 0x1c12 <find_a_way_to_camp+0xd8>
		{
			next_cordinate(i);
    1bee:	8e 2d       	mov	r24, r14
    1bf0:	9f 2d       	mov	r25, r15
    1bf2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
			distance[i]= distance_of_medical_camp(next_x,next_y);
    1bf6:	60 91 60 04 	lds	r22, 0x0460
    1bfa:	70 91 61 04 	lds	r23, 0x0461
    1bfe:	80 91 5e 04 	lds	r24, 0x045E
    1c02:	90 91 5f 04 	lds	r25, 0x045F
    1c06:	0e 94 a8 0c 	call	0x1950	; 0x1950 <distance_of_medical_camp>
    1c0a:	f5 01       	movw	r30, r10
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	18 c0       	rjmp	.+48     	; 0x1c42 <find_a_way_to_camp+0x108>
		}
		else
		{
			next_cordinate(i);
    1c12:	8e 2d       	mov	r24, r14
    1c14:	9f 2d       	mov	r25, r15
    1c16:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
			distance_of_medical_camp(next_x,next_y);
			distance[i]= distance_of_medical_camp(next_x,next_y)+blockings*4;
    1c1a:	60 91 60 04 	lds	r22, 0x0460
    1c1e:	70 91 61 04 	lds	r23, 0x0461
    1c22:	80 91 5e 04 	lds	r24, 0x045E
    1c26:	90 91 5f 04 	lds	r25, 0x045F
    1c2a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <distance_of_medical_camp>
    1c2e:	98 01       	movw	r18, r16
    1c30:	22 0f       	add	r18, r18
    1c32:	33 1f       	adc	r19, r19
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	82 0f       	add	r24, r18
    1c3a:	93 1f       	adc	r25, r19
    1c3c:	f5 01       	movw	r30, r10
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24

}

void find_a_way_to_camp (void)
{ unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
	for (i=0;i<4;i++)
    1c42:	08 94       	sec
    1c44:	e1 1c       	adc	r14, r1
    1c46:	f1 1c       	adc	r15, r1
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a8 0e       	add	r10, r24
    1c4e:	b9 1e       	adc	r11, r25
    1c50:	94 e0       	ldi	r25, 0x04	; 4
    1c52:	e9 16       	cp	r14, r25
    1c54:	f1 04       	cpc	r15, r1
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <find_a_way_to_camp+0x120>
    1c58:	9d cf       	rjmp	.-198    	; 0x1b94 <find_a_way_to_camp+0x5a>
			distance_of_medical_camp(next_x,next_y);
			distance[i]= distance_of_medical_camp(next_x,next_y)+blockings*4;
		}
	
	}
      lcd_string("x");
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	92 e0       	ldi	r25, 0x02	; 2
    1c5e:	0e 94 12 02 	call	0x424	; 0x424 <lcd_string>
	  // 	 distance_of_plot(next_x,next_y);

}

void find_a_way_to_camp (void)
{ unsigned int i=0,j=0,blockings,distance[4],result, prev=100, wanted_orientation;
    1c62:	44 e6       	ldi	r20, 0x64	; 100
    1c64:	50 e0       	ldi	r21, 0x00	; 0
			distance[i]= distance_of_medical_camp(next_x,next_y)+blockings*4;
		}
	
	}
      lcd_string("x");
  for (i=0;i<4;i++)
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
	{
		
		if (distance[i]<prev)
    1c6a:	f4 01       	movw	r30, r8
    1c6c:	21 91       	ld	r18, Z+
    1c6e:	31 91       	ld	r19, Z+
    1c70:	4f 01       	movw	r8, r30
    1c72:	24 17       	cp	r18, r20
    1c74:	35 07       	cpc	r19, r21
    1c76:	18 f4       	brcc	.+6      	; 0x1c7e <find_a_way_to_camp+0x144>
		{
			prev=distance[i];
    1c78:	a9 01       	movw	r20, r18
	}
      lcd_string("x");
  for (i=0;i<4;i++)
	{
		
		if (distance[i]<prev)
    1c7a:	38 2e       	mov	r3, r24
    1c7c:	29 2e       	mov	r2, r25
			distance[i]= distance_of_medical_camp(next_x,next_y)+blockings*4;
		}
	
	}
      lcd_string("x");
  for (i=0;i<4;i++)
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	84 30       	cpi	r24, 0x04	; 4
    1c82:	91 05       	cpc	r25, r1
    1c84:	91 f7       	brne	.-28     	; 0x1c6a <find_a_way_to_camp+0x130>
			result=i;
		}
	}
	
	wanted_orientation=result;
	get_me_this_orientatoin(wanted_orientation);
    1c86:	83 2d       	mov	r24, r3
    1c88:	92 2d       	mov	r25, r2
    1c8a:	0e 94 0e 0c 	call	0x181c	; 0x181c <get_me_this_orientatoin>
	
	// 	 next_cordinate(result);
	// 	 distance_of_plot(next_x,next_y);

}
    1c8e:	28 96       	adiw	r28, 0x08	; 8
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	bf 90       	pop	r11
    1cac:	af 90       	pop	r10
    1cae:	9f 90       	pop	r9
    1cb0:	8f 90       	pop	r8
    1cb2:	7f 90       	pop	r7
    1cb4:	6f 90       	pop	r6
    1cb6:	5f 90       	pop	r5
    1cb8:	4f 90       	pop	r4
    1cba:	3f 90       	pop	r3
    1cbc:	2f 90       	pop	r2
    1cbe:	08 95       	ret

00001cc0 <node_action>:




void node_action (void)
{ int clear=1;
    1cc0:	cf 92       	push	r12
    1cc2:	df 92       	push	r13
    1cc4:	ef 92       	push	r14
    1cc6:	ff 92       	push	r15
    1cc8:	0f 93       	push	r16
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
	while(clear)
	{   lcd_cursor(1,10);
		if (plotORcamp==0)
		{
			lcd_string("plot");
    1cd0:	c2 e0       	ldi	r28, 0x02	; 2
    1cd2:	d2 e0       	ldi	r29, 0x02	; 2
	
		}		
		
		if (plotORcamp==1)
		{
			lcd_string("camp");
    1cd4:	0f 2e       	mov	r0, r31
    1cd6:	f7 e0       	ldi	r31, 0x07	; 7
    1cd8:	cf 2e       	mov	r12, r31
    1cda:	f2 e0       	ldi	r31, 0x02	; 2
    1cdc:	df 2e       	mov	r13, r31
    1cde:	f0 2d       	mov	r31, r0
		black=scan_block();
		if(black==1)
		{
			
			next_cordinate(orientation);
			block_log[next_x][next_y]=7;
    1ce0:	07 e0       	ldi	r16, 0x07	; 7
    1ce2:	13 e0       	ldi	r17, 0x03	; 3
    1ce4:	0f 2e       	mov	r0, r31
    1ce6:	f7 e0       	ldi	r31, 0x07	; 7
    1ce8:	ef 2e       	mov	r14, r31
    1cea:	ff 24       	eor	r15, r15
    1cec:	f0 2d       	mov	r31, r0


void node_action (void)
{ int clear=1;
	while(clear)
	{   lcd_cursor(1,10);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	6a e0       	ldi	r22, 0x0A	; 10
    1cf2:	0e 94 21 02 	call	0x442	; 0x442 <lcd_cursor>
		if (plotORcamp==0)
    1cf6:	80 91 04 04 	lds	r24, 0x0404
    1cfa:	90 91 05 04 	lds	r25, 0x0405
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	29 f4       	brne	.+10     	; 0x1d0c <node_action+0x4c>
		{
			lcd_string("plot");
    1d02:	ce 01       	movw	r24, r28
    1d04:	0e 94 12 02 	call	0x424	; 0x424 <lcd_string>
		    find_a_way_to_plot();
    1d08:	0e 94 de 0c 	call	0x19bc	; 0x19bc <find_a_way_to_plot>
	
		}		
		
		if (plotORcamp==1)
    1d0c:	80 91 04 04 	lds	r24, 0x0404
    1d10:	90 91 05 04 	lds	r25, 0x0405
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	91 05       	cpc	r25, r1
    1d18:	29 f4       	brne	.+10     	; 0x1d24 <node_action+0x64>
		{
			lcd_string("camp");
    1d1a:	c6 01       	movw	r24, r12
    1d1c:	0e 94 12 02 	call	0x424	; 0x424 <lcd_string>
			find_a_way_to_camp();
    1d20:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <find_a_way_to_camp>
			
		}
		black=scan_block();
    1d24:	0e 94 b0 06 	call	0xd60	; 0xd60 <scan_block>
    1d28:	28 2f       	mov	r18, r24
    1d2a:	39 2f       	mov	r19, r25
    1d2c:	30 93 47 05 	sts	0x0547, r19
    1d30:	20 93 46 05 	sts	0x0546, r18
		if(black==1)
    1d34:	21 30       	cpi	r18, 0x01	; 1
    1d36:	31 05       	cpc	r19, r1
    1d38:	31 f5       	brne	.+76     	; 0x1d86 <node_action+0xc6>
		{
			
			next_cordinate(orientation);
    1d3a:	80 91 01 04 	lds	r24, 0x0401
    1d3e:	90 91 02 04 	lds	r25, 0x0402
    1d42:	0e 94 68 09 	call	0x12d0	; 0x12d0 <next_cordinate>
			block_log[next_x][next_y]=7;
    1d46:	40 91 5e 04 	lds	r20, 0x045E
    1d4a:	50 91 5f 04 	lds	r21, 0x045F
    1d4e:	ca 01       	movw	r24, r20
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	9a 01       	movw	r18, r20
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	22 0f       	add	r18, r18
    1d5c:	33 1f       	adc	r19, r19
    1d5e:	22 0f       	add	r18, r18
    1d60:	33 1f       	adc	r19, r19
    1d62:	82 0f       	add	r24, r18
    1d64:	93 1f       	adc	r25, r19
    1d66:	84 0f       	add	r24, r20
    1d68:	95 1f       	adc	r25, r21
    1d6a:	20 91 60 04 	lds	r18, 0x0460
    1d6e:	30 91 61 04 	lds	r19, 0x0461
    1d72:	82 0f       	add	r24, r18
    1d74:	93 1f       	adc	r25, r19
    1d76:	fc 01       	movw	r30, r24
    1d78:	ee 0f       	add	r30, r30
    1d7a:	ff 1f       	adc	r31, r31
    1d7c:	e0 0f       	add	r30, r16
    1d7e:	f1 1f       	adc	r31, r17
    1d80:	f1 82       	std	Z+1, r15	; 0x01
    1d82:	e0 82       	st	Z, r14
    1d84:	b4 cf       	rjmp	.-152    	; 0x1cee <node_action+0x2e>
		else
		{
			clear=0;
		}
	}
}
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	08 95       	ret

00001d98 <sort_array>:

void sort_array (void)
{
    1d98:	6f 92       	push	r6
    1d9a:	7f 92       	push	r7
    1d9c:	8f 92       	push	r8
    1d9e:	9f 92       	push	r9
    1da0:	af 92       	push	r10
    1da2:	bf 92       	push	r11
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
		unsigned int c_temp,x_temp,y_temp,iteration,prev,i;

	for(iteration=0;iteration<5;iteration++)
	{   prev=color[patient+1];
    1db4:	80 91 0a 04 	lds	r24, 0x040A
    1db8:	90 91 0b 04 	lds	r25, 0x040B
    1dbc:	9c 01       	movw	r18, r24
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
		i=patient+2;
    1dc2:	02 96       	adiw	r24, 0x02	; 2
    1dc4:	05 e0       	ldi	r16, 0x05	; 5
    1dc6:	10 e0       	ldi	r17, 0x00	; 0
void sort_array (void)
{
		unsigned int c_temp,x_temp,y_temp,iteration,prev,i;

	for(iteration=0;iteration<5;iteration++)
	{   prev=color[patient+1];
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	54 e0       	ldi	r21, 0x04	; 4
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	6a 01       	movw	r12, r20
    1dd2:	c2 0e       	add	r12, r18
    1dd4:	d3 1e       	adc	r13, r19
		i=patient+2;
		while (color[i])
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	7a 01       	movw	r14, r20
    1ddc:	e8 0e       	add	r14, r24
    1dde:	f9 1e       	adc	r15, r25
			clear=0;
		}
	}
}

void sort_array (void)
    1de0:	56 01       	movw	r10, r12
    1de2:	0f 2e       	mov	r0, r31
    1de4:	f4 e4       	ldi	r31, 0x44	; 68
    1de6:	8f 2e       	mov	r8, r31
    1de8:	f4 e0       	ldi	r31, 0x04	; 4
    1dea:	9f 2e       	mov	r9, r31
    1dec:	f0 2d       	mov	r31, r0
    1dee:	82 0e       	add	r8, r18
    1df0:	93 1e       	adc	r9, r19
    1df2:	0f 2e       	mov	r0, r31
    1df4:	f2 e3       	ldi	r31, 0x32	; 50
    1df6:	6f 2e       	mov	r6, r31
    1df8:	f4 e0       	ldi	r31, 0x04	; 4
    1dfa:	7f 2e       	mov	r7, r31
    1dfc:	f0 2d       	mov	r31, r0
    1dfe:	62 0e       	add	r6, r18
    1e00:	73 1e       	adc	r7, r19
{
		unsigned int c_temp,x_temp,y_temp,iteration,prev,i;

	for(iteration=0;iteration<5;iteration++)
	{   prev=color[patient+1];
    1e02:	f6 01       	movw	r30, r12
    1e04:	20 81       	ld	r18, Z
    1e06:	31 81       	ldd	r19, Z+1	; 0x01
		i=patient+2;
		while (color[i])
    1e08:	f7 01       	movw	r30, r14
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	59 f1       	breq	.+86     	; 0x1e68 <sort_array+0xd0>
			clear=0;
		}
	}
}

void sort_array (void)
    1e12:	f5 01       	movw	r30, r10
    1e14:	d4 01       	movw	r26, r8
    1e16:	e3 01       	movw	r28, r6
	for(iteration=0;iteration<5;iteration++)
	{   prev=color[patient+1];
		i=patient+2;
		while (color[i])
			{
			if (color[i]<prev)
    1e18:	82 17       	cp	r24, r18
    1e1a:	93 07       	cpc	r25, r19
    1e1c:	e0 f4       	brcc	.+56     	; 0x1e56 <sort_array+0xbe>
			   {    c_temp=color[i];
					x_temp=dest_x[i];
    1e1e:	12 96       	adiw	r26, 0x02	; 2
    1e20:	4d 91       	ld	r20, X+
    1e22:	5c 91       	ld	r21, X
    1e24:	13 97       	sbiw	r26, 0x03	; 3
					y_temp=dest_y[i];
    1e26:	6a 81       	ldd	r22, Y+2	; 0x02
    1e28:	7b 81       	ldd	r23, Y+3	; 0x03
					color[i]=color[i-1];
    1e2a:	20 81       	ld	r18, Z
    1e2c:	31 81       	ldd	r19, Z+1	; 0x01
    1e2e:	33 83       	std	Z+3, r19	; 0x03
    1e30:	22 83       	std	Z+2, r18	; 0x02
					dest_x[i]=dest_x[i-1];
    1e32:	2d 91       	ld	r18, X+
    1e34:	3c 91       	ld	r19, X
    1e36:	11 97       	sbiw	r26, 0x01	; 1
    1e38:	13 96       	adiw	r26, 0x03	; 3
    1e3a:	3c 93       	st	X, r19
    1e3c:	2e 93       	st	-X, r18
    1e3e:	12 97       	sbiw	r26, 0x02	; 2
					dest_y[i]=dest_y[i-1];
    1e40:	28 81       	ld	r18, Y
    1e42:	39 81       	ldd	r19, Y+1	; 0x01
    1e44:	3b 83       	std	Y+3, r19	; 0x03
    1e46:	2a 83       	std	Y+2, r18	; 0x02
					color[i-1]=c_temp;
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
					dest_x[i-1]=x_temp;
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	5c 93       	st	X, r21
    1e50:	4e 93       	st	-X, r20
					dest_y[i-1]=y_temp;
    1e52:	79 83       	std	Y+1, r23	; 0x01
    1e54:	68 83       	st	Y, r22
	           }     
		prev=color[i];
    1e56:	22 81       	ldd	r18, Z+2	; 0x02
    1e58:	33 81       	ldd	r19, Z+3	; 0x03
		unsigned int c_temp,x_temp,y_temp,iteration,prev,i;

	for(iteration=0;iteration<5;iteration++)
	{   prev=color[patient+1];
		i=patient+2;
		while (color[i])
    1e5a:	84 81       	ldd	r24, Z+4	; 0x04
    1e5c:	95 81       	ldd	r25, Z+5	; 0x05
    1e5e:	32 96       	adiw	r30, 0x02	; 2
    1e60:	12 96       	adiw	r26, 0x02	; 2
    1e62:	22 96       	adiw	r28, 0x02	; 2
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	c1 f6       	brne	.-80     	; 0x1e18 <sort_array+0x80>
    1e68:	01 50       	subi	r16, 0x01	; 1
    1e6a:	10 40       	sbci	r17, 0x00	; 0

void sort_array (void)
{
		unsigned int c_temp,x_temp,y_temp,iteration,prev,i;

	for(iteration=0;iteration<5;iteration++)
    1e6c:	51 f6       	brne	.-108    	; 0x1e02 <sort_array+0x6a>
		prev=color[i];
		i=i+1;
	    }		
	}		

}
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	cf 90       	pop	r12
    1e7e:	bf 90       	pop	r11
    1e80:	af 90       	pop	r10
    1e82:	9f 90       	pop	r9
    1e84:	8f 90       	pop	r8
    1e86:	7f 90       	pop	r7
    1e88:	6f 90       	pop	r6
    1e8a:	08 95       	ret

00001e8c <go_to_medical_camp>:

void go_to_medical_camp (void)
{ int flag=1,i;
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
	plotORcamp=1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	90 93 05 04 	sts	0x0405, r25
    1e9c:	80 93 04 04 	sts	0x0404, r24
	clear_path();
    1ea0:	0e 94 92 08 	call	0x1124	; 0x1124 <clear_path>
	follow_line();
    1ea4:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
	}		

}

void go_to_medical_camp (void)
{ int flag=1,i;
    1ea8:	01 e0       	ldi	r16, 0x01	; 1
    1eaa:	10 e0       	ldi	r17, 0x00	; 0
		 }		   
		   	 
		 if (Iam_at==2)
		 {
			 send_data();
			 temp_path_log[x_counter][y_counter]++;
    1eac:	c5 e1       	ldi	r28, 0x15	; 21
    1eae:	d2 e0       	ldi	r29, 0x02	; 2
	clear_path();
	follow_line();
	while (flag)       //1
     {
		 
		 nodeORmid();
    1eb0:	0e 94 40 09 	call	0x1280	; 0x1280 <nodeORmid>
		 if(Iam_at==1)
    1eb4:	80 91 1a 04 	lds	r24, 0x041A
    1eb8:	90 91 1b 04 	lds	r25, 0x041B
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	21 f4       	brne	.+8      	; 0x1eca <go_to_medical_camp+0x3e>
		 {
		   node_action();
    1ec2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <node_action>
		   follow_line();
    1ec6:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
		 }		   
		   	 
		 if (Iam_at==2)
    1eca:	80 91 1a 04 	lds	r24, 0x041A
    1ece:	90 91 1b 04 	lds	r25, 0x041B
    1ed2:	82 30       	cpi	r24, 0x02	; 2
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	61 f7       	brne	.-40     	; 0x1eb0 <go_to_medical_camp+0x24>
		 {
			 send_data();
    1ed8:	0e 94 85 0a 	call	0x150a	; 0x150a <send_data>
			 temp_path_log[x_counter][y_counter]++;
    1edc:	40 91 fd 03 	lds	r20, 0x03FD
    1ee0:	50 91 fe 03 	lds	r21, 0x03FE
    1ee4:	60 91 fb 03 	lds	r22, 0x03FB
    1ee8:	70 91 fc 03 	lds	r23, 0x03FC
    1eec:	ca 01       	movw	r24, r20
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	9a 01       	movw	r18, r20
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	22 0f       	add	r18, r18
    1efa:	33 1f       	adc	r19, r19
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	84 0f       	add	r24, r20
    1f06:	95 1f       	adc	r25, r21
    1f08:	86 0f       	add	r24, r22
    1f0a:	97 1f       	adc	r25, r23
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	ec 0f       	add	r30, r28
    1f14:	fd 1f       	adc	r31, r29
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	80 83       	st	Z, r24
			 follow_line();
    1f20:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
			 if ((x_counter==9) && (y_counter==5))
    1f24:	80 91 fd 03 	lds	r24, 0x03FD
    1f28:	90 91 fe 03 	lds	r25, 0x03FE
    1f2c:	89 30       	cpi	r24, 0x09	; 9
    1f2e:	91 05       	cpc	r25, r1
    1f30:	39 f4       	brne	.+14     	; 0x1f40 <go_to_medical_camp+0xb4>
    1f32:	80 91 fb 03 	lds	r24, 0x03FB
    1f36:	90 91 fc 03 	lds	r25, 0x03FC
    1f3a:	85 30       	cpi	r24, 0x05	; 5
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	21 f0       	breq	.+8      	; 0x1f48 <go_to_medical_camp+0xbc>
void go_to_medical_camp (void)
{ int flag=1,i;
	plotORcamp=1;
	clear_path();
	follow_line();
	while (flag)       //1
    1f40:	01 15       	cp	r16, r1
    1f42:	11 05       	cpc	r17, r1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <go_to_medical_camp+0xbc>
    1f46:	b4 cf       	rjmp	.-152    	; 0x1eb0 <go_to_medical_camp+0x24>
				 flag=0;
			 }
		 } 
	 }
	 	 
}
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <MSR>:

void MSR (void)
{
	if (color[patient]==1)
    1f52:	e0 91 0a 04 	lds	r30, 0x040A
    1f56:	f0 91 0b 04 	lds	r31, 0x040B
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	e0 5e       	subi	r30, 0xE0	; 224
    1f60:	fb 4f       	sbci	r31, 0xFB	; 251
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	91 05       	cpc	r25, r1
    1f6a:	31 f4       	brne	.+12     	; 0x1f78 <MSR+0x26>
	{
		turn_to_plot();
    1f6c:	0e 94 2a 0b 	call	0x1654	; 0x1654 <turn_to_plot>

	    go_to_medical_camp();
    1f70:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <go_to_medical_camp>
		turn_to_camp();
    1f74:	0e 94 b4 0b 	call	0x1768	; 0x1768 <turn_to_camp>
	}
	if (color[patient]==2)
    1f78:	e0 91 0a 04 	lds	r30, 0x040A
    1f7c:	f0 91 0b 04 	lds	r31, 0x040B
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	e0 5e       	subi	r30, 0xE0	; 224
    1f86:	fb 4f       	sbci	r31, 0xFB	; 251
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	82 30       	cpi	r24, 0x02	; 2
    1f8e:	91 05       	cpc	r25, r1
    1f90:	79 f4       	brne	.+30     	; 0x1fb0 <MSR+0x5e>
	{
		turn_to_plot();
    1f92:	0e 94 2a 0b 	call	0x1654	; 0x1654 <turn_to_plot>
		servo++;
    1f96:	80 91 08 04 	lds	r24, 0x0408
    1f9a:	90 91 09 04 	lds	r25, 0x0409
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	90 93 09 04 	sts	0x0409, r25
    1fa4:	80 93 08 04 	sts	0x0408, r24
//		servo_thing();
		rgb_off();
    1fa8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <rgb_off>
		block_buzzer();
    1fac:	0e 94 30 06 	call	0xc60	; 0xc60 <block_buzzer>
    1fb0:	08 95       	ret

00001fb2 <plot_signal_wait>:
	}
	
}

void plot_signal_wait (void)
{
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
  while(!(color[patient]))
    1fba:	e0 91 0a 04 	lds	r30, 0x040A
    1fbe:	f0 91 0b 04 	lds	r31, 0x040B
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	e0 5e       	subi	r30, 0xE0	; 224
    1fc8:	fb 4f       	sbci	r31, 0xFB	; 251
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	b9 f4       	brne	.+46     	; 0x2000 <plot_signal_wait+0x4e>
  {
	  lcd_cursor(2,1);
	  lcd_string("wait");  
    1fd2:	cc e0       	ldi	r28, 0x0C	; 12
    1fd4:	d2 e0       	ldi	r29, 0x02	; 2
	
}

void plot_signal_wait (void)
{
  while(!(color[patient]))
    1fd6:	00 e2       	ldi	r16, 0x20	; 32
    1fd8:	14 e0       	ldi	r17, 0x04	; 4
  {
	  lcd_cursor(2,1);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	0e 94 21 02 	call	0x442	; 0x442 <lcd_cursor>
	  lcd_string("wait");  
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0e 94 12 02 	call	0x424	; 0x424 <lcd_string>
	
}

void plot_signal_wait (void)
{
  while(!(color[patient]))
    1fe8:	e0 91 0a 04 	lds	r30, 0x040A
    1fec:	f0 91 0b 04 	lds	r31, 0x040B
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	e0 0f       	add	r30, r16
    1ff6:	f1 1f       	adc	r31, r17
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	69 f3       	breq	.-38     	; 0x1fda <plot_signal_wait+0x28>
  {
	  lcd_cursor(2,1);
	  lcd_string("wait");  
  }	
}
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret

0000200a <is_all_patient_treated>:

void is_all_patient_treated (void)
{
	if(patient==8)
    200a:	80 91 0a 04 	lds	r24, 0x040A
    200e:	90 91 0b 04 	lds	r25, 0x040B
    2012:	88 30       	cpi	r24, 0x08	; 8
    2014:	91 05       	cpc	r25, r1
    2016:	21 f4       	brne	.+8      	; 0x2020 <is_all_patient_treated+0x16>
	{
	reached=0;}
    2018:	10 92 14 02 	sts	0x0214, r1
    201c:	10 92 13 02 	sts	0x0213, r1
    2020:	08 95       	ret

00002022 <have_i_reached_plot>:
}


void have_i_reached_plot (void)
{   unsigned int i;
    2022:	cf 92       	push	r12
    2024:	df 92       	push	r13
    2026:	ef 92       	push	r14
    2028:	ff 92       	push	r15
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	c9 ef       	ldi	r28, 0xF9	; 249
    2034:	d5 e0       	ldi	r29, 0x05	; 5
    2036:	02 e8       	ldi	r16, 0x82	; 130
    2038:	14 e0       	ldi	r17, 0x04	; 4
	{
	reached=0;}
}


void have_i_reached_plot (void)
    203a:	ee 24       	eor	r14, r14
    203c:	ff 24       	eor	r15, r15
    203e:	68 94       	set
    2040:	e3 f8       	bld	r14, 3
    2042:	ec 0e       	add	r14, r28
    2044:	fd 1e       	adc	r15, r29
	{
		if((adj_x[i]==x_counter) && (adj_y[i]==y_counter) )
		{
			clear_path();
			lcd_cursor(2,8);
			lcd_string("p");
    2046:	0f 2e       	mov	r0, r31
    2048:	f1 e1       	ldi	r31, 0x11	; 17
    204a:	cf 2e       	mov	r12, r31
    204c:	f2 e0       	ldi	r31, 0x02	; 2
    204e:	df 2e       	mov	r13, r31
    2050:	f0 2d       	mov	r31, r0

void have_i_reached_plot (void)
{   unsigned int i;
	for (i=0;i<4;i++)
	{
		if((adj_x[i]==x_counter) && (adj_y[i]==y_counter) )
    2052:	89 91       	ld	r24, Y+
    2054:	99 91       	ld	r25, Y+
    2056:	20 91 fd 03 	lds	r18, 0x03FD
    205a:	30 91 fe 03 	lds	r19, 0x03FE
    205e:	82 17       	cp	r24, r18
    2060:	93 07       	cpc	r25, r19
    2062:	61 f5       	brne	.+88     	; 0x20bc <have_i_reached_plot+0x9a>
    2064:	f8 01       	movw	r30, r16
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	20 91 fb 03 	lds	r18, 0x03FB
    206e:	30 91 fc 03 	lds	r19, 0x03FC
    2072:	82 17       	cp	r24, r18
    2074:	93 07       	cpc	r25, r19
    2076:	11 f5       	brne	.+68     	; 0x20bc <have_i_reached_plot+0x9a>
		{
			clear_path();
    2078:	0e 94 92 08 	call	0x1124	; 0x1124 <clear_path>
			lcd_cursor(2,8);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	68 e0       	ldi	r22, 0x08	; 8
    2080:	0e 94 21 02 	call	0x442	; 0x442 <lcd_cursor>
			lcd_string("p");
    2084:	c6 01       	movw	r24, r12
    2086:	0e 94 12 02 	call	0x424	; 0x424 <lcd_string>
		    lcd_print(2,16,patient,1);
    208a:	40 91 0a 04 	lds	r20, 0x040A
    208e:	50 91 0b 04 	lds	r21, 0x040B
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	60 e1       	ldi	r22, 0x10	; 16
    2096:	21 e0       	ldi	r18, 0x01	; 1
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
		    is_all_patient_treated();
    209e:	0e 94 05 10 	call	0x200a	; 0x200a <is_all_patient_treated>
			MSR();
    20a2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <MSR>
			patient++;
    20a6:	80 91 0a 04 	lds	r24, 0x040A
    20aa:	90 91 0b 04 	lds	r25, 0x040B
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	90 93 0b 04 	sts	0x040B, r25
    20b4:	80 93 0a 04 	sts	0x040A, r24
			clear_path();
    20b8:	0e 94 92 08 	call	0x1124	; 0x1124 <clear_path>
    20bc:	0e 5f       	subi	r16, 0xFE	; 254
    20be:	1f 4f       	sbci	r17, 0xFF	; 255
}


void have_i_reached_plot (void)
{   unsigned int i;
	for (i=0;i<4;i++)
    20c0:	ce 15       	cp	r28, r14
    20c2:	df 05       	cpc	r29, r15
    20c4:	31 f6       	brne	.-116    	; 0x2052 <have_i_reached_plot+0x30>
			MSR();
			patient++;
			clear_path();
		}
	}
	if (reached && !plotORcamp)
    20c6:	80 91 13 02 	lds	r24, 0x0213
    20ca:	90 91 14 02 	lds	r25, 0x0214
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	51 f1       	breq	.+84     	; 0x2126 <have_i_reached_plot+0x104>
    20d2:	80 91 04 04 	lds	r24, 0x0404
    20d6:	90 91 05 04 	lds	r25, 0x0405
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	21 f5       	brne	.+72     	; 0x2126 <have_i_reached_plot+0x104>
	{
		temp_path_log[x_counter][y_counter]++;
    20de:	40 91 fd 03 	lds	r20, 0x03FD
    20e2:	50 91 fe 03 	lds	r21, 0x03FE
    20e6:	60 91 fb 03 	lds	r22, 0x03FB
    20ea:	70 91 fc 03 	lds	r23, 0x03FC
    20ee:	9a 01       	movw	r18, r20
    20f0:	22 0f       	add	r18, r18
    20f2:	33 1f       	adc	r19, r19
    20f4:	ca 01       	movw	r24, r20
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	82 0f       	add	r24, r18
    2104:	93 1f       	adc	r25, r19
    2106:	48 0f       	add	r20, r24
    2108:	59 1f       	adc	r21, r25
    210a:	64 0f       	add	r22, r20
    210c:	75 1f       	adc	r23, r21
    210e:	fb 01       	movw	r30, r22
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	eb 5e       	subi	r30, 0xEB	; 235
    2116:	fd 4f       	sbci	r31, 0xFD	; 253
    2118:	80 81       	ld	r24, Z
    211a:	91 81       	ldd	r25, Z+1	; 0x01
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
		follow_line();
    2122:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
		
	}
	plotORcamp=0;
    2126:	10 92 05 04 	sts	0x0405, r1
    212a:	10 92 04 04 	sts	0x0404, r1

}
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	08 95       	ret

00002140 <test>:
void test (void)
{

	follow_line();
    2140:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	9f ef       	ldi	r25, 0xFF	; 255
    2148:	a9 e5       	ldi	r26, 0x59	; 89
    214a:	81 50       	subi	r24, 0x01	; 1
    214c:	90 40       	sbci	r25, 0x00	; 0
    214e:	a0 40       	sbci	r26, 0x00	; 0
    2150:	e1 f7       	brne	.-8      	; 0x214a <test+0xa>
    2152:	00 c0       	rjmp	.+0      	; 0x2154 <test+0x14>
    2154:	00 00       	nop
	_delay_ms(2000);
	right_90();
    2156:	0e 94 55 07 	call	0xeaa	; 0xeaa <right_90>
	follow_line();
    215a:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
	follow_line();
    215e:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
	left_90();
    2162:	0e 94 65 07 	call	0xeca	; 0xeca <left_90>
	follow_line();
    2166:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
}
    216a:	08 95       	ret

0000216c <patient_led>:

void patient_led (void)
{
	if (color[patient]==1) //red_patient
    216c:	e0 91 0a 04 	lds	r30, 0x040A
    2170:	f0 91 0b 04 	lds	r31, 0x040B
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	e0 5e       	subi	r30, 0xE0	; 224
    217a:	fb 4f       	sbci	r31, 0xFB	; 251
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	91 05       	cpc	r25, r1
    2184:	11 f4       	brne	.+4      	; 0x218a <patient_led+0x1e>
	{
		red_on();
    2186:	0e 94 67 05 	call	0xace	; 0xace <red_on>
	}
	
	if (color[patient]==2) // greeen_patient
    218a:	e0 91 0a 04 	lds	r30, 0x040A
    218e:	f0 91 0b 04 	lds	r31, 0x040B
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	e0 5e       	subi	r30, 0xE0	; 224
    2198:	fb 4f       	sbci	r31, 0xFB	; 251
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	82 30       	cpi	r24, 0x02	; 2
    21a0:	91 05       	cpc	r25, r1
    21a2:	11 f4       	brne	.+4      	; 0x21a8 <patient_led+0x3c>
	{
		green_on();
    21a4:	0e 94 6f 05 	call	0xade	; 0xade <green_on>
    21a8:	08 95       	ret

000021aa <main>:
	}
}
//Rescue robot..... 

int main (void)
{ 
    21aa:	4f 92       	push	r4
    21ac:	5f 92       	push	r5
    21ae:	6f 92       	push	r6
    21b0:	7f 92       	push	r7
    21b2:	8f 92       	push	r8
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
	cli();
    21ca:	f8 94       	cli
	port_init();
    21cc:	0e 94 b1 05 	call	0xb62	; 0xb62 <port_init>
	sei();
    21d0:	78 94       	sei

           // clear matrix of arena

    lcd_set_4bit();
    21d2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <lcd_set_4bit>
	lcd_init();
    21d6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_init>
// 		lcd_print(1,9+i,color[i],1);
// 	}
// }


while (color[0]==0)
    21da:	40 91 20 04 	lds	r20, 0x0420
    21de:	50 91 21 04 	lds	r21, 0x0421
    21e2:	41 15       	cp	r20, r1
    21e4:	51 05       	cpc	r21, r1
    21e6:	69 f4       	brne	.+26     	; 0x2202 <__stack+0x3>
    21e8:	c0 e2       	ldi	r28, 0x20	; 32
    21ea:	d4 e0       	ldi	r29, 0x04	; 4
{
	lcd_print(1,1,color[0],1);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	21 e0       	ldi	r18, 0x01	; 1
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
// 		lcd_print(1,9+i,color[i],1);
// 	}
// }


while (color[0]==0)
    21f8:	48 81       	ld	r20, Y
    21fa:	59 81       	ldd	r21, Y+1	; 0x01
    21fc:	41 15       	cp	r20, r1
    21fe:	51 05       	cpc	r21, r1
    2200:	a9 f3       	breq	.-22     	; 0x21ec <main+0x42>
{
	lcd_print(1,1,color[0],1);
}

follow_line();
    2202:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
while (reached)
    2206:	0f 2e       	mov	r0, r31
    2208:	f4 e4       	ldi	r31, 0x44	; 68
    220a:	af 2e       	mov	r10, r31
    220c:	f4 e0       	ldi	r31, 0x04	; 4
    220e:	bf 2e       	mov	r11, r31
    2210:	f0 2d       	mov	r31, r0
    2212:	0f 2e       	mov	r0, r31
    2214:	f2 e3       	ldi	r31, 0x32	; 50
    2216:	8f 2e       	mov	r8, r31
    2218:	f4 e0       	ldi	r31, 0x04	; 4
    221a:	9f 2e       	mov	r9, r31
    221c:	f0 2d       	mov	r31, r0
    221e:	0f 2e       	mov	r0, r31
    2220:	f0 e2       	ldi	r31, 0x20	; 32
    2222:	6f 2e       	mov	r6, r31
    2224:	f4 e0       	ldi	r31, 0x04	; 4
    2226:	7f 2e       	mov	r7, r31
    2228:	f0 2d       	mov	r31, r0
    222a:	d1 e0       	ldi	r29, 0x01	; 1
		  nodeORmid();
		 if (Iam_at==1) //node
		 {	 sort_array();
			 patient_led();
			 lcd_print(2,10,dest_x[patient],1);
			 lcd_string("x");
    222c:	0f 2e       	mov	r0, r31
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	4f 2e       	mov	r4, r31
    2232:	f2 e0       	ldi	r31, 0x02	; 2
    2234:	5f 2e       	mov	r5, r31
    2236:	f0 2d       	mov	r31, r0
{
	lcd_print(1,1,color[0],1);
}

follow_line();
while (reached)
    2238:	65 c0       	rjmp	.+202    	; 0x2304 <__stack+0x105>
          { 
			  for (i=0;i<8;i++)
			  	{
			  		lcd_print(1,1+i,dest_x[i],1);
    223a:	f8 01       	movw	r30, r16
    223c:	41 91       	ld	r20, Z+
    223e:	51 91       	ld	r21, Z+
    2240:	8f 01       	movw	r16, r30
    2242:	8d 2f       	mov	r24, r29
    2244:	6c 2f       	mov	r22, r28
    2246:	21 e0       	ldi	r18, 0x01	; 1
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
			  		lcd_print(2,1+i,dest_y[i],1);
    224e:	f7 01       	movw	r30, r14
    2250:	41 91       	ld	r20, Z+
    2252:	51 91       	ld	r21, Z+
    2254:	7f 01       	movw	r14, r30
    2256:	82 e0       	ldi	r24, 0x02	; 2
    2258:	6c 2f       	mov	r22, r28
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
			  		lcd_print(1,9+i,color[i],1);
    2262:	f6 01       	movw	r30, r12
    2264:	41 91       	ld	r20, Z+
    2266:	51 91       	ld	r21, Z+
    2268:	6f 01       	movw	r12, r30
    226a:	6c 2f       	mov	r22, r28
    226c:	68 5f       	subi	r22, 0xF8	; 248
    226e:	8d 2f       	mov	r24, r29
    2270:	21 e0       	ldi	r18, 0x01	; 1
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
    2278:	cf 5f       	subi	r28, 0xFF	; 255
}

follow_line();
while (reached)
          { 
			  for (i=0;i<8;i++)
    227a:	c9 30       	cpi	r28, 0x09	; 9
    227c:	f1 f6       	brne	.-68     	; 0x223a <__stack+0x3b>
			  		lcd_print(1,1+i,dest_x[i],1);
			  		lcd_print(2,1+i,dest_y[i],1);
			  		lcd_print(1,9+i,color[i],1);
			  	}
		  
		  nodeORmid();
    227e:	0e 94 40 09 	call	0x1280	; 0x1280 <nodeORmid>
		 if (Iam_at==1) //node
    2282:	80 91 1a 04 	lds	r24, 0x041A
    2286:	90 91 1b 04 	lds	r25, 0x041B
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	91 05       	cpc	r25, r1
    228e:	59 f5       	brne	.+86     	; 0x22e6 <__stack+0xe7>
		 {	 sort_array();
    2290:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <sort_array>
			 patient_led();
    2294:	0e 94 b6 10 	call	0x216c	; 0x216c <patient_led>
			 lcd_print(2,10,dest_x[patient],1);
    2298:	e0 91 0a 04 	lds	r30, 0x040A
    229c:	f0 91 0b 04 	lds	r31, 0x040B
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	ea 0d       	add	r30, r10
    22a6:	fb 1d       	adc	r31, r11
    22a8:	40 81       	ld	r20, Z
    22aa:	51 81       	ldd	r21, Z+1	; 0x01
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	6a e0       	ldi	r22, 0x0A	; 10
    22b0:	21 e0       	ldi	r18, 0x01	; 1
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
			 lcd_string("x");
    22b8:	c2 01       	movw	r24, r4
    22ba:	0e 94 12 02 	call	0x424	; 0x424 <lcd_string>
			 lcd_print(2,12,dest_y[patient],1);
    22be:	e0 91 0a 04 	lds	r30, 0x040A
    22c2:	f0 91 0b 04 	lds	r31, 0x040B
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	e8 0d       	add	r30, r8
    22cc:	f9 1d       	adc	r31, r9
    22ce:	40 81       	ld	r20, Z
    22d0:	51 81       	ldd	r21, Z+1	; 0x01
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	6c e0       	ldi	r22, 0x0C	; 12
    22d6:	21 e0       	ldi	r18, 0x01	; 1
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	0e 94 41 02 	call	0x482	; 0x482 <lcd_print>
			 
			 node_action();
    22de:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <node_action>
			 follow_line();
    22e2:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_line>
	 	}

		 if (Iam_at==2)
    22e6:	80 91 1a 04 	lds	r24, 0x041A
    22ea:	90 91 1b 04 	lds	r25, 0x041B
    22ee:	82 30       	cpi	r24, 0x02	; 2
    22f0:	91 05       	cpc	r25, r1
    22f2:	41 f4       	brne	.+16     	; 0x2304 <__stack+0x105>
	     {
			 send_data();
    22f4:	0e 94 85 0a 	call	0x150a	; 0x150a <send_data>
			 plot_signal_wait();
    22f8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <plot_signal_wait>
			 adjacent_point();
    22fc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <adjacent_point>
			 have_i_reached_plot();  
    2300:	0e 94 11 10 	call	0x2022	; 0x2022 <have_i_reached_plot>
{
	lcd_print(1,1,color[0],1);
}

follow_line();
while (reached)
    2304:	80 91 13 02 	lds	r24, 0x0213
    2308:	90 91 14 02 	lds	r25, 0x0214
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	29 f0       	breq	.+10     	; 0x231a <__stack+0x11b>
    2310:	85 01       	movw	r16, r10
    2312:	74 01       	movw	r14, r8
    2314:	63 01       	movw	r12, r6
    2316:	cd 2f       	mov	r28, r29
    2318:	90 cf       	rjmp	.-224    	; 0x223a <__stack+0x3b>
			 plot_signal_wait();
			 adjacent_point();
			 have_i_reached_plot();  
		 }				 
	}
end_buzzer();
    231a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <end_buzzer>
}		
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	4f 90       	pop	r4
    2342:	08 95       	ret

00002344 <__subsf3>:
    2344:	50 58       	subi	r21, 0x80	; 128

00002346 <__addsf3>:
    2346:	bb 27       	eor	r27, r27
    2348:	aa 27       	eor	r26, r26
    234a:	0e d0       	rcall	.+28     	; 0x2368 <__addsf3x>
    234c:	4d c1       	rjmp	.+666    	; 0x25e8 <__fp_round>
    234e:	3e d1       	rcall	.+636    	; 0x25cc <__fp_pscA>
    2350:	30 f0       	brcs	.+12     	; 0x235e <__addsf3+0x18>
    2352:	43 d1       	rcall	.+646    	; 0x25da <__fp_pscB>
    2354:	20 f0       	brcs	.+8      	; 0x235e <__addsf3+0x18>
    2356:	31 f4       	brne	.+12     	; 0x2364 <__addsf3+0x1e>
    2358:	9f 3f       	cpi	r25, 0xFF	; 255
    235a:	11 f4       	brne	.+4      	; 0x2360 <__addsf3+0x1a>
    235c:	1e f4       	brtc	.+6      	; 0x2364 <__addsf3+0x1e>
    235e:	33 c1       	rjmp	.+614    	; 0x25c6 <__fp_nan>
    2360:	0e f4       	brtc	.+2      	; 0x2364 <__addsf3+0x1e>
    2362:	e0 95       	com	r30
    2364:	e7 fb       	bst	r30, 7
    2366:	29 c1       	rjmp	.+594    	; 0x25ba <__fp_inf>

00002368 <__addsf3x>:
    2368:	e9 2f       	mov	r30, r25
    236a:	4f d1       	rcall	.+670    	; 0x260a <__fp_split3>
    236c:	80 f3       	brcs	.-32     	; 0x234e <__addsf3+0x8>
    236e:	ba 17       	cp	r27, r26
    2370:	62 07       	cpc	r22, r18
    2372:	73 07       	cpc	r23, r19
    2374:	84 07       	cpc	r24, r20
    2376:	95 07       	cpc	r25, r21
    2378:	18 f0       	brcs	.+6      	; 0x2380 <__addsf3x+0x18>
    237a:	71 f4       	brne	.+28     	; 0x2398 <__addsf3x+0x30>
    237c:	9e f5       	brtc	.+102    	; 0x23e4 <__addsf3x+0x7c>
    237e:	67 c1       	rjmp	.+718    	; 0x264e <__fp_zero>
    2380:	0e f4       	brtc	.+2      	; 0x2384 <__addsf3x+0x1c>
    2382:	e0 95       	com	r30
    2384:	0b 2e       	mov	r0, r27
    2386:	ba 2f       	mov	r27, r26
    2388:	a0 2d       	mov	r26, r0
    238a:	0b 01       	movw	r0, r22
    238c:	b9 01       	movw	r22, r18
    238e:	90 01       	movw	r18, r0
    2390:	0c 01       	movw	r0, r24
    2392:	ca 01       	movw	r24, r20
    2394:	a0 01       	movw	r20, r0
    2396:	11 24       	eor	r1, r1
    2398:	ff 27       	eor	r31, r31
    239a:	59 1b       	sub	r21, r25
    239c:	99 f0       	breq	.+38     	; 0x23c4 <__addsf3x+0x5c>
    239e:	59 3f       	cpi	r21, 0xF9	; 249
    23a0:	50 f4       	brcc	.+20     	; 0x23b6 <__addsf3x+0x4e>
    23a2:	50 3e       	cpi	r21, 0xE0	; 224
    23a4:	68 f1       	brcs	.+90     	; 0x2400 <__addsf3x+0x98>
    23a6:	1a 16       	cp	r1, r26
    23a8:	f0 40       	sbci	r31, 0x00	; 0
    23aa:	a2 2f       	mov	r26, r18
    23ac:	23 2f       	mov	r18, r19
    23ae:	34 2f       	mov	r19, r20
    23b0:	44 27       	eor	r20, r20
    23b2:	58 5f       	subi	r21, 0xF8	; 248
    23b4:	f3 cf       	rjmp	.-26     	; 0x239c <__addsf3x+0x34>
    23b6:	46 95       	lsr	r20
    23b8:	37 95       	ror	r19
    23ba:	27 95       	ror	r18
    23bc:	a7 95       	ror	r26
    23be:	f0 40       	sbci	r31, 0x00	; 0
    23c0:	53 95       	inc	r21
    23c2:	c9 f7       	brne	.-14     	; 0x23b6 <__addsf3x+0x4e>
    23c4:	7e f4       	brtc	.+30     	; 0x23e4 <__addsf3x+0x7c>
    23c6:	1f 16       	cp	r1, r31
    23c8:	ba 0b       	sbc	r27, r26
    23ca:	62 0b       	sbc	r22, r18
    23cc:	73 0b       	sbc	r23, r19
    23ce:	84 0b       	sbc	r24, r20
    23d0:	ba f0       	brmi	.+46     	; 0x2400 <__addsf3x+0x98>
    23d2:	91 50       	subi	r25, 0x01	; 1
    23d4:	a1 f0       	breq	.+40     	; 0x23fe <__addsf3x+0x96>
    23d6:	ff 0f       	add	r31, r31
    23d8:	bb 1f       	adc	r27, r27
    23da:	66 1f       	adc	r22, r22
    23dc:	77 1f       	adc	r23, r23
    23de:	88 1f       	adc	r24, r24
    23e0:	c2 f7       	brpl	.-16     	; 0x23d2 <__addsf3x+0x6a>
    23e2:	0e c0       	rjmp	.+28     	; 0x2400 <__addsf3x+0x98>
    23e4:	ba 0f       	add	r27, r26
    23e6:	62 1f       	adc	r22, r18
    23e8:	73 1f       	adc	r23, r19
    23ea:	84 1f       	adc	r24, r20
    23ec:	48 f4       	brcc	.+18     	; 0x2400 <__addsf3x+0x98>
    23ee:	87 95       	ror	r24
    23f0:	77 95       	ror	r23
    23f2:	67 95       	ror	r22
    23f4:	b7 95       	ror	r27
    23f6:	f7 95       	ror	r31
    23f8:	9e 3f       	cpi	r25, 0xFE	; 254
    23fa:	08 f0       	brcs	.+2      	; 0x23fe <__addsf3x+0x96>
    23fc:	b3 cf       	rjmp	.-154    	; 0x2364 <__addsf3+0x1e>
    23fe:	93 95       	inc	r25
    2400:	88 0f       	add	r24, r24
    2402:	08 f0       	brcs	.+2      	; 0x2406 <__addsf3x+0x9e>
    2404:	99 27       	eor	r25, r25
    2406:	ee 0f       	add	r30, r30
    2408:	97 95       	ror	r25
    240a:	87 95       	ror	r24
    240c:	08 95       	ret

0000240e <__divsf3>:
    240e:	0c d0       	rcall	.+24     	; 0x2428 <__divsf3x>
    2410:	eb c0       	rjmp	.+470    	; 0x25e8 <__fp_round>
    2412:	e3 d0       	rcall	.+454    	; 0x25da <__fp_pscB>
    2414:	40 f0       	brcs	.+16     	; 0x2426 <__divsf3+0x18>
    2416:	da d0       	rcall	.+436    	; 0x25cc <__fp_pscA>
    2418:	30 f0       	brcs	.+12     	; 0x2426 <__divsf3+0x18>
    241a:	21 f4       	brne	.+8      	; 0x2424 <__divsf3+0x16>
    241c:	5f 3f       	cpi	r21, 0xFF	; 255
    241e:	19 f0       	breq	.+6      	; 0x2426 <__divsf3+0x18>
    2420:	cc c0       	rjmp	.+408    	; 0x25ba <__fp_inf>
    2422:	51 11       	cpse	r21, r1
    2424:	15 c1       	rjmp	.+554    	; 0x2650 <__fp_szero>
    2426:	cf c0       	rjmp	.+414    	; 0x25c6 <__fp_nan>

00002428 <__divsf3x>:
    2428:	f0 d0       	rcall	.+480    	; 0x260a <__fp_split3>
    242a:	98 f3       	brcs	.-26     	; 0x2412 <__divsf3+0x4>

0000242c <__divsf3_pse>:
    242c:	99 23       	and	r25, r25
    242e:	c9 f3       	breq	.-14     	; 0x2422 <__divsf3+0x14>
    2430:	55 23       	and	r21, r21
    2432:	b1 f3       	breq	.-20     	; 0x2420 <__divsf3+0x12>
    2434:	95 1b       	sub	r25, r21
    2436:	55 0b       	sbc	r21, r21
    2438:	bb 27       	eor	r27, r27
    243a:	aa 27       	eor	r26, r26
    243c:	62 17       	cp	r22, r18
    243e:	73 07       	cpc	r23, r19
    2440:	84 07       	cpc	r24, r20
    2442:	38 f0       	brcs	.+14     	; 0x2452 <__divsf3_pse+0x26>
    2444:	9f 5f       	subi	r25, 0xFF	; 255
    2446:	5f 4f       	sbci	r21, 0xFF	; 255
    2448:	22 0f       	add	r18, r18
    244a:	33 1f       	adc	r19, r19
    244c:	44 1f       	adc	r20, r20
    244e:	aa 1f       	adc	r26, r26
    2450:	a9 f3       	breq	.-22     	; 0x243c <__divsf3_pse+0x10>
    2452:	33 d0       	rcall	.+102    	; 0x24ba <__divsf3_pse+0x8e>
    2454:	0e 2e       	mov	r0, r30
    2456:	3a f0       	brmi	.+14     	; 0x2466 <__divsf3_pse+0x3a>
    2458:	e0 e8       	ldi	r30, 0x80	; 128
    245a:	30 d0       	rcall	.+96     	; 0x24bc <__divsf3_pse+0x90>
    245c:	91 50       	subi	r25, 0x01	; 1
    245e:	50 40       	sbci	r21, 0x00	; 0
    2460:	e6 95       	lsr	r30
    2462:	00 1c       	adc	r0, r0
    2464:	ca f7       	brpl	.-14     	; 0x2458 <__divsf3_pse+0x2c>
    2466:	29 d0       	rcall	.+82     	; 0x24ba <__divsf3_pse+0x8e>
    2468:	fe 2f       	mov	r31, r30
    246a:	27 d0       	rcall	.+78     	; 0x24ba <__divsf3_pse+0x8e>
    246c:	66 0f       	add	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	88 1f       	adc	r24, r24
    2472:	bb 1f       	adc	r27, r27
    2474:	26 17       	cp	r18, r22
    2476:	37 07       	cpc	r19, r23
    2478:	48 07       	cpc	r20, r24
    247a:	ab 07       	cpc	r26, r27
    247c:	b0 e8       	ldi	r27, 0x80	; 128
    247e:	09 f0       	breq	.+2      	; 0x2482 <__divsf3_pse+0x56>
    2480:	bb 0b       	sbc	r27, r27
    2482:	80 2d       	mov	r24, r0
    2484:	bf 01       	movw	r22, r30
    2486:	ff 27       	eor	r31, r31
    2488:	93 58       	subi	r25, 0x83	; 131
    248a:	5f 4f       	sbci	r21, 0xFF	; 255
    248c:	2a f0       	brmi	.+10     	; 0x2498 <__divsf3_pse+0x6c>
    248e:	9e 3f       	cpi	r25, 0xFE	; 254
    2490:	51 05       	cpc	r21, r1
    2492:	68 f0       	brcs	.+26     	; 0x24ae <__divsf3_pse+0x82>
    2494:	92 c0       	rjmp	.+292    	; 0x25ba <__fp_inf>
    2496:	dc c0       	rjmp	.+440    	; 0x2650 <__fp_szero>
    2498:	5f 3f       	cpi	r21, 0xFF	; 255
    249a:	ec f3       	brlt	.-6      	; 0x2496 <__divsf3_pse+0x6a>
    249c:	98 3e       	cpi	r25, 0xE8	; 232
    249e:	dc f3       	brlt	.-10     	; 0x2496 <__divsf3_pse+0x6a>
    24a0:	86 95       	lsr	r24
    24a2:	77 95       	ror	r23
    24a4:	67 95       	ror	r22
    24a6:	b7 95       	ror	r27
    24a8:	f7 95       	ror	r31
    24aa:	9f 5f       	subi	r25, 0xFF	; 255
    24ac:	c9 f7       	brne	.-14     	; 0x24a0 <__divsf3_pse+0x74>
    24ae:	88 0f       	add	r24, r24
    24b0:	91 1d       	adc	r25, r1
    24b2:	96 95       	lsr	r25
    24b4:	87 95       	ror	r24
    24b6:	97 f9       	bld	r25, 7
    24b8:	08 95       	ret
    24ba:	e1 e0       	ldi	r30, 0x01	; 1
    24bc:	66 0f       	add	r22, r22
    24be:	77 1f       	adc	r23, r23
    24c0:	88 1f       	adc	r24, r24
    24c2:	bb 1f       	adc	r27, r27
    24c4:	62 17       	cp	r22, r18
    24c6:	73 07       	cpc	r23, r19
    24c8:	84 07       	cpc	r24, r20
    24ca:	ba 07       	cpc	r27, r26
    24cc:	20 f0       	brcs	.+8      	; 0x24d6 <__divsf3_pse+0xaa>
    24ce:	62 1b       	sub	r22, r18
    24d0:	73 0b       	sbc	r23, r19
    24d2:	84 0b       	sbc	r24, r20
    24d4:	ba 0b       	sbc	r27, r26
    24d6:	ee 1f       	adc	r30, r30
    24d8:	88 f7       	brcc	.-30     	; 0x24bc <__divsf3_pse+0x90>
    24da:	e0 95       	com	r30
    24dc:	08 95       	ret

000024de <__fixsfsi>:
    24de:	04 d0       	rcall	.+8      	; 0x24e8 <__fixunssfsi>
    24e0:	68 94       	set
    24e2:	b1 11       	cpse	r27, r1
    24e4:	b5 c0       	rjmp	.+362    	; 0x2650 <__fp_szero>
    24e6:	08 95       	ret

000024e8 <__fixunssfsi>:
    24e8:	98 d0       	rcall	.+304    	; 0x261a <__fp_splitA>
    24ea:	88 f0       	brcs	.+34     	; 0x250e <__fixunssfsi+0x26>
    24ec:	9f 57       	subi	r25, 0x7F	; 127
    24ee:	90 f0       	brcs	.+36     	; 0x2514 <__fixunssfsi+0x2c>
    24f0:	b9 2f       	mov	r27, r25
    24f2:	99 27       	eor	r25, r25
    24f4:	b7 51       	subi	r27, 0x17	; 23
    24f6:	a0 f0       	brcs	.+40     	; 0x2520 <__fixunssfsi+0x38>
    24f8:	d1 f0       	breq	.+52     	; 0x252e <__fixunssfsi+0x46>
    24fa:	66 0f       	add	r22, r22
    24fc:	77 1f       	adc	r23, r23
    24fe:	88 1f       	adc	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	1a f0       	brmi	.+6      	; 0x250a <__fixunssfsi+0x22>
    2504:	ba 95       	dec	r27
    2506:	c9 f7       	brne	.-14     	; 0x24fa <__fixunssfsi+0x12>
    2508:	12 c0       	rjmp	.+36     	; 0x252e <__fixunssfsi+0x46>
    250a:	b1 30       	cpi	r27, 0x01	; 1
    250c:	81 f0       	breq	.+32     	; 0x252e <__fixunssfsi+0x46>
    250e:	9f d0       	rcall	.+318    	; 0x264e <__fp_zero>
    2510:	b1 e0       	ldi	r27, 0x01	; 1
    2512:	08 95       	ret
    2514:	9c c0       	rjmp	.+312    	; 0x264e <__fp_zero>
    2516:	67 2f       	mov	r22, r23
    2518:	78 2f       	mov	r23, r24
    251a:	88 27       	eor	r24, r24
    251c:	b8 5f       	subi	r27, 0xF8	; 248
    251e:	39 f0       	breq	.+14     	; 0x252e <__fixunssfsi+0x46>
    2520:	b9 3f       	cpi	r27, 0xF9	; 249
    2522:	cc f3       	brlt	.-14     	; 0x2516 <__fixunssfsi+0x2e>
    2524:	86 95       	lsr	r24
    2526:	77 95       	ror	r23
    2528:	67 95       	ror	r22
    252a:	b3 95       	inc	r27
    252c:	d9 f7       	brne	.-10     	; 0x2524 <__fixunssfsi+0x3c>
    252e:	3e f4       	brtc	.+14     	; 0x253e <__fixunssfsi+0x56>
    2530:	90 95       	com	r25
    2532:	80 95       	com	r24
    2534:	70 95       	com	r23
    2536:	61 95       	neg	r22
    2538:	7f 4f       	sbci	r23, 0xFF	; 255
    253a:	8f 4f       	sbci	r24, 0xFF	; 255
    253c:	9f 4f       	sbci	r25, 0xFF	; 255
    253e:	08 95       	ret

00002540 <__floatunsisf>:
    2540:	e8 94       	clt
    2542:	09 c0       	rjmp	.+18     	; 0x2556 <__floatsisf+0x12>

00002544 <__floatsisf>:
    2544:	97 fb       	bst	r25, 7
    2546:	3e f4       	brtc	.+14     	; 0x2556 <__floatsisf+0x12>
    2548:	90 95       	com	r25
    254a:	80 95       	com	r24
    254c:	70 95       	com	r23
    254e:	61 95       	neg	r22
    2550:	7f 4f       	sbci	r23, 0xFF	; 255
    2552:	8f 4f       	sbci	r24, 0xFF	; 255
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	99 23       	and	r25, r25
    2558:	a9 f0       	breq	.+42     	; 0x2584 <__floatsisf+0x40>
    255a:	f9 2f       	mov	r31, r25
    255c:	96 e9       	ldi	r25, 0x96	; 150
    255e:	bb 27       	eor	r27, r27
    2560:	93 95       	inc	r25
    2562:	f6 95       	lsr	r31
    2564:	87 95       	ror	r24
    2566:	77 95       	ror	r23
    2568:	67 95       	ror	r22
    256a:	b7 95       	ror	r27
    256c:	f1 11       	cpse	r31, r1
    256e:	f8 cf       	rjmp	.-16     	; 0x2560 <__floatsisf+0x1c>
    2570:	fa f4       	brpl	.+62     	; 0x25b0 <__floatsisf+0x6c>
    2572:	bb 0f       	add	r27, r27
    2574:	11 f4       	brne	.+4      	; 0x257a <__floatsisf+0x36>
    2576:	60 ff       	sbrs	r22, 0
    2578:	1b c0       	rjmp	.+54     	; 0x25b0 <__floatsisf+0x6c>
    257a:	6f 5f       	subi	r22, 0xFF	; 255
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	8f 4f       	sbci	r24, 0xFF	; 255
    2580:	9f 4f       	sbci	r25, 0xFF	; 255
    2582:	16 c0       	rjmp	.+44     	; 0x25b0 <__floatsisf+0x6c>
    2584:	88 23       	and	r24, r24
    2586:	11 f0       	breq	.+4      	; 0x258c <__floatsisf+0x48>
    2588:	96 e9       	ldi	r25, 0x96	; 150
    258a:	11 c0       	rjmp	.+34     	; 0x25ae <__floatsisf+0x6a>
    258c:	77 23       	and	r23, r23
    258e:	21 f0       	breq	.+8      	; 0x2598 <__floatsisf+0x54>
    2590:	9e e8       	ldi	r25, 0x8E	; 142
    2592:	87 2f       	mov	r24, r23
    2594:	76 2f       	mov	r23, r22
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <__floatsisf+0x5e>
    2598:	66 23       	and	r22, r22
    259a:	71 f0       	breq	.+28     	; 0x25b8 <__floatsisf+0x74>
    259c:	96 e8       	ldi	r25, 0x86	; 134
    259e:	86 2f       	mov	r24, r22
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	2a f0       	brmi	.+10     	; 0x25b0 <__floatsisf+0x6c>
    25a6:	9a 95       	dec	r25
    25a8:	66 0f       	add	r22, r22
    25aa:	77 1f       	adc	r23, r23
    25ac:	88 1f       	adc	r24, r24
    25ae:	da f7       	brpl	.-10     	; 0x25a6 <__floatsisf+0x62>
    25b0:	88 0f       	add	r24, r24
    25b2:	96 95       	lsr	r25
    25b4:	87 95       	ror	r24
    25b6:	97 f9       	bld	r25, 7
    25b8:	08 95       	ret

000025ba <__fp_inf>:
    25ba:	97 f9       	bld	r25, 7
    25bc:	9f 67       	ori	r25, 0x7F	; 127
    25be:	80 e8       	ldi	r24, 0x80	; 128
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	08 95       	ret

000025c6 <__fp_nan>:
    25c6:	9f ef       	ldi	r25, 0xFF	; 255
    25c8:	80 ec       	ldi	r24, 0xC0	; 192
    25ca:	08 95       	ret

000025cc <__fp_pscA>:
    25cc:	00 24       	eor	r0, r0
    25ce:	0a 94       	dec	r0
    25d0:	16 16       	cp	r1, r22
    25d2:	17 06       	cpc	r1, r23
    25d4:	18 06       	cpc	r1, r24
    25d6:	09 06       	cpc	r0, r25
    25d8:	08 95       	ret

000025da <__fp_pscB>:
    25da:	00 24       	eor	r0, r0
    25dc:	0a 94       	dec	r0
    25de:	12 16       	cp	r1, r18
    25e0:	13 06       	cpc	r1, r19
    25e2:	14 06       	cpc	r1, r20
    25e4:	05 06       	cpc	r0, r21
    25e6:	08 95       	ret

000025e8 <__fp_round>:
    25e8:	09 2e       	mov	r0, r25
    25ea:	03 94       	inc	r0
    25ec:	00 0c       	add	r0, r0
    25ee:	11 f4       	brne	.+4      	; 0x25f4 <__fp_round+0xc>
    25f0:	88 23       	and	r24, r24
    25f2:	52 f0       	brmi	.+20     	; 0x2608 <__fp_round+0x20>
    25f4:	bb 0f       	add	r27, r27
    25f6:	40 f4       	brcc	.+16     	; 0x2608 <__fp_round+0x20>
    25f8:	bf 2b       	or	r27, r31
    25fa:	11 f4       	brne	.+4      	; 0x2600 <__fp_round+0x18>
    25fc:	60 ff       	sbrs	r22, 0
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <__fp_round+0x20>
    2600:	6f 5f       	subi	r22, 0xFF	; 255
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	8f 4f       	sbci	r24, 0xFF	; 255
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	08 95       	ret

0000260a <__fp_split3>:
    260a:	57 fd       	sbrc	r21, 7
    260c:	90 58       	subi	r25, 0x80	; 128
    260e:	44 0f       	add	r20, r20
    2610:	55 1f       	adc	r21, r21
    2612:	59 f0       	breq	.+22     	; 0x262a <__fp_splitA+0x10>
    2614:	5f 3f       	cpi	r21, 0xFF	; 255
    2616:	71 f0       	breq	.+28     	; 0x2634 <__fp_splitA+0x1a>
    2618:	47 95       	ror	r20

0000261a <__fp_splitA>:
    261a:	88 0f       	add	r24, r24
    261c:	97 fb       	bst	r25, 7
    261e:	99 1f       	adc	r25, r25
    2620:	61 f0       	breq	.+24     	; 0x263a <__fp_splitA+0x20>
    2622:	9f 3f       	cpi	r25, 0xFF	; 255
    2624:	79 f0       	breq	.+30     	; 0x2644 <__fp_splitA+0x2a>
    2626:	87 95       	ror	r24
    2628:	08 95       	ret
    262a:	12 16       	cp	r1, r18
    262c:	13 06       	cpc	r1, r19
    262e:	14 06       	cpc	r1, r20
    2630:	55 1f       	adc	r21, r21
    2632:	f2 cf       	rjmp	.-28     	; 0x2618 <__fp_split3+0xe>
    2634:	46 95       	lsr	r20
    2636:	f1 df       	rcall	.-30     	; 0x261a <__fp_splitA>
    2638:	08 c0       	rjmp	.+16     	; 0x264a <__fp_splitA+0x30>
    263a:	16 16       	cp	r1, r22
    263c:	17 06       	cpc	r1, r23
    263e:	18 06       	cpc	r1, r24
    2640:	99 1f       	adc	r25, r25
    2642:	f1 cf       	rjmp	.-30     	; 0x2626 <__fp_splitA+0xc>
    2644:	86 95       	lsr	r24
    2646:	71 05       	cpc	r23, r1
    2648:	61 05       	cpc	r22, r1
    264a:	08 94       	sec
    264c:	08 95       	ret

0000264e <__fp_zero>:
    264e:	e8 94       	clt

00002650 <__fp_szero>:
    2650:	bb 27       	eor	r27, r27
    2652:	66 27       	eor	r22, r22
    2654:	77 27       	eor	r23, r23
    2656:	cb 01       	movw	r24, r22
    2658:	97 f9       	bld	r25, 7
    265a:	08 95       	ret

0000265c <__mulsf3>:
    265c:	0b d0       	rcall	.+22     	; 0x2674 <__mulsf3x>
    265e:	c4 cf       	rjmp	.-120    	; 0x25e8 <__fp_round>
    2660:	b5 df       	rcall	.-150    	; 0x25cc <__fp_pscA>
    2662:	28 f0       	brcs	.+10     	; 0x266e <__mulsf3+0x12>
    2664:	ba df       	rcall	.-140    	; 0x25da <__fp_pscB>
    2666:	18 f0       	brcs	.+6      	; 0x266e <__mulsf3+0x12>
    2668:	95 23       	and	r25, r21
    266a:	09 f0       	breq	.+2      	; 0x266e <__mulsf3+0x12>
    266c:	a6 cf       	rjmp	.-180    	; 0x25ba <__fp_inf>
    266e:	ab cf       	rjmp	.-170    	; 0x25c6 <__fp_nan>
    2670:	11 24       	eor	r1, r1
    2672:	ee cf       	rjmp	.-36     	; 0x2650 <__fp_szero>

00002674 <__mulsf3x>:
    2674:	ca df       	rcall	.-108    	; 0x260a <__fp_split3>
    2676:	a0 f3       	brcs	.-24     	; 0x2660 <__mulsf3+0x4>

00002678 <__mulsf3_pse>:
    2678:	95 9f       	mul	r25, r21
    267a:	d1 f3       	breq	.-12     	; 0x2670 <__mulsf3+0x14>
    267c:	95 0f       	add	r25, r21
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	55 1f       	adc	r21, r21
    2682:	62 9f       	mul	r22, r18
    2684:	f0 01       	movw	r30, r0
    2686:	72 9f       	mul	r23, r18
    2688:	bb 27       	eor	r27, r27
    268a:	f0 0d       	add	r31, r0
    268c:	b1 1d       	adc	r27, r1
    268e:	63 9f       	mul	r22, r19
    2690:	aa 27       	eor	r26, r26
    2692:	f0 0d       	add	r31, r0
    2694:	b1 1d       	adc	r27, r1
    2696:	aa 1f       	adc	r26, r26
    2698:	64 9f       	mul	r22, r20
    269a:	66 27       	eor	r22, r22
    269c:	b0 0d       	add	r27, r0
    269e:	a1 1d       	adc	r26, r1
    26a0:	66 1f       	adc	r22, r22
    26a2:	82 9f       	mul	r24, r18
    26a4:	22 27       	eor	r18, r18
    26a6:	b0 0d       	add	r27, r0
    26a8:	a1 1d       	adc	r26, r1
    26aa:	62 1f       	adc	r22, r18
    26ac:	73 9f       	mul	r23, r19
    26ae:	b0 0d       	add	r27, r0
    26b0:	a1 1d       	adc	r26, r1
    26b2:	62 1f       	adc	r22, r18
    26b4:	83 9f       	mul	r24, r19
    26b6:	a0 0d       	add	r26, r0
    26b8:	61 1d       	adc	r22, r1
    26ba:	22 1f       	adc	r18, r18
    26bc:	74 9f       	mul	r23, r20
    26be:	33 27       	eor	r19, r19
    26c0:	a0 0d       	add	r26, r0
    26c2:	61 1d       	adc	r22, r1
    26c4:	23 1f       	adc	r18, r19
    26c6:	84 9f       	mul	r24, r20
    26c8:	60 0d       	add	r22, r0
    26ca:	21 1d       	adc	r18, r1
    26cc:	82 2f       	mov	r24, r18
    26ce:	76 2f       	mov	r23, r22
    26d0:	6a 2f       	mov	r22, r26
    26d2:	11 24       	eor	r1, r1
    26d4:	9f 57       	subi	r25, 0x7F	; 127
    26d6:	50 40       	sbci	r21, 0x00	; 0
    26d8:	8a f0       	brmi	.+34     	; 0x26fc <__mulsf3_pse+0x84>
    26da:	e1 f0       	breq	.+56     	; 0x2714 <__mulsf3_pse+0x9c>
    26dc:	88 23       	and	r24, r24
    26de:	4a f0       	brmi	.+18     	; 0x26f2 <__mulsf3_pse+0x7a>
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	bb 1f       	adc	r27, r27
    26e6:	66 1f       	adc	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	88 1f       	adc	r24, r24
    26ec:	91 50       	subi	r25, 0x01	; 1
    26ee:	50 40       	sbci	r21, 0x00	; 0
    26f0:	a9 f7       	brne	.-22     	; 0x26dc <__mulsf3_pse+0x64>
    26f2:	9e 3f       	cpi	r25, 0xFE	; 254
    26f4:	51 05       	cpc	r21, r1
    26f6:	70 f0       	brcs	.+28     	; 0x2714 <__mulsf3_pse+0x9c>
    26f8:	60 cf       	rjmp	.-320    	; 0x25ba <__fp_inf>
    26fa:	aa cf       	rjmp	.-172    	; 0x2650 <__fp_szero>
    26fc:	5f 3f       	cpi	r21, 0xFF	; 255
    26fe:	ec f3       	brlt	.-6      	; 0x26fa <__mulsf3_pse+0x82>
    2700:	98 3e       	cpi	r25, 0xE8	; 232
    2702:	dc f3       	brlt	.-10     	; 0x26fa <__mulsf3_pse+0x82>
    2704:	86 95       	lsr	r24
    2706:	77 95       	ror	r23
    2708:	67 95       	ror	r22
    270a:	b7 95       	ror	r27
    270c:	f7 95       	ror	r31
    270e:	e7 95       	ror	r30
    2710:	9f 5f       	subi	r25, 0xFF	; 255
    2712:	c1 f7       	brne	.-16     	; 0x2704 <__mulsf3_pse+0x8c>
    2714:	fe 2b       	or	r31, r30
    2716:	88 0f       	add	r24, r24
    2718:	91 1d       	adc	r25, r1
    271a:	96 95       	lsr	r25
    271c:	87 95       	ror	r24
    271e:	97 f9       	bld	r25, 7
    2720:	08 95       	ret

00002722 <pow>:
    2722:	fa 01       	movw	r30, r20
    2724:	ee 0f       	add	r30, r30
    2726:	ff 1f       	adc	r31, r31
    2728:	30 96       	adiw	r30, 0x00	; 0
    272a:	21 05       	cpc	r18, r1
    272c:	31 05       	cpc	r19, r1
    272e:	99 f1       	breq	.+102    	; 0x2796 <pow+0x74>
    2730:	61 15       	cp	r22, r1
    2732:	71 05       	cpc	r23, r1
    2734:	61 f4       	brne	.+24     	; 0x274e <pow+0x2c>
    2736:	80 38       	cpi	r24, 0x80	; 128
    2738:	bf e3       	ldi	r27, 0x3F	; 63
    273a:	9b 07       	cpc	r25, r27
    273c:	49 f1       	breq	.+82     	; 0x2790 <pow+0x6e>
    273e:	68 94       	set
    2740:	90 38       	cpi	r25, 0x80	; 128
    2742:	81 05       	cpc	r24, r1
    2744:	61 f0       	breq	.+24     	; 0x275e <pow+0x3c>
    2746:	80 38       	cpi	r24, 0x80	; 128
    2748:	bf ef       	ldi	r27, 0xFF	; 255
    274a:	9b 07       	cpc	r25, r27
    274c:	41 f0       	breq	.+16     	; 0x275e <pow+0x3c>
    274e:	99 23       	and	r25, r25
    2750:	42 f5       	brpl	.+80     	; 0x27a2 <pow+0x80>
    2752:	ff 3f       	cpi	r31, 0xFF	; 255
    2754:	e1 05       	cpc	r30, r1
    2756:	31 05       	cpc	r19, r1
    2758:	21 05       	cpc	r18, r1
    275a:	11 f1       	breq	.+68     	; 0x27a0 <pow+0x7e>
    275c:	e8 94       	clt
    275e:	08 94       	sec
    2760:	e7 95       	ror	r30
    2762:	d9 01       	movw	r26, r18
    2764:	aa 23       	and	r26, r26
    2766:	29 f4       	brne	.+10     	; 0x2772 <pow+0x50>
    2768:	ab 2f       	mov	r26, r27
    276a:	be 2f       	mov	r27, r30
    276c:	f8 5f       	subi	r31, 0xF8	; 248
    276e:	d0 f3       	brcs	.-12     	; 0x2764 <pow+0x42>
    2770:	10 c0       	rjmp	.+32     	; 0x2792 <pow+0x70>
    2772:	ff 5f       	subi	r31, 0xFF	; 255
    2774:	70 f4       	brcc	.+28     	; 0x2792 <pow+0x70>
    2776:	a6 95       	lsr	r26
    2778:	e0 f7       	brcc	.-8      	; 0x2772 <pow+0x50>
    277a:	f7 39       	cpi	r31, 0x97	; 151
    277c:	50 f0       	brcs	.+20     	; 0x2792 <pow+0x70>
    277e:	19 f0       	breq	.+6      	; 0x2786 <pow+0x64>
    2780:	ff 3a       	cpi	r31, 0xAF	; 175
    2782:	38 f4       	brcc	.+14     	; 0x2792 <pow+0x70>
    2784:	9f 77       	andi	r25, 0x7F	; 127
    2786:	9f 93       	push	r25
    2788:	0c d0       	rcall	.+24     	; 0x27a2 <pow+0x80>
    278a:	0f 90       	pop	r0
    278c:	07 fc       	sbrc	r0, 7
    278e:	90 58       	subi	r25, 0x80	; 128
    2790:	08 95       	ret
    2792:	3e f0       	brts	.+14     	; 0x27a2 <pow+0x80>
    2794:	18 cf       	rjmp	.-464    	; 0x25c6 <__fp_nan>
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	80 e8       	ldi	r24, 0x80	; 128
    279c:	9f e3       	ldi	r25, 0x3F	; 63
    279e:	08 95       	ret
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	9f 77       	andi	r25, 0x7F	; 127
    27a4:	5f 93       	push	r21
    27a6:	4f 93       	push	r20
    27a8:	3f 93       	push	r19
    27aa:	2f 93       	push	r18
    27ac:	9e d0       	rcall	.+316    	; 0x28ea <log>
    27ae:	2f 91       	pop	r18
    27b0:	3f 91       	pop	r19
    27b2:	4f 91       	pop	r20
    27b4:	5f 91       	pop	r21
    27b6:	52 df       	rcall	.-348    	; 0x265c <__mulsf3>
    27b8:	05 c0       	rjmp	.+10     	; 0x27c4 <exp>
    27ba:	19 f4       	brne	.+6      	; 0x27c2 <pow+0xa0>
    27bc:	0e f0       	brts	.+2      	; 0x27c0 <pow+0x9e>
    27be:	fd ce       	rjmp	.-518    	; 0x25ba <__fp_inf>
    27c0:	46 cf       	rjmp	.-372    	; 0x264e <__fp_zero>
    27c2:	01 cf       	rjmp	.-510    	; 0x25c6 <__fp_nan>

000027c4 <exp>:
    27c4:	2a df       	rcall	.-428    	; 0x261a <__fp_splitA>
    27c6:	c8 f3       	brcs	.-14     	; 0x27ba <pow+0x98>
    27c8:	96 38       	cpi	r25, 0x86	; 134
    27ca:	c0 f7       	brcc	.-16     	; 0x27bc <pow+0x9a>
    27cc:	07 f8       	bld	r0, 7
    27ce:	0f 92       	push	r0
    27d0:	e8 94       	clt
    27d2:	2b e3       	ldi	r18, 0x3B	; 59
    27d4:	3a ea       	ldi	r19, 0xAA	; 170
    27d6:	48 eb       	ldi	r20, 0xB8	; 184
    27d8:	5f e7       	ldi	r21, 0x7F	; 127
    27da:	4e df       	rcall	.-356    	; 0x2678 <__mulsf3_pse>
    27dc:	0f 92       	push	r0
    27de:	0f 92       	push	r0
    27e0:	0f 92       	push	r0
    27e2:	4d b7       	in	r20, 0x3d	; 61
    27e4:	5e b7       	in	r21, 0x3e	; 62
    27e6:	0f 92       	push	r0
    27e8:	c0 d0       	rcall	.+384    	; 0x296a <modf>
    27ea:	e4 ee       	ldi	r30, 0xE4	; 228
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	16 d0       	rcall	.+44     	; 0x281c <__fp_powser>
    27f0:	4f 91       	pop	r20
    27f2:	5f 91       	pop	r21
    27f4:	ef 91       	pop	r30
    27f6:	ff 91       	pop	r31
    27f8:	e5 95       	asr	r30
    27fa:	ee 1f       	adc	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	49 f0       	breq	.+18     	; 0x2812 <exp+0x4e>
    2800:	fe 57       	subi	r31, 0x7E	; 126
    2802:	e0 68       	ori	r30, 0x80	; 128
    2804:	44 27       	eor	r20, r20
    2806:	ee 0f       	add	r30, r30
    2808:	44 1f       	adc	r20, r20
    280a:	fa 95       	dec	r31
    280c:	e1 f7       	brne	.-8      	; 0x2806 <exp+0x42>
    280e:	41 95       	neg	r20
    2810:	55 0b       	sbc	r21, r21
    2812:	32 d0       	rcall	.+100    	; 0x2878 <ldexp>
    2814:	0f 90       	pop	r0
    2816:	07 fe       	sbrs	r0, 7
    2818:	26 c0       	rjmp	.+76     	; 0x2866 <inverse>
    281a:	08 95       	ret

0000281c <__fp_powser>:
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	1f 93       	push	r17
    2822:	0f 93       	push	r16
    2824:	ff 92       	push	r15
    2826:	ef 92       	push	r14
    2828:	df 92       	push	r13
    282a:	7b 01       	movw	r14, r22
    282c:	8c 01       	movw	r16, r24
    282e:	68 94       	set
    2830:	05 c0       	rjmp	.+10     	; 0x283c <__fp_powser+0x20>
    2832:	da 2e       	mov	r13, r26
    2834:	ef 01       	movw	r28, r30
    2836:	1e df       	rcall	.-452    	; 0x2674 <__mulsf3x>
    2838:	fe 01       	movw	r30, r28
    283a:	e8 94       	clt
    283c:	a5 91       	lpm	r26, Z+
    283e:	25 91       	lpm	r18, Z+
    2840:	35 91       	lpm	r19, Z+
    2842:	45 91       	lpm	r20, Z+
    2844:	55 91       	lpm	r21, Z+
    2846:	ae f3       	brts	.-22     	; 0x2832 <__fp_powser+0x16>
    2848:	ef 01       	movw	r28, r30
    284a:	8e dd       	rcall	.-1252   	; 0x2368 <__addsf3x>
    284c:	fe 01       	movw	r30, r28
    284e:	97 01       	movw	r18, r14
    2850:	a8 01       	movw	r20, r16
    2852:	da 94       	dec	r13
    2854:	79 f7       	brne	.-34     	; 0x2834 <__fp_powser+0x18>
    2856:	df 90       	pop	r13
    2858:	ef 90       	pop	r14
    285a:	ff 90       	pop	r15
    285c:	0f 91       	pop	r16
    285e:	1f 91       	pop	r17
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <inverse>:
    2866:	9b 01       	movw	r18, r22
    2868:	ac 01       	movw	r20, r24
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	80 e8       	ldi	r24, 0x80	; 128
    2870:	9f e3       	ldi	r25, 0x3F	; 63
    2872:	cd cd       	rjmp	.-1126   	; 0x240e <__divsf3>
    2874:	a2 ce       	rjmp	.-700    	; 0x25ba <__fp_inf>
    2876:	ac c0       	rjmp	.+344    	; 0x29d0 <__fp_mpack>

00002878 <ldexp>:
    2878:	d0 de       	rcall	.-608    	; 0x261a <__fp_splitA>
    287a:	e8 f3       	brcs	.-6      	; 0x2876 <inverse+0x10>
    287c:	99 23       	and	r25, r25
    287e:	d9 f3       	breq	.-10     	; 0x2876 <inverse+0x10>
    2880:	94 0f       	add	r25, r20
    2882:	51 1d       	adc	r21, r1
    2884:	bb f3       	brvs	.-18     	; 0x2874 <inverse+0xe>
    2886:	91 50       	subi	r25, 0x01	; 1
    2888:	50 40       	sbci	r21, 0x00	; 0
    288a:	94 f0       	brlt	.+36     	; 0x28b0 <ldexp+0x38>
    288c:	59 f0       	breq	.+22     	; 0x28a4 <ldexp+0x2c>
    288e:	88 23       	and	r24, r24
    2890:	32 f0       	brmi	.+12     	; 0x289e <ldexp+0x26>
    2892:	66 0f       	add	r22, r22
    2894:	77 1f       	adc	r23, r23
    2896:	88 1f       	adc	r24, r24
    2898:	91 50       	subi	r25, 0x01	; 1
    289a:	50 40       	sbci	r21, 0x00	; 0
    289c:	c1 f7       	brne	.-16     	; 0x288e <ldexp+0x16>
    289e:	9e 3f       	cpi	r25, 0xFE	; 254
    28a0:	51 05       	cpc	r21, r1
    28a2:	44 f7       	brge	.-48     	; 0x2874 <inverse+0xe>
    28a4:	88 0f       	add	r24, r24
    28a6:	91 1d       	adc	r25, r1
    28a8:	96 95       	lsr	r25
    28aa:	87 95       	ror	r24
    28ac:	97 f9       	bld	r25, 7
    28ae:	08 95       	ret
    28b0:	5f 3f       	cpi	r21, 0xFF	; 255
    28b2:	ac f0       	brlt	.+42     	; 0x28de <ldexp+0x66>
    28b4:	98 3e       	cpi	r25, 0xE8	; 232
    28b6:	9c f0       	brlt	.+38     	; 0x28de <ldexp+0x66>
    28b8:	bb 27       	eor	r27, r27
    28ba:	86 95       	lsr	r24
    28bc:	77 95       	ror	r23
    28be:	67 95       	ror	r22
    28c0:	b7 95       	ror	r27
    28c2:	08 f4       	brcc	.+2      	; 0x28c6 <ldexp+0x4e>
    28c4:	b1 60       	ori	r27, 0x01	; 1
    28c6:	93 95       	inc	r25
    28c8:	c1 f7       	brne	.-16     	; 0x28ba <ldexp+0x42>
    28ca:	bb 0f       	add	r27, r27
    28cc:	58 f7       	brcc	.-42     	; 0x28a4 <ldexp+0x2c>
    28ce:	11 f4       	brne	.+4      	; 0x28d4 <ldexp+0x5c>
    28d0:	60 ff       	sbrs	r22, 0
    28d2:	e8 cf       	rjmp	.-48     	; 0x28a4 <ldexp+0x2c>
    28d4:	6f 5f       	subi	r22, 0xFF	; 255
    28d6:	7f 4f       	sbci	r23, 0xFF	; 255
    28d8:	8f 4f       	sbci	r24, 0xFF	; 255
    28da:	9f 4f       	sbci	r25, 0xFF	; 255
    28dc:	e3 cf       	rjmp	.-58     	; 0x28a4 <ldexp+0x2c>
    28de:	b8 ce       	rjmp	.-656    	; 0x2650 <__fp_szero>
    28e0:	0e f0       	brts	.+2      	; 0x28e4 <ldexp+0x6c>
    28e2:	76 c0       	rjmp	.+236    	; 0x29d0 <__fp_mpack>
    28e4:	70 ce       	rjmp	.-800    	; 0x25c6 <__fp_nan>
    28e6:	68 94       	set
    28e8:	68 ce       	rjmp	.-816    	; 0x25ba <__fp_inf>

000028ea <log>:
    28ea:	97 de       	rcall	.-722    	; 0x261a <__fp_splitA>
    28ec:	c8 f3       	brcs	.-14     	; 0x28e0 <ldexp+0x68>
    28ee:	99 23       	and	r25, r25
    28f0:	d1 f3       	breq	.-12     	; 0x28e6 <ldexp+0x6e>
    28f2:	c6 f3       	brts	.-16     	; 0x28e4 <ldexp+0x6c>
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	1f 93       	push	r17
    28fa:	0f 93       	push	r16
    28fc:	ff 92       	push	r15
    28fe:	c9 2f       	mov	r28, r25
    2900:	dd 27       	eor	r29, r29
    2902:	88 23       	and	r24, r24
    2904:	2a f0       	brmi	.+10     	; 0x2910 <log+0x26>
    2906:	21 97       	sbiw	r28, 0x01	; 1
    2908:	66 0f       	add	r22, r22
    290a:	77 1f       	adc	r23, r23
    290c:	88 1f       	adc	r24, r24
    290e:	da f7       	brpl	.-10     	; 0x2906 <log+0x1c>
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f eb       	ldi	r21, 0xBF	; 191
    2918:	9f e3       	ldi	r25, 0x3F	; 63
    291a:	88 39       	cpi	r24, 0x98	; 152
    291c:	20 f0       	brcs	.+8      	; 0x2926 <log+0x3c>
    291e:	80 3e       	cpi	r24, 0xE0	; 224
    2920:	30 f0       	brcs	.+12     	; 0x292e <log+0x44>
    2922:	21 96       	adiw	r28, 0x01	; 1
    2924:	8f 77       	andi	r24, 0x7F	; 127
    2926:	0f dd       	rcall	.-1506   	; 0x2346 <__addsf3>
    2928:	ec e0       	ldi	r30, 0x0C	; 12
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	03 c0       	rjmp	.+6      	; 0x2934 <log+0x4a>
    292e:	0b dd       	rcall	.-1514   	; 0x2346 <__addsf3>
    2930:	e9 e3       	ldi	r30, 0x39	; 57
    2932:	f1 e0       	ldi	r31, 0x01	; 1
    2934:	73 df       	rcall	.-282    	; 0x281c <__fp_powser>
    2936:	8b 01       	movw	r16, r22
    2938:	be 01       	movw	r22, r28
    293a:	ec 01       	movw	r28, r24
    293c:	fb 2e       	mov	r15, r27
    293e:	6f 57       	subi	r22, 0x7F	; 127
    2940:	71 09       	sbc	r23, r1
    2942:	75 95       	asr	r23
    2944:	77 1f       	adc	r23, r23
    2946:	88 0b       	sbc	r24, r24
    2948:	99 0b       	sbc	r25, r25
    294a:	fc dd       	rcall	.-1032   	; 0x2544 <__floatsisf>
    294c:	28 e1       	ldi	r18, 0x18	; 24
    294e:	32 e7       	ldi	r19, 0x72	; 114
    2950:	41 e3       	ldi	r20, 0x31	; 49
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	8f de       	rcall	.-738    	; 0x2674 <__mulsf3x>
    2956:	af 2d       	mov	r26, r15
    2958:	98 01       	movw	r18, r16
    295a:	ae 01       	movw	r20, r28
    295c:	ff 90       	pop	r15
    295e:	0f 91       	pop	r16
    2960:	1f 91       	pop	r17
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	00 dd       	rcall	.-1536   	; 0x2368 <__addsf3x>
    2968:	3f ce       	rjmp	.-898    	; 0x25e8 <__fp_round>

0000296a <modf>:
    296a:	fa 01       	movw	r30, r20
    296c:	dc 01       	movw	r26, r24
    296e:	aa 0f       	add	r26, r26
    2970:	bb 1f       	adc	r27, r27
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	bf 57       	subi	r27, 0x7F	; 127
    2978:	28 f4       	brcc	.+10     	; 0x2984 <modf+0x1a>
    297a:	22 27       	eor	r18, r18
    297c:	33 27       	eor	r19, r19
    297e:	44 27       	eor	r20, r20
    2980:	50 78       	andi	r21, 0x80	; 128
    2982:	1f c0       	rjmp	.+62     	; 0x29c2 <modf+0x58>
    2984:	b7 51       	subi	r27, 0x17	; 23
    2986:	88 f4       	brcc	.+34     	; 0x29aa <modf+0x40>
    2988:	ab 2f       	mov	r26, r27
    298a:	00 24       	eor	r0, r0
    298c:	46 95       	lsr	r20
    298e:	37 95       	ror	r19
    2990:	27 95       	ror	r18
    2992:	01 1c       	adc	r0, r1
    2994:	a3 95       	inc	r26
    2996:	d2 f3       	brmi	.-12     	; 0x298c <modf+0x22>
    2998:	00 20       	and	r0, r0
    299a:	69 f0       	breq	.+26     	; 0x29b6 <modf+0x4c>
    299c:	22 0f       	add	r18, r18
    299e:	33 1f       	adc	r19, r19
    29a0:	44 1f       	adc	r20, r20
    29a2:	b3 95       	inc	r27
    29a4:	da f3       	brmi	.-10     	; 0x299c <modf+0x32>
    29a6:	0d d0       	rcall	.+26     	; 0x29c2 <modf+0x58>
    29a8:	cd cc       	rjmp	.-1638   	; 0x2344 <__subsf3>
    29aa:	61 30       	cpi	r22, 0x01	; 1
    29ac:	71 05       	cpc	r23, r1
    29ae:	a0 e8       	ldi	r26, 0x80	; 128
    29b0:	8a 07       	cpc	r24, r26
    29b2:	b9 46       	sbci	r27, 0x69	; 105
    29b4:	30 f4       	brcc	.+12     	; 0x29c2 <modf+0x58>
    29b6:	9b 01       	movw	r18, r22
    29b8:	ac 01       	movw	r20, r24
    29ba:	66 27       	eor	r22, r22
    29bc:	77 27       	eor	r23, r23
    29be:	88 27       	eor	r24, r24
    29c0:	90 78       	andi	r25, 0x80	; 128
    29c2:	30 96       	adiw	r30, 0x00	; 0
    29c4:	21 f0       	breq	.+8      	; 0x29ce <modf+0x64>
    29c6:	20 83       	st	Z, r18
    29c8:	31 83       	std	Z+1, r19	; 0x01
    29ca:	42 83       	std	Z+2, r20	; 0x02
    29cc:	53 83       	std	Z+3, r21	; 0x03
    29ce:	08 95       	ret

000029d0 <__fp_mpack>:
    29d0:	9f 3f       	cpi	r25, 0xFF	; 255
    29d2:	31 f0       	breq	.+12     	; 0x29e0 <__fp_mpack_finite+0xc>

000029d4 <__fp_mpack_finite>:
    29d4:	91 50       	subi	r25, 0x01	; 1
    29d6:	20 f4       	brcc	.+8      	; 0x29e0 <__fp_mpack_finite+0xc>
    29d8:	87 95       	ror	r24
    29da:	77 95       	ror	r23
    29dc:	67 95       	ror	r22
    29de:	b7 95       	ror	r27
    29e0:	88 0f       	add	r24, r24
    29e2:	91 1d       	adc	r25, r1
    29e4:	96 95       	lsr	r25
    29e6:	87 95       	ror	r24
    29e8:	97 f9       	bld	r25, 7
    29ea:	08 95       	ret

000029ec <__udivmodhi4>:
    29ec:	aa 1b       	sub	r26, r26
    29ee:	bb 1b       	sub	r27, r27
    29f0:	51 e1       	ldi	r21, 0x11	; 17
    29f2:	07 c0       	rjmp	.+14     	; 0x2a02 <__udivmodhi4_ep>

000029f4 <__udivmodhi4_loop>:
    29f4:	aa 1f       	adc	r26, r26
    29f6:	bb 1f       	adc	r27, r27
    29f8:	a6 17       	cp	r26, r22
    29fa:	b7 07       	cpc	r27, r23
    29fc:	10 f0       	brcs	.+4      	; 0x2a02 <__udivmodhi4_ep>
    29fe:	a6 1b       	sub	r26, r22
    2a00:	b7 0b       	sbc	r27, r23

00002a02 <__udivmodhi4_ep>:
    2a02:	88 1f       	adc	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	5a 95       	dec	r21
    2a08:	a9 f7       	brne	.-22     	; 0x29f4 <__udivmodhi4_loop>
    2a0a:	80 95       	com	r24
    2a0c:	90 95       	com	r25
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	08 95       	ret

00002a14 <_exit>:
    2a14:	f8 94       	cli

00002a16 <__stop_program>:
    2a16:	ff cf       	rjmp	.-2      	; 0x2a16 <__stop_program>
